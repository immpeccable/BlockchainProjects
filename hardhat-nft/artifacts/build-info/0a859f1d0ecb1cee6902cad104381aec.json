{"id":"0a859f1d0ecb1cee6902cad104381aec","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/RandomIpfsNft.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror RandomIpfsNft__RangeOutOfBounds();\nerror RandomIpfsNft__NeedMoreETHSent();\nerror RandomIpfsNft__TranferFailed();\n\ncontract RandomIpfsNft is VRFConsumerBaseV2, ERC721URIStorage, Ownable {\n    enum Breed {\n        PUG,\n        SHIBA_INU,\n        ST_BERNARD\n    }\n\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    uint64 private immutable i_subscriptionId;\n    bytes32 private immutable i_gasLane;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant REQUEST_CONFIRMATIONS = 1;\n    uint32 private constant NUM_WORDS = 1;\n    uint256 internal immutable i_mintFee;\n\n    // VRF helpers\n    mapping(uint256 => address) s_requestIdToSender;\n\n    // NFT variables\n    uint256 public s_tokenCounter;\n    uint256 internal immutable MAX_CHANCE_VALUE = 60;\n    string[] internal s_dogTokenUris;\n\n    // Events\n\n    event NftRequested(uint256 indexed requestId, address requester);\n    event NftMinted(Breed dogBreed, address minter);\n\n    constructor(\n        address vrfCoordinatorV2,\n        uint64 subscriptionId,\n        bytes32 gasLane,\n        uint32 callbackGasLimit,\n        string[3] memory dogTokenUris,\n        uint256 mintFee\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\"Random IPFS NFT\", \"RIN\") {\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_callbackGasLimit = callbackGasLimit;\n        i_subscriptionId = subscriptionId;\n        s_dogTokenUris = dogTokenUris;\n        i_mintFee = mintFee;\n    }\n\n    function requestNft() public payable returns (uint256 requestId) {\n        if (msg.value < i_mintFee) {\n            revert RandomIpfsNft__NeedMoreETHSent();\n        }\n        requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        s_requestIdToSender[requestId] = msg.sender;\n        emit NftRequested(requestId, msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        uint256 amount = address(this).balance;\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        if (!success) {\n            revert RandomIpfsNft__TranferFailed();\n        }\n    }\n\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal override {\n        address dogOwner = s_requestIdToSender[requestId];\n        uint256 newTokenId = s_tokenCounter;\n        _safeMint(dogOwner, newTokenId);\n\n        uint256 moddedRng = randomWords[0] % MAX_CHANCE_VALUE;\n\n        Breed dogBreed = getBreedFromModdedRng(moddedRng);\n        s_tokenCounter += 1;\n        _safeMint(s_requestIdToSender[requestId], newTokenId);\n        _setTokenURI(newTokenId, s_dogTokenUris[uint256(dogBreed)]);\n        emit NftMinted(dogBreed, dogOwner);\n    }\n\n    function getBreedFromModdedRng(\n        uint256 moddedRng\n    ) public pure returns (Breed) {\n        uint256 cumulativeSum = 0;\n        uint256[3] memory chanceArray = getChanceArray();\n        for (uint256 i = 0; i < chanceArray.length; i++) {\n            if (\n                moddedRng >= cumulativeSum &&\n                moddedRng < cumulativeSum + chanceArray[i]\n            ) {\n                return Breed(i);\n            }\n            cumulativeSum += chanceArray[i];\n        }\n\n        revert RandomIpfsNft__RangeOutOfBounds();\n    }\n\n    function getSubscriptionId() public view returns (uint256) {\n        return i_subscriptionId;\n    }\n    function getSenderFromRequestId(uint256 requestId) public view returns(address){\n        return s_requestIdToSender[requestId];\n    }\n\n    function getCallbackGasLimit() public view returns (uint32) {\n        return i_callbackGasLimit;\n    }\n\n    function getGasLane() public view returns (bytes32) {\n        return i_gasLane;\n    }\n\n    function getChanceArray() public pure returns (uint256[3] memory) {\n        return [10, 30, MAX_CHANCE_VALUE];\n    }\n\n    function getMintFee() public view returns (uint256) {\n        return i_mintFee;\n    }\n\n    function getDogTokenUris(\n        uint256 index\n    ) public view returns (string memory) {\n        return s_dogTokenUris[index];\n    }\n\n    function getTokenCounter() public view returns (uint256) {\n        return s_tokenCounter;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[153]},"id":154,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":153,"linearizedBaseContracts":[153],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"97:267:1","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":70,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:1","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"392:2:1"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"437:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":62,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"451:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":64,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":68,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"465:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":66,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":67,"nodeType":"ArrayTypeName","src":"465:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:1"},"scope":153,"src":"367:121:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"492:1511:1","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":86,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:1","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:1","nodeType":"VariableDeclaration","scope":86,"src":"2039:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":72,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"subId","nameLocation":"2067:5:1","nodeType":"VariableDeclaration","scope":86,"src":"2060:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":74,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:1","nodeType":"VariableDeclaration","scope":86,"src":"2078:34:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":76,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:1","nodeType":"VariableDeclaration","scope":86,"src":"2118:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":78,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:1","nodeType":"VariableDeclaration","scope":86,"src":"2147:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":80,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:1"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:1","nodeType":"VariableDeclaration","scope":86,"src":"2185:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":83,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:1"},"scope":153,"src":"2006:198:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":87,"nodeType":"StructuredDocumentation","src":"2208:384:1","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":92,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:1","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"2622:2:1"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"subId","nameLocation":"2650:5:1","nodeType":"VariableDeclaration","scope":92,"src":"2643:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":89,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:1"},"scope":153,"src":"2595:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"2661:381:1","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":107,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:1","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"subId","nameLocation":"3077:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3070:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":94,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:1"},"returnParameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"balance","nameLocation":"3133:7:1","nodeType":"VariableDeclaration","scope":107,"src":"3126:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":97,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:1","nodeType":"VariableDeclaration","scope":107,"src":"3148:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":99,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"owner","nameLocation":"3179:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3171:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:1","nodeType":"VariableDeclaration","scope":107,"src":"3192:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ArrayTypeName","src":"3192:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:1"},"scope":153,"src":"3045:180:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3229:164:1","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:1","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"subId","nameLocation":"3445:5:1","nodeType":"VariableDeclaration","scope":115,"src":"3438:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":109,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:1","nodeType":"VariableDeclaration","scope":115,"src":"3452:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:1"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"3478:0:1"},"scope":153,"src":"3396:83:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"3483:212:1","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:1","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"subId","nameLocation":"3746:5:1","nodeType":"VariableDeclaration","scope":121,"src":"3739:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":117,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:1"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[],"src":"3761:0:1"},"scope":153,"src":"3698:64:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"3766:170:1","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:1","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"subId","nameLocation":"3967:5:1","nodeType":"VariableDeclaration","scope":129,"src":"3960:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":123,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":126,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:1","nodeType":"VariableDeclaration","scope":129,"src":"3974:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"4000:0:1"},"scope":153,"src":"3939:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"4005:172:1","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":137,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:1","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"subId","nameLocation":"4211:5:1","nodeType":"VariableDeclaration","scope":137,"src":"4204:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":131,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:1","nodeType":"VariableDeclaration","scope":137,"src":"4218:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"4244:0:1"},"scope":153,"src":"4180:65:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":138,"nodeType":"StructuredDocumentation","src":"4249:140:1","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":145,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:1","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"subId","nameLocation":"4427:5:1","nodeType":"VariableDeclaration","scope":145,"src":"4420:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":139,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"to","nameLocation":"4442:2:1","nodeType":"VariableDeclaration","scope":145,"src":"4434:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":141,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:1"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"4454:0:1"},"scope":153,"src":"4392:63:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:1","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"subId","nameLocation":"4788:5:1","nodeType":"VariableDeclaration","scope":152,"src":"4781:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:1"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":152,"src":"4818:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:1"},"scope":153,"src":"4751:73:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":154,"src":"57:4769:1","usedErrors":[]}],"src":"32:4795:1"},"id":1},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1849],"Ownable":[266]},"id":267,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":155,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":267,"sourceUnit":1850,"src":"127:30:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":158,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1849,"src":"683:7:2"},"id":159,"nodeType":"InheritanceSpecifier","src":"683:7:2"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"159:494:2","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":266,"linearizedBaseContracts":[266,1849],"name":"Ownable","nameLocation":"672:7:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":161,"mutability":"mutable","name":"_owner","nameLocation":"713:6:2","nodeType":"VariableDeclaration","scope":266,"src":"697:22:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":167,"name":"OwnershipTransferred","nameLocation":"732:20:2","nodeType":"EventDefinition","parameters":{"id":166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:2","nodeType":"VariableDeclaration","scope":167,"src":"753:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":162,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":165,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:2","nodeType":"VariableDeclaration","scope":167,"src":"784:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":164,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:2"},"src":"726:84:2"},{"body":{"id":176,"nodeType":"Block","src":"926:49:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":172,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"955:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"955:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":171,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"936:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"936:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":175,"nodeType":"ExpressionStatement","src":"936:32:2"}]},"documentation":{"id":168,"nodeType":"StructuredDocumentation","src":"816:91:2","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":177,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"923:2:2"},"returnParameters":{"id":170,"nodeType":"ParameterList","parameters":[],"src":"926:0:2"},"scope":266,"src":"912:63:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":184,"nodeType":"Block","src":"1084:41:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":180,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"1094:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1094:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":182,"nodeType":"ExpressionStatement","src":"1094:13:2"},{"id":183,"nodeType":"PlaceholderStatement","src":"1117:1:2"}]},"documentation":{"id":178,"nodeType":"StructuredDocumentation","src":"981:77:2","text":" @dev Throws if called by any account other than the owner."},"id":185,"name":"onlyOwner","nameLocation":"1072:9:2","nodeType":"ModifierDefinition","parameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"1081:2:2"},"src":"1063:62:2","virtual":false,"visibility":"internal"},{"body":{"id":193,"nodeType":"Block","src":"1256:30:2","statements":[{"expression":{"id":191,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"1273:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":190,"id":192,"nodeType":"Return","src":"1266:13:2"}]},"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"1131:65:2","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":194,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:2","nodeType":"FunctionDefinition","parameters":{"id":187,"nodeType":"ParameterList","parameters":[],"src":"1215:2:2"},"returnParameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":194,"src":"1247:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:2"},"scope":266,"src":"1201:85:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":207,"nodeType":"Block","src":"1404:85:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":199,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1422:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1422:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":201,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"1433:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":198,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:68:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":206,"nodeType":"ExpressionStatement","src":"1414:68:2"}]},"documentation":{"id":195,"nodeType":"StructuredDocumentation","src":"1292:62:2","text":" @dev Throws if the sender is not the owner."},"id":208,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:2","nodeType":"FunctionDefinition","parameters":{"id":196,"nodeType":"ParameterList","parameters":[],"src":"1379:2:2"},"returnParameters":{"id":197,"nodeType":"ParameterList","parameters":[],"src":"1404:0:2"},"scope":266,"src":"1359:130:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":221,"nodeType":"Block","src":"1885:47:2","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:2","typeDescriptions":{}}},"id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1914:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":214,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"1895:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1895:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":220,"nodeType":"ExpressionStatement","src":"1895:30:2"}]},"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"1495:331:2","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":222,"implemented":true,"kind":"function","modifiers":[{"id":212,"kind":"modifierInvocation","modifierName":{"id":211,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":185,"src":"1875:9:2"},"nodeType":"ModifierInvocation","src":"1875:9:2"}],"name":"renounceOwnership","nameLocation":"1840:17:2","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"1857:2:2"},"returnParameters":{"id":213,"nodeType":"ParameterList","parameters":[],"src":"1885:0:2"},"scope":266,"src":"1831:101:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":244,"nodeType":"Block","src":"2151:128:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":231,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"2169:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:2","typeDescriptions":{}}},"id":235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2181:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":230,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2161:73:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":239,"nodeType":"ExpressionStatement","src":"2161:73:2"},{"expression":{"arguments":[{"id":241,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"2263:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":240,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"2244:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2244:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":243,"nodeType":"ExpressionStatement","src":"2244:28:2"}]},"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"1938:138:2","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":245,"implemented":true,"kind":"function","modifiers":[{"id":228,"kind":"modifierInvocation","modifierName":{"id":227,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":185,"src":"2141:9:2"},"nodeType":"ModifierInvocation","src":"2141:9:2"}],"name":"transferOwnership","nameLocation":"2090:17:2","nodeType":"FunctionDefinition","parameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:2","nodeType":"VariableDeclaration","scope":245,"src":"2108:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":224,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:2"},"returnParameters":{"id":229,"nodeType":"ParameterList","parameters":[],"src":"2151:0:2"},"scope":266,"src":"2081:198:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":264,"nodeType":"Block","src":"2496:124:2","statements":[{"assignments":[252],"declarations":[{"constant":false,"id":252,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:2","nodeType":"VariableDeclaration","scope":264,"src":"2506:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":254,"initialValue":{"id":253,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"2525:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:2"},{"expression":{"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":255,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"2541:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":256,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"2550:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":258,"nodeType":"ExpressionStatement","src":"2541:17:2"},{"eventCall":{"arguments":[{"id":260,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"2594:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":261,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"2604:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":259,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"2573:20:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2573:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":263,"nodeType":"EmitStatement","src":"2568:45:2"}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"2285:143:2","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":265,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:2","nodeType":"FunctionDefinition","parameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":248,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:2","nodeType":"VariableDeclaration","scope":265,"src":"2461:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:2"},"returnParameters":{"id":250,"nodeType":"ParameterList","parameters":[],"src":"2496:0:2"},"scope":266,"src":"2433:187:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":267,"src":"654:1968:2","usedErrors":[]}],"src":"102:2521:2"},"id":2},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1827],"Context":[1849],"ERC165":[2048],"ERC721":[1211],"IERC165":[2060],"IERC721":[1327],"IERC721Metadata":[1497],"IERC721Receiver":[1345],"Math":[2925],"Strings":[2024]},"id":1212,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":268,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":269,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1212,"sourceUnit":1328,"src":"132:23:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":270,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1212,"sourceUnit":1346,"src":"156:31:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":271,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1212,"sourceUnit":1498,"src":"188:42:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":272,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1212,"sourceUnit":1828,"src":"231:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":273,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1212,"sourceUnit":1850,"src":"265:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":274,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1212,"sourceUnit":2025,"src":"299:33:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":275,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1212,"sourceUnit":2049,"src":"333:46:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":277,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1849,"src":"647:7:3"},"id":278,"nodeType":"InheritanceSpecifier","src":"647:7:3"},{"baseName":{"id":279,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":2048,"src":"656:6:3"},"id":280,"nodeType":"InheritanceSpecifier","src":"656:6:3"},{"baseName":{"id":281,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1327,"src":"664:7:3"},"id":282,"nodeType":"InheritanceSpecifier","src":"664:7:3"},{"baseName":{"id":283,"name":"IERC721Metadata","nodeType":"IdentifierPath","referencedDeclaration":1497,"src":"673:15:3"},"id":284,"nodeType":"InheritanceSpecifier","src":"673:15:3"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":276,"nodeType":"StructuredDocumentation","src":"381:246:3","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1211,"linearizedBaseContracts":[1211,1497,1327,2048,2060,1849],"name":"ERC721","nameLocation":"637:6:3","nodeType":"ContractDefinition","nodes":[{"id":287,"libraryName":{"id":285,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":1827,"src":"701:7:3"},"nodeType":"UsingForDirective","src":"695:26:3","typeName":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"id":290,"libraryName":{"id":288,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":2024,"src":"732:7:3"},"nodeType":"UsingForDirective","src":"726:26:3","typeName":{"id":289,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":292,"mutability":"mutable","name":"_name","nameLocation":"791:5:3","nodeType":"VariableDeclaration","scope":1211,"src":"776:20:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":291,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":294,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:3","nodeType":"VariableDeclaration","scope":1211,"src":"823:22:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":293,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":298,"mutability":"mutable","name":"_owners","nameLocation":"934:7:3","nodeType":"VariableDeclaration","scope":1211,"src":"898:43:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":297,"keyType":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":296,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":302,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:3","nodeType":"VariableDeclaration","scope":1211,"src":"992:45:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":301,"keyType":{"id":299,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":306,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:3","nodeType":"VariableDeclaration","scope":1211,"src":"1093:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":305,"keyType":{"id":303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":304,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":312,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:3","nodeType":"VariableDeclaration","scope":1211,"src":"1199:71:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":311,"keyType":{"id":307,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":310,"keyType":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":309,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":328,"nodeType":"Block","src":"1446:57:3","statements":[{"expression":{"id":322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":320,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"1456:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":321,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"1464:5:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":323,"nodeType":"ExpressionStatement","src":"1456:13:3"},{"expression":{"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":324,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"1479:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":325,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"1489:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":327,"nodeType":"ExpressionStatement","src":"1479:17:3"}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"1277:108:3","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":329,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"name_","nameLocation":"1416:5:3","nodeType":"VariableDeclaration","scope":329,"src":"1402:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":314,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":317,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:3","nodeType":"VariableDeclaration","scope":329,"src":"1423:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":316,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:3"},"returnParameters":{"id":319,"nodeType":"ParameterList","parameters":[],"src":"1446:0:3"},"scope":1211,"src":"1390:113:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2047,2059],"body":{"id":359,"nodeType":"Block","src":"1678:192:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":340,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"1707:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":342,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"1727:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1327_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1327_$","typeString":"type(contract IERC721)"}],"id":341,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1722:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1327","typeString":"type(contract IERC721)"}},"id":344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":346,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"1763:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":348,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"1783:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1497_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1497_$","typeString":"type(contract IERC721Metadata)"}],"id":347,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1778:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1497","typeString":"type(contract IERC721Metadata)"}},"id":350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":355,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"1851:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":353,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1211_$","typeString":"type(contract super ERC721)"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2047,"src":"1827:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":339,"id":358,"nodeType":"Return","src":"1688:175:3"}]},"documentation":{"id":330,"nodeType":"StructuredDocumentation","src":"1509:56:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":360,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:3","nodeType":"FunctionDefinition","overrides":{"id":336,"nodeType":"OverrideSpecifier","overrides":[{"id":334,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":2048,"src":"1646:6:3"},{"id":335,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":2060,"src":"1654:7:3"}],"src":"1637:25:3"},"parameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:3","nodeType":"VariableDeclaration","scope":360,"src":"1597:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":331,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:3"},"returnParameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":360,"src":"1672:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":337,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:3"},"scope":1211,"src":"1570:300:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1252],"body":{"id":383,"nodeType":"Block","src":"2010:123:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":370,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"2028:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":371,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:3","typeDescriptions":{}}},"id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2037:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":369,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2020:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":378,"nodeType":"ExpressionStatement","src":"2020:73:3"},{"expression":{"baseExpression":{"id":379,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"2110:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":381,"indexExpression":{"id":380,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"2120:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":368,"id":382,"nodeType":"Return","src":"2103:23:3"}]},"documentation":{"id":361,"nodeType":"StructuredDocumentation","src":"1876:48:3","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":384,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:3","nodeType":"FunctionDefinition","overrides":{"id":365,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:3"},"parameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"owner","nameLocation":"1956:5:3","nodeType":"VariableDeclaration","scope":384,"src":"1948:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":362,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:3"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":384,"src":"2001:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":366,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:3"},"scope":1211,"src":"1929:204:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1260],"body":{"id":411,"nodeType":"Block","src":"2271:138:3","statements":[{"assignments":[394],"declarations":[{"constant":false,"id":394,"mutability":"mutable","name":"owner","nameLocation":"2289:5:3","nodeType":"VariableDeclaration","scope":411,"src":"2281:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":393,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":398,"initialValue":{"arguments":[{"id":396,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"2306:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":395,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"2297:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2297:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":400,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"2332:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:3","typeDescriptions":{}}},"id":404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2341:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":399,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2324:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":408,"nodeType":"ExpressionStatement","src":"2324:56:3"},{"expression":{"id":409,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"2397:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":392,"id":410,"nodeType":"Return","src":"2390:12:3"}]},"documentation":{"id":385,"nodeType":"StructuredDocumentation","src":"2139:46:3","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":412,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:3","nodeType":"FunctionDefinition","overrides":{"id":389,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:3"},"parameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:3","nodeType":"VariableDeclaration","scope":412,"src":"2207:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":386,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:3"},"returnParameters":{"id":392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":412,"src":"2262:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":390,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:3"},"scope":1211,"src":"2190:219:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1482],"body":{"id":421,"nodeType":"Block","src":"2540:29:3","statements":[{"expression":{"id":419,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"2557:5:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":418,"id":420,"nodeType":"Return","src":"2550:12:3"}]},"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"2415:51:3","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":422,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:3","nodeType":"FunctionDefinition","overrides":{"id":415,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:3"},"parameters":{"id":414,"nodeType":"ParameterList","parameters":[],"src":"2484:2:3"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":422,"src":"2525:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":416,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:3"},"scope":1211,"src":"2471:98:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1488],"body":{"id":431,"nodeType":"Block","src":"2704:31:3","statements":[{"expression":{"id":429,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"2721:7:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":428,"id":430,"nodeType":"Return","src":"2714:14:3"}]},"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"2575:53:3","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":432,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:3","nodeType":"FunctionDefinition","overrides":{"id":425,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:3"},"parameters":{"id":424,"nodeType":"ParameterList","parameters":[],"src":"2648:2:3"},"returnParameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":432,"src":"2689:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":426,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:3"},"scope":1211,"src":"2633:102:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1496],"body":{"id":470,"nodeType":"Block","src":"2889:188:3","statements":[{"expression":{"arguments":[{"id":442,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"2914:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":441,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"2899:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2899:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":444,"nodeType":"ExpressionStatement","src":"2899:23:3"},{"assignments":[446],"declarations":[{"constant":false,"id":446,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:3","nodeType":"VariableDeclaration","scope":470,"src":"2933:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":445,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":449,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":447,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2957:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2957:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:3"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":452,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"2990:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":450,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:3","typeDescriptions":{}}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2984:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2984:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:3","trueExpression":{"arguments":[{"arguments":[{"id":461,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"3036:7:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":462,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"3045:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1907,"src":"3045:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3045:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":459,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3019:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":457,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:3","typeDescriptions":{}}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3012:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":440,"id":469,"nodeType":"Return","src":"2977:93:3"}]},"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"2741:55:3","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":471,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:3","nodeType":"FunctionDefinition","overrides":{"id":437,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:3"},"parameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:3","nodeType":"VariableDeclaration","scope":471,"src":"2819:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":434,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:3"},"returnParameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":471,"src":"2874:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":438,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:3"},"scope":1211,"src":"2801:276:3","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":479,"nodeType":"Block","src":"3385:26:3","statements":[{"expression":{"hexValue":"","id":477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":476,"id":478,"nodeType":"Return","src":"3395:9:3"}]},"documentation":{"id":472,"nodeType":"StructuredDocumentation","src":"3083:231:3","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":480,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:3","nodeType":"FunctionDefinition","parameters":{"id":473,"nodeType":"ParameterList","parameters":[],"src":"3336:2:3"},"returnParameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":480,"src":"3370:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":474,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:3"},"scope":1211,"src":"3319:92:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1300],"body":{"id":522,"nodeType":"Block","src":"3538:336:3","statements":[{"assignments":[490],"declarations":[{"constant":false,"id":490,"mutability":"mutable","name":"owner","nameLocation":"3556:5:3","nodeType":"VariableDeclaration","scope":522,"src":"3548:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":495,"initialValue":{"arguments":[{"id":493,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"3579:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":491,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"3564:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1211_$","typeString":"type(contract ERC721)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":412,"src":"3564:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3564:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":497,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"3605:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":498,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"3611:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":496,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3597:57:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":502,"nodeType":"ExpressionStatement","src":"3597:57:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":504,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"3686:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3686:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":506,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"3702:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":509,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"3728:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":510,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"3735:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3735:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":508,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"3711:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3711:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":503,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3665:170:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":516,"nodeType":"ExpressionStatement","src":"3665:170:3"},{"expression":{"arguments":[{"id":518,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"3855:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":519,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"3859:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":517,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3846:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3846:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":521,"nodeType":"ExpressionStatement","src":"3846:21:3"}]},"documentation":{"id":481,"nodeType":"StructuredDocumentation","src":"3417:46:3","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":523,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:3","nodeType":"FunctionDefinition","overrides":{"id":487,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:3"},"parameters":{"id":486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":483,"mutability":"mutable","name":"to","nameLocation":"3493:2:3","nodeType":"VariableDeclaration","scope":523,"src":"3485:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":482,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":485,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:3","nodeType":"VariableDeclaration","scope":523,"src":"3497:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":484,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:3"},"returnParameters":{"id":488,"nodeType":"ParameterList","parameters":[],"src":"3538:0:3"},"scope":1211,"src":"3468:406:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1316],"body":{"id":540,"nodeType":"Block","src":"4020:82:3","statements":[{"expression":{"arguments":[{"id":533,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"4045:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":532,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"4030:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4030:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":535,"nodeType":"ExpressionStatement","src":"4030:23:3"},{"expression":{"baseExpression":{"id":536,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"4071:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":538,"indexExpression":{"id":537,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"4087:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":531,"id":539,"nodeType":"Return","src":"4064:31:3"}]},"documentation":{"id":524,"nodeType":"StructuredDocumentation","src":"3880:50:3","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":541,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:3","nodeType":"FunctionDefinition","overrides":{"id":528,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:3"},"parameters":{"id":527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":526,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:3","nodeType":"VariableDeclaration","scope":541,"src":"3956:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:3"},"returnParameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":541,"src":"4011:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":529,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:3"},"scope":1211,"src":"3935:167:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1308],"body":{"id":557,"nodeType":"Block","src":"4253:69:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":551,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"4282:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4282:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":553,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"4296:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":554,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"4306:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":550,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"4263:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4263:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":556,"nodeType":"ExpressionStatement","src":"4263:52:3"}]},"documentation":{"id":542,"nodeType":"StructuredDocumentation","src":"4108:56:3","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":558,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:3","nodeType":"FunctionDefinition","overrides":{"id":548,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:3"},"parameters":{"id":547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":544,"mutability":"mutable","name":"operator","nameLocation":"4204:8:3","nodeType":"VariableDeclaration","scope":558,"src":"4196:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":546,"mutability":"mutable","name":"approved","nameLocation":"4219:8:3","nodeType":"VariableDeclaration","scope":558,"src":"4214:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":545,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:3"},"returnParameters":{"id":549,"nodeType":"ParameterList","parameters":[],"src":"4253:0:3"},"scope":1211,"src":"4169:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1326],"body":{"id":575,"nodeType":"Block","src":"4491:59:3","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":569,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"4508:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":571,"indexExpression":{"id":570,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"4527:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":573,"indexExpression":{"id":572,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"4534:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":568,"id":574,"nodeType":"Return","src":"4501:42:3"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"4328:55:3","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":576,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:3","nodeType":"FunctionDefinition","overrides":{"id":565,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:3"},"parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"owner","nameLocation":"4422:5:3","nodeType":"VariableDeclaration","scope":576,"src":"4414:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"operator","nameLocation":"4437:8:3","nodeType":"VariableDeclaration","scope":576,"src":"4429:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":562,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:3"},"returnParameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":576,"src":"4485:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":566,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:3"},"scope":1211,"src":"4388:162:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1292],"body":{"id":602,"nodeType":"Block","src":"4731:207:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":589,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"4820:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4820:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":591,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"4834:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":588,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"4801:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4801:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":587,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4793:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":595,"nodeType":"ExpressionStatement","src":"4793:99:3"},{"expression":{"arguments":[{"id":597,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":579,"src":"4913:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":598,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"4919:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":599,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"4923:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":596,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"4903:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4903:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":601,"nodeType":"ExpressionStatement","src":"4903:28:3"}]},"documentation":{"id":577,"nodeType":"StructuredDocumentation","src":"4556:51:3","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":603,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:3","nodeType":"FunctionDefinition","overrides":{"id":585,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:3"},"parameters":{"id":584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"from","nameLocation":"4651:4:3","nodeType":"VariableDeclaration","scope":603,"src":"4643:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":578,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":581,"mutability":"mutable","name":"to","nameLocation":"4673:2:3","nodeType":"VariableDeclaration","scope":603,"src":"4665:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":580,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":583,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:3","nodeType":"VariableDeclaration","scope":603,"src":"4685:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":582,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:3"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"4731:0:3"},"scope":1211,"src":"4612:326:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1282],"body":{"id":621,"nodeType":"Block","src":"5127:56:3","statements":[{"expression":{"arguments":[{"id":615,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"5154:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":616,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"5160:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":617,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"5164:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":614,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[622,652],"referencedDeclaration":652,"src":"5137:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5137:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":620,"nodeType":"ExpressionStatement","src":"5137:39:3"}]},"documentation":{"id":604,"nodeType":"StructuredDocumentation","src":"4944:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":622,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:3","nodeType":"FunctionDefinition","overrides":{"id":612,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:3"},"parameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"from","nameLocation":"5047:4:3","nodeType":"VariableDeclaration","scope":622,"src":"5039:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"to","nameLocation":"5069:2:3","nodeType":"VariableDeclaration","scope":622,"src":"5061:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":607,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":610,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:3","nodeType":"VariableDeclaration","scope":622,"src":"5081:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":609,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:3"},"returnParameters":{"id":613,"nodeType":"ParameterList","parameters":[],"src":"5127:0:3"},"scope":1211,"src":"5004:179:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1272],"body":{"id":651,"nodeType":"Block","src":"5399:164:3","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":637,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"5436:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5436:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":639,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"5450:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":636,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"5417:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5417:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":635,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5409:99:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"5409:99:3"},{"expression":{"arguments":[{"id":645,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"5532:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":646,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":627,"src":"5538:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":647,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"5542:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":648,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"5551:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":644,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"5518:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5518:38:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":650,"nodeType":"ExpressionStatement","src":"5518:38:3"}]},"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"5189:55:3","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":652,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:3","nodeType":"FunctionDefinition","overrides":{"id":633,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:3"},"parameters":{"id":632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"from","nameLocation":"5292:4:3","nodeType":"VariableDeclaration","scope":652,"src":"5284:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":627,"mutability":"mutable","name":"to","nameLocation":"5314:2:3","nodeType":"VariableDeclaration","scope":652,"src":"5306:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":629,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:3","nodeType":"VariableDeclaration","scope":652,"src":"5326:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"data","nameLocation":"5364:4:3","nodeType":"VariableDeclaration","scope":652,"src":"5351:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":630,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:3"},"returnParameters":{"id":634,"nodeType":"ParameterList","parameters":[],"src":"5399:0:3"},"scope":1211,"src":"5249:314:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":680,"nodeType":"Block","src":"6564:165:3","statements":[{"expression":{"arguments":[{"id":665,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"6584:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":666,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"6590:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":667,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"6594:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":664,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"6574:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6574:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":669,"nodeType":"ExpressionStatement","src":"6574:28:3"},{"expression":{"arguments":[{"arguments":[{"id":672,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"6643:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":673,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"6649:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":674,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"6653:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":675,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"6662:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":671,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"6620:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6620:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":670,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6612:110:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"ExpressionStatement","src":"6612:110:3"}]},"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"5569:850:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":681,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:3","nodeType":"FunctionDefinition","parameters":{"id":662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"from","nameLocation":"6464:4:3","nodeType":"VariableDeclaration","scope":681,"src":"6456:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"to","nameLocation":"6486:2:3","nodeType":"VariableDeclaration","scope":681,"src":"6478:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":656,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":659,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:3","nodeType":"VariableDeclaration","scope":681,"src":"6498:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":661,"mutability":"mutable","name":"data","nameLocation":"6536:4:3","nodeType":"VariableDeclaration","scope":681,"src":"6523:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":660,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:3"},"returnParameters":{"id":663,"nodeType":"ParameterList","parameters":[],"src":"6564:0:3"},"scope":1211,"src":"6424:305:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":693,"nodeType":"Block","src":"6913:40:3","statements":[{"expression":{"baseExpression":{"id":689,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"6930:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":691,"indexExpression":{"id":690,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"6938:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":688,"id":692,"nodeType":"Return","src":"6923:23:3"}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"6735:98:3","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":694,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:3","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:3","nodeType":"VariableDeclaration","scope":694,"src":"6856:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":683,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:3"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":694,"src":"6904:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":686,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:3"},"scope":1211,"src":"6838:115:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":711,"nodeType":"Block","src":"7327:55:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":703,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"7353:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":702,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"7344:8:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":705,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:3","typeDescriptions":{}}},"id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7365:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":701,"id":710,"nodeType":"Return","src":"7337:38:3"}]},"documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"6959:292:3","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":712,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:3","nodeType":"FunctionDefinition","parameters":{"id":698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":697,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:3","nodeType":"VariableDeclaration","scope":712,"src":"7273:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":696,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:3"},"returnParameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":700,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"7321:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":699,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:3"},"scope":1211,"src":"7256:126:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":745,"nodeType":"Block","src":"7639:162:3","statements":[{"assignments":[723],"declarations":[{"constant":false,"id":723,"mutability":"mutable","name":"owner","nameLocation":"7657:5:3","nodeType":"VariableDeclaration","scope":745,"src":"7649:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":728,"initialValue":{"arguments":[{"id":726,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"7680:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":724,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"7665:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1211_$","typeString":"type(contract ERC721)"}},"id":725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":412,"src":"7665:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7665:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:3"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":729,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"7706:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":730,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"7717:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":733,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"7743:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":734,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"7750:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":732,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"7726:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7726:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":738,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"7774:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":737,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"7762:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7762:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":740,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"7786:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":743,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":721,"id":744,"nodeType":"Return","src":"7698:96:3"}]},"documentation":{"id":713,"nodeType":"StructuredDocumentation","src":"7388:147:3","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":746,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:3","nodeType":"FunctionDefinition","parameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"spender","nameLocation":"7576:7:3","nodeType":"VariableDeclaration","scope":746,"src":"7568:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":714,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":717,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:3","nodeType":"VariableDeclaration","scope":746,"src":"7585:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":716,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:3"},"returnParameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":746,"src":"7633:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":719,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:3"},"scope":1211,"src":"7540:261:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":760,"nodeType":"Block","src":"8196:43:3","statements":[{"expression":{"arguments":[{"id":755,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"8216:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":756,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":751,"src":"8220:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":754,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[761,790],"referencedDeclaration":790,"src":"8206:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8206:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":759,"nodeType":"ExpressionStatement","src":"8206:26:3"}]},"documentation":{"id":747,"nodeType":"StructuredDocumentation","src":"7807:319:3","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":761,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:3","nodeType":"FunctionDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"mutability":"mutable","name":"to","nameLocation":"8158:2:3","nodeType":"VariableDeclaration","scope":761,"src":"8150:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":751,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:3","nodeType":"VariableDeclaration","scope":761,"src":"8162:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":750,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:3"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[],"src":"8196:0:3"},"scope":1211,"src":"8131:108:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":789,"nodeType":"Block","src":"8574:195:3","statements":[{"expression":{"arguments":[{"id":772,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"8590:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":773,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"8594:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":771,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"8584:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8584:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":775,"nodeType":"ExpressionStatement","src":"8584:18:3"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":779,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":778,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:3","typeDescriptions":{}}},"id":781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8656:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":782,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"8668:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":783,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"8672:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":784,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":768,"src":"8681:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":777,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"8633:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8633:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":776,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8612:150:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":788,"nodeType":"ExpressionStatement","src":"8612:150:3"}]},"documentation":{"id":762,"nodeType":"StructuredDocumentation","src":"8245:210:3","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":790,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:3","nodeType":"FunctionDefinition","parameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":764,"mutability":"mutable","name":"to","nameLocation":"8496:2:3","nodeType":"VariableDeclaration","scope":790,"src":"8488:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:3","nodeType":"VariableDeclaration","scope":790,"src":"8508:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"data","nameLocation":"8546:4:3","nodeType":"VariableDeclaration","scope":790,"src":"8533:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":767,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:3"},"returnParameters":{"id":770,"nodeType":"ParameterList","parameters":[],"src":"8574:0:3"},"scope":1211,"src":"8460:309:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":866,"nodeType":"Block","src":"9152:859:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":799,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"9170:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:3","typeDescriptions":{}}},"id":803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9176:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":798,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9162:61:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":807,"nodeType":"ExpressionStatement","src":"9162:61:3"},{"expression":{"arguments":[{"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:3","subExpression":{"arguments":[{"id":810,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"9250:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":809,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"9242:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9242:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":808,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9233:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":815,"nodeType":"ExpressionStatement","src":"9233:58:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:3","typeDescriptions":{}}},"id":820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9323:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":821,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"9335:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":822,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"9339:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":816,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"9302:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9302:48:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":825,"nodeType":"ExpressionStatement","src":"9302:48:3"},{"expression":{"arguments":[{"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:3","subExpression":{"arguments":[{"id":828,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"9454:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":827,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"9446:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9446:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":826,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9437:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":833,"nodeType":"ExpressionStatement","src":"9437:58:3"},{"id":840,"nodeType":"UncheckedBlock","src":"9506:360:3","statements":[{"expression":{"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":834,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"9837:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":836,"indexExpression":{"id":835,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"9847:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":839,"nodeType":"ExpressionStatement","src":"9837:18:3"}]},{"expression":{"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":841,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"9876:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":843,"indexExpression":{"id":842,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"9884:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":844,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"9895:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":846,"nodeType":"ExpressionStatement","src":"9876:21:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":849,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":848,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:3","typeDescriptions":{}}},"id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9922:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":852,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"9934:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":853,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"9938:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":847,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"9913:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9913:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":855,"nodeType":"EmitStatement","src":"9908:38:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":857,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:3","typeDescriptions":{}}},"id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9977:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":861,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"9989:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":862,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"9993:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":856,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"9957:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9957:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":865,"nodeType":"ExpressionStatement","src":"9957:47:3"}]},"documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"8775:311:3","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":867,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:3","nodeType":"FunctionDefinition","parameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":793,"mutability":"mutable","name":"to","nameLocation":"9114:2:3","nodeType":"VariableDeclaration","scope":867,"src":"9106:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":792,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":795,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:3","nodeType":"VariableDeclaration","scope":867,"src":"9118:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":794,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:3"},"returnParameters":{"id":797,"nodeType":"ParameterList","parameters":[],"src":"9152:0:3"},"scope":1211,"src":"9091:920:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":933,"nodeType":"Block","src":"10386:713:3","statements":[{"assignments":[874],"declarations":[{"constant":false,"id":874,"mutability":"mutable","name":"owner","nameLocation":"10404:5:3","nodeType":"VariableDeclaration","scope":933,"src":"10396:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":873,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":879,"initialValue":{"arguments":[{"id":877,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"10427:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":875,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"10412:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1211_$","typeString":"type(contract ERC721)"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":412,"src":"10412:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10412:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:3"},{"expression":{"arguments":[{"id":881,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"10467:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:3","typeDescriptions":{}}},"id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10474:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":886,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"10486:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":880,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"10446:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10446:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":889,"nodeType":"ExpressionStatement","src":"10446:51:3"},{"expression":{"id":895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":890,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"10599:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":893,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"10622:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":891,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"10607:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1211_$","typeString":"type(contract ERC721)"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":412,"src":"10607:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10607:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":896,"nodeType":"ExpressionStatement","src":"10599:31:3"},{"expression":{"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:3","subExpression":{"baseExpression":{"id":897,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"10675:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":899,"indexExpression":{"id":898,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"10691:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":901,"nodeType":"ExpressionStatement","src":"10668:31:3"},{"id":908,"nodeType":"UncheckedBlock","src":"10710:237:3","statements":[{"expression":{"id":906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":902,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"10915:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":904,"indexExpression":{"id":903,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"10925:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":907,"nodeType":"ExpressionStatement","src":"10915:21:3"}]},{"expression":{"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:3","subExpression":{"baseExpression":{"id":909,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"10963:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":911,"indexExpression":{"id":910,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"10971:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":913,"nodeType":"ExpressionStatement","src":"10956:23:3"},{"eventCall":{"arguments":[{"id":915,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"11004:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":916,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:3","typeDescriptions":{}}},"id":919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11011:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":920,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"11023:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":914,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"10995:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10995:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":922,"nodeType":"EmitStatement","src":"10990:41:3"},{"expression":{"arguments":[{"id":924,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"11062:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":925,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:3","typeDescriptions":{}}},"id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11069:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":929,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"11081:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":923,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"11042:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11042:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":932,"nodeType":"ExpressionStatement","src":"11042:50:3"}]},"documentation":{"id":868,"nodeType":"StructuredDocumentation","src":"10017:315:3","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":934,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:3","nodeType":"FunctionDefinition","parameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:3","nodeType":"VariableDeclaration","scope":934,"src":"10352:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:3"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"10386:0:3"},"scope":1211,"src":"10337:762:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1018,"nodeType":"Block","src":"11532:1124:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":947,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"11565:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":945,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"11550:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1211_$","typeString":"type(contract ERC721)"}},"id":946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":412,"src":"11550:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11550:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":949,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"11577:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":944,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11542:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":953,"nodeType":"ExpressionStatement","src":"11542:81:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":955,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"11641:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":956,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:3","typeDescriptions":{}}},"id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11647:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":954,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11633:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":963,"nodeType":"ExpressionStatement","src":"11633:65:3"},{"expression":{"arguments":[{"id":965,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"11730:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":966,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"11736:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":967,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"11740:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":964,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"11709:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11709:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":970,"nodeType":"ExpressionStatement","src":"11709:42:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":974,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"11866:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":972,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"11851:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1211_$","typeString":"type(contract ERC721)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":412,"src":"11851:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11851:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":976,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"11878:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":971,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11843:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":980,"nodeType":"ExpressionStatement","src":"11843:81:3"},{"expression":{"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:3","subExpression":{"baseExpression":{"id":981,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"11993:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":983,"indexExpression":{"id":982,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"12009:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":985,"nodeType":"ExpressionStatement","src":"11986:31:3"},{"id":998,"nodeType":"UncheckedBlock","src":"12028:496:3","statements":[{"expression":{"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":986,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"12461:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":988,"indexExpression":{"id":987,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"12471:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":991,"nodeType":"ExpressionStatement","src":"12461:20:3"},{"expression":{"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":992,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"12495:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":994,"indexExpression":{"id":993,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"12505:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":997,"nodeType":"ExpressionStatement","src":"12495:18:3"}]},{"expression":{"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":999,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":298,"src":"12533:7:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1001,"indexExpression":{"id":1000,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"12541:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1002,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"12552:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1004,"nodeType":"ExpressionStatement","src":"12533:21:3"},{"eventCall":{"arguments":[{"id":1006,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"12579:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1007,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"12585:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1008,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"12589:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1005,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"12570:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12570:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1010,"nodeType":"EmitStatement","src":"12565:32:3"},{"expression":{"arguments":[{"id":1012,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"12628:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1013,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"12634:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1014,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"12638:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1011,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"12608:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12608:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1017,"nodeType":"ExpressionStatement","src":"12608:41:3"}]},"documentation":{"id":935,"nodeType":"StructuredDocumentation","src":"11105:313:3","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1019,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:3","nodeType":"FunctionDefinition","parameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":937,"mutability":"mutable","name":"from","nameLocation":"11459:4:3","nodeType":"VariableDeclaration","scope":1019,"src":"11451:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":936,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":939,"mutability":"mutable","name":"to","nameLocation":"11481:2:3","nodeType":"VariableDeclaration","scope":1019,"src":"11473:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":938,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":941,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:3","nodeType":"VariableDeclaration","scope":1019,"src":"11493:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":940,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:3"},"returnParameters":{"id":943,"nodeType":"ParameterList","parameters":[],"src":"11532:0:3"},"scope":1211,"src":"11423:1233:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1042,"nodeType":"Block","src":"12832:107:3","statements":[{"expression":{"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1027,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"12842:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1029,"indexExpression":{"id":1028,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"12858:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1030,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"12869:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1032,"nodeType":"ExpressionStatement","src":"12842:29:3"},{"eventCall":{"arguments":[{"arguments":[{"id":1036,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"12910:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1034,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"12895:6:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1211_$","typeString":"type(contract ERC721)"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":412,"src":"12895:14:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12895:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1038,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"12920:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1039,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"12924:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1033,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"12886:8:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12886:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1041,"nodeType":"EmitStatement","src":"12881:51:3"}]},"documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"12662:101:3","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":1043,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:3","nodeType":"FunctionDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"mutability":"mutable","name":"to","nameLocation":"12794:2:3","nodeType":"VariableDeclaration","scope":1043,"src":"12786:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1021,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1024,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:3","nodeType":"VariableDeclaration","scope":1043,"src":"12798:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1023,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:3"},"returnParameters":{"id":1026,"nodeType":"ParameterList","parameters":[],"src":"12832:0:3"},"scope":1211,"src":"12768:171:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1074,"nodeType":"Block","src":"13198:184:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1054,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"13216:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1055,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"13225:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":1053,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13208:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1059,"nodeType":"ExpressionStatement","src":"13208:55:3"},{"expression":{"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1060,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"13273:18:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1063,"indexExpression":{"id":1061,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"13292:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1064,"indexExpression":{"id":1062,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"13299:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1065,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"13311:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1067,"nodeType":"ExpressionStatement","src":"13273:46:3"},{"eventCall":{"arguments":[{"id":1069,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"13349:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1070,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"13356:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1071,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"13366:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1068,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"13334:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13334:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1073,"nodeType":"EmitStatement","src":"13329:46:3"}]},"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"12945:125:3","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1075,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:3","nodeType":"FunctionDefinition","parameters":{"id":1051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"owner","nameLocation":"13120:5:3","nodeType":"VariableDeclaration","scope":1075,"src":"13112:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1045,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"operator","nameLocation":"13143:8:3","nodeType":"VariableDeclaration","scope":1075,"src":"13135:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"approved","nameLocation":"13166:8:3","nodeType":"VariableDeclaration","scope":1075,"src":"13161:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1049,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:3"},"returnParameters":{"id":1052,"nodeType":"ParameterList","parameters":[],"src":"13198:0:3"},"scope":1211,"src":"13075:307:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1088,"nodeType":"Block","src":"13529:70:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":1083,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"13555:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1082,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"13547:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13547:16:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1081,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13539:53:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1087,"nodeType":"ExpressionStatement","src":"13539:53:3"}]},"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"13388:73:3","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":1089,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:3","nodeType":"FunctionDefinition","parameters":{"id":1079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:3","nodeType":"VariableDeclaration","scope":1089,"src":"13490:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1077,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:3"},"returnParameters":{"id":1080,"nodeType":"ParameterList","parameters":[],"src":"13529:0:3"},"scope":1211,"src":"13466:133:3","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1150,"nodeType":"Block","src":"14306:676:3","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1103,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"14320:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1515,"src":"14320:13:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14320:15:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1148,"nodeType":"Block","src":"14940:36:3","statements":[{"expression":{"hexValue":"74727565","id":1146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1102,"id":1147,"nodeType":"Return","src":"14954:11:3"}]},"id":1149,"nodeType":"IfStatement","src":"14316:660:3","trueBody":{"id":1145,"nodeType":"Block","src":"14337:597:3","statements":[{"clauses":[{"block":{"id":1125,"nodeType":"Block","src":"14451:91:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1119,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"14476:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1120,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"14486:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1345_$","typeString":"type(contract IERC721Receiver)"}},"id":1121,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1344,"src":"14486:32:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"14486:41:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1102,"id":1124,"nodeType":"Return","src":"14469:58:3"}]},"errorName":"","id":1126,"nodeType":"TryCatchClause","parameters":{"id":1118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1117,"mutability":"mutable","name":"retval","nameLocation":"14443:6:3","nodeType":"VariableDeclaration","scope":1126,"src":"14436:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1116,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:3"},"src":"14427:115:3"},{"block":{"id":1142,"nodeType":"Block","src":"14571:353:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1130,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"14593:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14593:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1140,"nodeType":"Block","src":"14720:190:3","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:3","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:3","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:3"},"nodeType":"YulFunctionCall","src":"14839:15:3"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:3"},"nodeType":"YulFunctionCall","src":"14856:13:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:3"},"nodeType":"YulFunctionCall","src":"14832:38:3"},"nodeType":"YulExpressionStatement","src":"14832:38:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1128,"isOffset":false,"isSlot":false,"src":"14847:6:3","valueSize":1},{"declaration":1128,"isOffset":false,"isSlot":false,"src":"14862:6:3","valueSize":1}],"id":1139,"nodeType":"InlineAssembly","src":"14797:95:3"}]},"id":1141,"nodeType":"IfStatement","src":"14589:321:3","trueBody":{"id":1138,"nodeType":"Block","src":"14613:101:3","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1134,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14635:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1137,"nodeType":"ExpressionStatement","src":"14635:60:3"}]}}]},"errorName":"","id":1143,"nodeType":"TryCatchClause","parameters":{"id":1129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"reason","nameLocation":"14563:6:3","nodeType":"VariableDeclaration","scope":1143,"src":"14550:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1127,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:3"},"src":"14543:381:3"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1110,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"14392:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14392:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1112,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"14406:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1113,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"14412:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1114,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"14421:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1107,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"14371:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1106,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"14355:15:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1345_$","typeString":"type(contract IERC721Receiver)"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1345","typeString":"contract IERC721Receiver"}},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1344,"src":"14355:36:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:71:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1144,"nodeType":"TryStatement","src":"14351:573:3"}]}}]},"documentation":{"id":1090,"nodeType":"StructuredDocumentation","src":"13605:541:3","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":1151,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:3","nodeType":"FunctionDefinition","parameters":{"id":1099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1092,"mutability":"mutable","name":"from","nameLocation":"14200:4:3","nodeType":"VariableDeclaration","scope":1151,"src":"14192:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1091,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"to","nameLocation":"14222:2:3","nodeType":"VariableDeclaration","scope":1151,"src":"14214:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1093,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1096,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:3","nodeType":"VariableDeclaration","scope":1151,"src":"14234:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1098,"mutability":"mutable","name":"data","nameLocation":"14272:4:3","nodeType":"VariableDeclaration","scope":1151,"src":"14259:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1097,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:3"},"returnParameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1151,"src":"14300:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1100,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:3"},"scope":1211,"src":"14151:831:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1196,"nodeType":"Block","src":"15856:238:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1163,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"15870:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1195,"nodeType":"IfStatement","src":"15866:222:3","trueBody":{"id":1194,"nodeType":"Block","src":"15885:203:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1166,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"15903:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:3","typeDescriptions":{}}},"id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15911:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1179,"nodeType":"IfStatement","src":"15899:85:3","trueBody":{"id":1178,"nodeType":"Block","src":"15923:61:3","statements":[{"expression":{"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1172,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"15941:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1174,"indexExpression":{"id":1173,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"15951:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1175,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"15960:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1177,"nodeType":"ExpressionStatement","src":"15941:28:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1180,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"16001:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:3","typeDescriptions":{}}},"id":1184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16007:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1193,"nodeType":"IfStatement","src":"15997:81:3","trueBody":{"id":1192,"nodeType":"Block","src":"16019:59:3","statements":[{"expression":{"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1186,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":302,"src":"16037:9:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1188,"indexExpression":{"id":1187,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"16047:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1189,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"16054:9:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1191,"nodeType":"ExpressionStatement","src":"16037:26:3"}]}}]}}]},"documentation":{"id":1152,"nodeType":"StructuredDocumentation","src":"14988:705:3","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1197,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:3","nodeType":"FunctionDefinition","parameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"from","nameLocation":"15745:4:3","nodeType":"VariableDeclaration","scope":1197,"src":"15737:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1153,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1156,"mutability":"mutable","name":"to","nameLocation":"15767:2:3","nodeType":"VariableDeclaration","scope":1197,"src":"15759:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1197,"src":"15779:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1157,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1160,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:3","nodeType":"VariableDeclaration","scope":1197,"src":"15815:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1159,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:3"},"returnParameters":{"id":1162,"nodeType":"ParameterList","parameters":[],"src":"15856:0:3"},"scope":1211,"src":"15698:396:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1209,"nodeType":"Block","src":"16951:2:3","statements":[]},"documentation":{"id":1198,"nodeType":"StructuredDocumentation","src":"16100:695:3","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1210,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:3","nodeType":"FunctionDefinition","parameters":{"id":1207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1200,"mutability":"mutable","name":"from","nameLocation":"16846:4:3","nodeType":"VariableDeclaration","scope":1210,"src":"16838:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1199,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"to","nameLocation":"16868:2:3","nodeType":"VariableDeclaration","scope":1210,"src":"16860:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1201,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1204,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:3","nodeType":"VariableDeclaration","scope":1210,"src":"16880:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1203,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1206,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:3","nodeType":"VariableDeclaration","scope":1210,"src":"16910:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1205,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:3"},"returnParameters":{"id":1208,"nodeType":"ParameterList","parameters":[],"src":"16951:0:3"},"scope":1211,"src":"16800:153:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1212,"src":"628:16327:3","usedErrors":[]}],"src":"107:16849:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[2060],"IERC721":[1327]},"id":1328,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1213,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:4"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1214,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1328,"sourceUnit":2061,"src":"133:47:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1216,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":2060,"src":"271:7:4"},"id":1217,"nodeType":"InheritanceSpecifier","src":"271:7:4"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1215,"nodeType":"StructuredDocumentation","src":"182:67:4","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1327,"linearizedBaseContracts":[1327,2060],"name":"IERC721","nameLocation":"260:7:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1218,"nodeType":"StructuredDocumentation","src":"285:88:4","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"id":1226,"name":"Transfer","nameLocation":"384:8:4","nodeType":"EventDefinition","parameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1220,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:4","nodeType":"VariableDeclaration","scope":1226,"src":"393:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1219,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1222,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:4","nodeType":"VariableDeclaration","scope":1226,"src":"415:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1221,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1224,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:4","nodeType":"VariableDeclaration","scope":1226,"src":"435:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:4"},"src":"378:82:4"},{"anonymous":false,"documentation":{"id":1227,"nodeType":"StructuredDocumentation","src":"466:94:4","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"id":1235,"name":"Approval","nameLocation":"571:8:4","nodeType":"EventDefinition","parameters":{"id":1234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:4","nodeType":"VariableDeclaration","scope":1235,"src":"580:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1228,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1231,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:4","nodeType":"VariableDeclaration","scope":1235,"src":"603:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1233,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:4","nodeType":"VariableDeclaration","scope":1235,"src":"629:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1232,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:4"},"src":"565:89:4"},{"anonymous":false,"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"660:117:4","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"id":1244,"name":"ApprovalForAll","nameLocation":"788:14:4","nodeType":"EventDefinition","parameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:4","nodeType":"VariableDeclaration","scope":1244,"src":"803:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1240,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:4","nodeType":"VariableDeclaration","scope":1244,"src":"826:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1239,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1242,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:4","nodeType":"VariableDeclaration","scope":1244,"src":"852:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1241,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:4"},"src":"782:85:4"},{"documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"873:76:4","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1252,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:4","nodeType":"FunctionDefinition","parameters":{"id":1248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1247,"mutability":"mutable","name":"owner","nameLocation":"981:5:4","nodeType":"VariableDeclaration","scope":1252,"src":"973:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1246,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:4"},"returnParameters":{"id":1251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"mutability":"mutable","name":"balance","nameLocation":"1019:7:4","nodeType":"VariableDeclaration","scope":1252,"src":"1011:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1249,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:4"},"scope":1327,"src":"954:74:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1253,"nodeType":"StructuredDocumentation","src":"1034:131:4","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1260,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:4","nodeType":"FunctionDefinition","parameters":{"id":1256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:4","nodeType":"VariableDeclaration","scope":1260,"src":"1187:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1254,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:4"},"returnParameters":{"id":1259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1258,"mutability":"mutable","name":"owner","nameLocation":"1235:5:4","nodeType":"VariableDeclaration","scope":1260,"src":"1227:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1257,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:4"},"scope":1327,"src":"1170:72:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1261,"nodeType":"StructuredDocumentation","src":"1248:556:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1272,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:4","nodeType":"FunctionDefinition","parameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"from","nameLocation":"1852:4:4","nodeType":"VariableDeclaration","scope":1272,"src":"1844:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1265,"mutability":"mutable","name":"to","nameLocation":"1874:2:4","nodeType":"VariableDeclaration","scope":1272,"src":"1866:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1264,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:4","nodeType":"VariableDeclaration","scope":1272,"src":"1886:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1266,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"data","nameLocation":"1926:4:4","nodeType":"VariableDeclaration","scope":1272,"src":"1911:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1268,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:4"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[],"src":"1945:0:4"},"scope":1327,"src":"1809:137:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1273,"nodeType":"StructuredDocumentation","src":"1952:687:4","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1282,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:4","nodeType":"FunctionDefinition","parameters":{"id":1280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1275,"mutability":"mutable","name":"from","nameLocation":"2687:4:4","nodeType":"VariableDeclaration","scope":1282,"src":"2679:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1274,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1277,"mutability":"mutable","name":"to","nameLocation":"2709:2:4","nodeType":"VariableDeclaration","scope":1282,"src":"2701:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1276,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1279,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:4","nodeType":"VariableDeclaration","scope":1282,"src":"2721:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1278,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:4"},"returnParameters":{"id":1281,"nodeType":"ParameterList","parameters":[],"src":"2751:0:4"},"scope":1327,"src":"2644:108:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1283,"nodeType":"StructuredDocumentation","src":"2758:732:4","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1292,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:4","nodeType":"FunctionDefinition","parameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"from","nameLocation":"3534:4:4","nodeType":"VariableDeclaration","scope":1292,"src":"3526:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1284,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"to","nameLocation":"3556:2:4","nodeType":"VariableDeclaration","scope":1292,"src":"3548:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1286,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:4","nodeType":"VariableDeclaration","scope":1292,"src":"3568:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1288,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:4"},"returnParameters":{"id":1291,"nodeType":"ParameterList","parameters":[],"src":"3598:0:4"},"scope":1327,"src":"3495:104:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1293,"nodeType":"StructuredDocumentation","src":"3605:452:4","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1300,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:4","nodeType":"FunctionDefinition","parameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1295,"mutability":"mutable","name":"to","nameLocation":"4087:2:4","nodeType":"VariableDeclaration","scope":1300,"src":"4079:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1294,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:4","nodeType":"VariableDeclaration","scope":1300,"src":"4091:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1296,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:4"},"returnParameters":{"id":1299,"nodeType":"ParameterList","parameters":[],"src":"4116:0:4"},"scope":1327,"src":"4062:55:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1301,"nodeType":"StructuredDocumentation","src":"4123:309:4","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1308,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:4","nodeType":"FunctionDefinition","parameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"operator","nameLocation":"4472:8:4","nodeType":"VariableDeclaration","scope":1308,"src":"4464:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1302,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1305,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:4","nodeType":"VariableDeclaration","scope":1308,"src":"4482:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1304,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:4"},"returnParameters":{"id":1307,"nodeType":"ParameterList","parameters":[],"src":"4506:0:4"},"scope":1327,"src":"4437:70:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1309,"nodeType":"StructuredDocumentation","src":"4513:139:4","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1316,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:4","nodeType":"FunctionDefinition","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:4","nodeType":"VariableDeclaration","scope":1316,"src":"4678:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1310,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:4"},"returnParameters":{"id":1315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"operator","nameLocation":"4726:8:4","nodeType":"VariableDeclaration","scope":1316,"src":"4718:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:4"},"scope":1327,"src":"4657:79:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1317,"nodeType":"StructuredDocumentation","src":"4742:138:4","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1326,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:4","nodeType":"FunctionDefinition","parameters":{"id":1322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1319,"mutability":"mutable","name":"owner","nameLocation":"4919:5:4","nodeType":"VariableDeclaration","scope":1326,"src":"4911:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1318,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1321,"mutability":"mutable","name":"operator","nameLocation":"4934:8:4","nodeType":"VariableDeclaration","scope":1326,"src":"4926:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1320,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:4"},"returnParameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1326,"src":"4967:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1323,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:4"},"scope":1327,"src":"4885:88:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1328,"src":"250:4725:4","usedErrors":[]}],"src":"108:4868:4"},"id":4},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1345]},"id":1346,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1329,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1330,"nodeType":"StructuredDocumentation","src":"141:152:5","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1345,"linearizedBaseContracts":[1345],"name":"IERC721Receiver","nameLocation":"304:15:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1331,"nodeType":"StructuredDocumentation","src":"326:493:5","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1344,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:5","nodeType":"FunctionDefinition","parameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1333,"mutability":"mutable","name":"operator","nameLocation":"867:8:5","nodeType":"VariableDeclaration","scope":1344,"src":"859:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1332,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1335,"mutability":"mutable","name":"from","nameLocation":"893:4:5","nodeType":"VariableDeclaration","scope":1344,"src":"885:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1334,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1337,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:5","nodeType":"VariableDeclaration","scope":1344,"src":"907:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1336,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1339,"mutability":"mutable","name":"data","nameLocation":"947:4:5","nodeType":"VariableDeclaration","scope":1344,"src":"932:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1338,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:5"},"returnParameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1344,"src":"976:6:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1341,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:5"},"scope":1345,"src":"824:160:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1346,"src":"294:692:5","usedErrors":[]}],"src":"116:871:5"},"id":5},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"Address":[1827],"Context":[1849],"ERC165":[2048],"ERC721":[1211],"ERC721URIStorage":[1470],"IERC165":[2060],"IERC721":[1327],"IERC721Metadata":[1497],"IERC721Receiver":[1345],"Math":[2925],"Strings":[2024]},"id":1471,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1347,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1348,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1471,"sourceUnit":1212,"src":"153:23:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1350,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1211,"src":"286:6:6"},"id":1351,"nodeType":"InheritanceSpecifier","src":"286:6:6"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"178:69:6","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":false,"id":1470,"linearizedBaseContracts":[1470,1211,1497,1327,2048,2060,1849],"name":"ERC721URIStorage","nameLocation":"266:16:6","nodeType":"ContractDefinition","nodes":[{"id":1354,"libraryName":{"id":1352,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":2024,"src":"305:7:6"},"nodeType":"UsingForDirective","src":"299:26:6","typeName":{"id":1353,"name":"uint256","nodeType":"ElementaryTypeName","src":"317:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1358,"mutability":"mutable","name":"_tokenURIs","nameLocation":"405:10:6","nodeType":"VariableDeclaration","scope":1470,"src":"370:45:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":1357,"keyType":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"378:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"370:26:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueType":{"id":1356,"name":"string","nodeType":"ElementaryTypeName","src":"389:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[471],"body":{"id":1416,"nodeType":"Block","src":"570:520:6","statements":[{"expression":{"arguments":[{"id":1368,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"595:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1367,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"580:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"580:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1370,"nodeType":"ExpressionStatement","src":"580:23:6"},{"assignments":[1372],"declarations":[{"constant":false,"id":1372,"mutability":"mutable","name":"_tokenURI","nameLocation":"628:9:6","nodeType":"VariableDeclaration","scope":1416,"src":"614:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1371,"name":"string","nodeType":"ElementaryTypeName","src":"614:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1376,"initialValue":{"baseExpression":{"id":1373,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"640:10:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1375,"indexExpression":{"id":1374,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"651:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"640:19:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"614:45:6"},{"assignments":[1378],"declarations":[{"constant":false,"id":1378,"mutability":"mutable","name":"base","nameLocation":"683:4:6","nodeType":"VariableDeclaration","scope":1416,"src":"669:18:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1377,"name":"string","nodeType":"ElementaryTypeName","src":"669:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1381,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1379,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"690:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"690:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"669:31:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1384,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"779:4:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"773:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1382,"name":"bytes","nodeType":"ElementaryTypeName","src":"773:5:6","typeDescriptions":{}}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"773:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"773:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"795:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"773:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1392,"nodeType":"IfStatement","src":"769:70:6","trueBody":{"id":1391,"nodeType":"Block","src":"798:41:6","statements":[{"expression":{"id":1389,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"819:9:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1366,"id":1390,"nodeType":"Return","src":"812:16:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1395,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"947:9:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1394,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"941:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1393,"name":"bytes","nodeType":"ElementaryTypeName","src":"941:5:6","typeDescriptions":{}}},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"941:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"941:23:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"967:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"941:27:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1410,"nodeType":"IfStatement","src":"937:106:6","trueBody":{"id":1409,"nodeType":"Block","src":"970:73:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1404,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"1015:4:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1405,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"1021:9:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1402,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"998:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"998:16:6","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"998:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"991:6:6","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1400,"name":"string","nodeType":"ElementaryTypeName","src":"991:6:6","typeDescriptions":{}}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"991:41:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1366,"id":1408,"nodeType":"Return","src":"984:48:6"}]}},{"expression":{"arguments":[{"id":1413,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1361,"src":"1075:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1411,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1060:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1470_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":471,"src":"1060:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1060:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1366,"id":1415,"nodeType":"Return","src":"1053:30:6"}]},"documentation":{"id":1359,"nodeType":"StructuredDocumentation","src":"422:55:6","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1417,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"491:8:6","nodeType":"FunctionDefinition","overrides":{"id":1363,"nodeType":"OverrideSpecifier","overrides":[],"src":"537:8:6"},"parameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"tokenId","nameLocation":"508:7:6","nodeType":"VariableDeclaration","scope":1417,"src":"500:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1360,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"499:17:6"},"returnParameters":{"id":1366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1417,"src":"555:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1364,"name":"string","nodeType":"ElementaryTypeName","src":"555:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"554:15:6"},"scope":1470,"src":"482:608:6","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1438,"nodeType":"Block","src":"1318:133:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1427,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"1344:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1426,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"1336:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1336:16:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1354:48:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""},"value":"ERC721URIStorage: URI set of nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""}],"id":1425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1328:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1328:75:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1431,"nodeType":"ExpressionStatement","src":"1328:75:6"},{"expression":{"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1432,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"1413:10:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1434,"indexExpression":{"id":1433,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"1424:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1413:19:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1435,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"1435:9:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1413:31:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1437,"nodeType":"ExpressionStatement","src":"1413:31:6"}]},"documentation":{"id":1418,"nodeType":"StructuredDocumentation","src":"1096:136:6","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":1439,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1246:12:6","nodeType":"FunctionDefinition","parameters":{"id":1423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1420,"mutability":"mutable","name":"tokenId","nameLocation":"1267:7:6","nodeType":"VariableDeclaration","scope":1439,"src":"1259:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1419,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"_tokenURI","nameLocation":"1290:9:6","nodeType":"VariableDeclaration","scope":1439,"src":"1276:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1421,"name":"string","nodeType":"ElementaryTypeName","src":"1276:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1258:42:6"},"returnParameters":{"id":1424,"nodeType":"ParameterList","parameters":[],"src":"1318:0:6"},"scope":1470,"src":"1237:214:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[934],"body":{"id":1468,"nodeType":"Block","src":"1727:142:6","statements":[{"expression":{"arguments":[{"id":1449,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"1749:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1446,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1737:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1470_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":934,"src":"1737:11:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1737:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1451,"nodeType":"ExpressionStatement","src":"1737:20:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"baseExpression":{"id":1454,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"1778:10:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1456,"indexExpression":{"id":1455,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"1789:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1778:19:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":1453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1772:5:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1452,"name":"bytes","nodeType":"ElementaryTypeName","src":"1772:5:6","typeDescriptions":{}}},"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1772:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1772:33:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1809:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1772:38:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1467,"nodeType":"IfStatement","src":"1768:95:6","trueBody":{"id":1466,"nodeType":"Block","src":"1812:51:6","statements":[{"expression":{"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1826:26:6","subExpression":{"baseExpression":{"id":1461,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"1833:10:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1463,"indexExpression":{"id":1462,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"1844:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1833:19:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1465,"nodeType":"ExpressionStatement","src":"1826:26:6"}]}}]},"documentation":{"id":1440,"nodeType":"StructuredDocumentation","src":"1457:207:6","text":" @dev See {ERC721-_burn}. This override additionally checks to see if a\n token-specific URI was set for the token, and if so, it deletes the token URI from\n the storage mapping."},"id":1469,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"1678:5:6","nodeType":"FunctionDefinition","overrides":{"id":1444,"nodeType":"OverrideSpecifier","overrides":[],"src":"1718:8:6"},"parameters":{"id":1443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1442,"mutability":"mutable","name":"tokenId","nameLocation":"1692:7:6","nodeType":"VariableDeclaration","scope":1469,"src":"1684:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1441,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:17:6"},"returnParameters":{"id":1445,"nodeType":"ParameterList","parameters":[],"src":"1727:0:6"},"scope":1470,"src":"1669:200:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1471,"src":"248:1623:6","usedErrors":[]}],"src":"128:1744:6"},"id":6},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[2060],"IERC721":[1327],"IERC721Metadata":[1497]},"id":1498,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1472,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1473,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1498,"sourceUnit":1328,"src":"137:24:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1475,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1327,"src":"326:7:7"},"id":1476,"nodeType":"InheritanceSpecifier","src":"326:7:7"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"163:133:7","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1497,"linearizedBaseContracts":[1497,1327,2060],"name":"IERC721Metadata","nameLocation":"307:15:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1477,"nodeType":"StructuredDocumentation","src":"340:58:7","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1482,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:7","nodeType":"FunctionDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[],"src":"416:2:7"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1482,"src":"442:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1479,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:7"},"scope":1497,"src":"403:54:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1483,"nodeType":"StructuredDocumentation","src":"463:60:7","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1488,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:7","nodeType":"FunctionDefinition","parameters":{"id":1484,"nodeType":"ParameterList","parameters":[],"src":"543:2:7"},"returnParameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1488,"src":"569:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1485,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:7"},"scope":1497,"src":"528:56:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1489,"nodeType":"StructuredDocumentation","src":"590:90:7","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1496,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:7","nodeType":"FunctionDefinition","parameters":{"id":1492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1491,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:7","nodeType":"VariableDeclaration","scope":1496,"src":"703:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1490,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:7"},"returnParameters":{"id":1495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1496,"src":"743:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1493,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:7"},"scope":1497,"src":"685:73:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1498,"src":"297:463:7","usedErrors":[]}],"src":"112:649:7"},"id":7},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1827]},"id":1828,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1499,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:8"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1500,"nodeType":"StructuredDocumentation","src":"126:67:8","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1827,"linearizedBaseContracts":[1827],"name":"Address","nameLocation":"202:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1514,"nodeType":"Block","src":"1241:254:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1508,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"1465:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1465:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1465:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1507,"id":1513,"nodeType":"Return","src":"1458:30:8"}]},"documentation":{"id":1501,"nodeType":"StructuredDocumentation","src":"216:954:8","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1515,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:8","nodeType":"FunctionDefinition","parameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1503,"mutability":"mutable","name":"account","nameLocation":"1203:7:8","nodeType":"VariableDeclaration","scope":1515,"src":"1195:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1502,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:8"},"returnParameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1515,"src":"1235:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1505,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:8"},"scope":1827,"src":"1175:320:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1548,"nodeType":"Block","src":"2483:241:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1526,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1827","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1827","typeString":"library Address"}],"id":1525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1524,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:8","typeDescriptions":{}}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2501:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1529,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1520,"src":"2526:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1523,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2493:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1533,"nodeType":"ExpressionStatement","src":"2493:73:8"},{"assignments":[1535,null],"declarations":[{"constant":false,"id":1535,"mutability":"mutable","name":"success","nameLocation":"2583:7:8","nodeType":"VariableDeclaration","scope":1548,"src":"2578:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1534,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1542,"initialValue":{"arguments":[{"hexValue":"","id":1540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1536,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2596:9:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2596:14:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1538,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1520,"src":"2618:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2596:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:8"},{"expression":{"arguments":[{"id":1544,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"2647:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1543,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2639:78:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1547,"nodeType":"ExpressionStatement","src":"2639:78:8"}]},"documentation":{"id":1516,"nodeType":"StructuredDocumentation","src":"1501:906:8","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1549,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:8","nodeType":"FunctionDefinition","parameters":{"id":1521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1518,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:8","nodeType":"VariableDeclaration","scope":1549,"src":"2431:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1517,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1520,"mutability":"mutable","name":"amount","nameLocation":"2466:6:8","nodeType":"VariableDeclaration","scope":1549,"src":"2458:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1519,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:8"},"returnParameters":{"id":1522,"nodeType":"ParameterList","parameters":[],"src":"2483:0:8"},"scope":1827,"src":"2412:312:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1566,"nodeType":"Block","src":"3555:96:8","statements":[{"expression":{"arguments":[{"id":1560,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"3594:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1561,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"3602:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1559,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1607,1651],"referencedDeclaration":1651,"src":"3572:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:72:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1558,"id":1565,"nodeType":"Return","src":"3565:79:8"}]},"documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"2730:731:8","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1567,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:8","nodeType":"FunctionDefinition","parameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1552,"mutability":"mutable","name":"target","nameLocation":"3496:6:8","nodeType":"VariableDeclaration","scope":1567,"src":"3488:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1551,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"data","nameLocation":"3517:4:8","nodeType":"VariableDeclaration","scope":1567,"src":"3504:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1553,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:8"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1567,"src":"3541:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1556,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:8"},"scope":1827,"src":"3466:185:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1586,"nodeType":"Block","src":"4020:76:8","statements":[{"expression":{"arguments":[{"id":1580,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"4059:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1581,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"4067:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1583,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1574,"src":"4076:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1579,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1607,1651],"referencedDeclaration":1651,"src":"4037:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4037:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1578,"id":1585,"nodeType":"Return","src":"4030:59:8"}]},"documentation":{"id":1568,"nodeType":"StructuredDocumentation","src":"3657:211:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1587,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:8","nodeType":"FunctionDefinition","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"target","nameLocation":"3912:6:8","nodeType":"VariableDeclaration","scope":1587,"src":"3904:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1569,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1572,"mutability":"mutable","name":"data","nameLocation":"3941:4:8","nodeType":"VariableDeclaration","scope":1587,"src":"3928:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1571,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1574,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:8","nodeType":"VariableDeclaration","scope":1587,"src":"3955:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1573,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:8"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1587,"src":"4006:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1576,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:8"},"scope":1827,"src":"3873:223:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1606,"nodeType":"Block","src":"4601:111:8","statements":[{"expression":{"arguments":[{"id":1600,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"4640:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1601,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"4648:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1594,"src":"4654:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1599,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1607,1651],"referencedDeclaration":1651,"src":"4618:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:87:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1598,"id":1605,"nodeType":"Return","src":"4611:94:8"}]},"documentation":{"id":1588,"nodeType":"StructuredDocumentation","src":"4102:351:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1607,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:8","nodeType":"FunctionDefinition","parameters":{"id":1595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"mutability":"mutable","name":"target","nameLocation":"4506:6:8","nodeType":"VariableDeclaration","scope":1607,"src":"4498:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1589,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1592,"mutability":"mutable","name":"data","nameLocation":"4535:4:8","nodeType":"VariableDeclaration","scope":1607,"src":"4522:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1591,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1594,"mutability":"mutable","name":"value","nameLocation":"4557:5:8","nodeType":"VariableDeclaration","scope":1607,"src":"4549:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1593,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:8"},"returnParameters":{"id":1598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1607,"src":"4587:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1596,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:8"},"scope":1827,"src":"4458:254:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1650,"nodeType":"Block","src":"5139:267:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1624,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1827","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1827","typeString":"library Address"}],"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1622,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:8","typeDescriptions":{}}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5157:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5157:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"5182:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1621,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5149:81:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1631,"nodeType":"ExpressionStatement","src":"5149:81:8"},{"assignments":[1633,1635],"declarations":[{"constant":false,"id":1633,"mutability":"mutable","name":"success","nameLocation":"5246:7:8","nodeType":"VariableDeclaration","scope":1650,"src":"5241:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1632,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1635,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:8","nodeType":"VariableDeclaration","scope":1650,"src":"5255:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1634,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1642,"initialValue":{"arguments":[{"id":1640,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1612,"src":"5308:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1636,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"5282:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5282:11:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1638,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"5301:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:8"},{"expression":{"arguments":[{"id":1644,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"5357:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1645,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"5365:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1646,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"5374:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1647,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"5386:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1643,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"5330:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5330:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1620,"id":1649,"nodeType":"Return","src":"5323:76:8"}]},"documentation":{"id":1608,"nodeType":"StructuredDocumentation","src":"4718:237:8","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1651,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:8","nodeType":"FunctionDefinition","parameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"target","nameLocation":"5008:6:8","nodeType":"VariableDeclaration","scope":1651,"src":"5000:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1609,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1612,"mutability":"mutable","name":"data","nameLocation":"5037:4:8","nodeType":"VariableDeclaration","scope":1651,"src":"5024:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1611,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1614,"mutability":"mutable","name":"value","nameLocation":"5059:5:8","nodeType":"VariableDeclaration","scope":1651,"src":"5051:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1613,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:8","nodeType":"VariableDeclaration","scope":1651,"src":"5074:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1615,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:8"},"returnParameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1651,"src":"5125:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1618,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:8"},"scope":1827,"src":"4960:446:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1667,"nodeType":"Block","src":"5683:97:8","statements":[{"expression":{"arguments":[{"id":1662,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"5719:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1663,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"5727:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1661,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1668,1697],"referencedDeclaration":1697,"src":"5700:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5700:73:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1660,"id":1666,"nodeType":"Return","src":"5693:80:8"}]},"documentation":{"id":1652,"nodeType":"StructuredDocumentation","src":"5412:166:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1668,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:8","nodeType":"FunctionDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"target","nameLocation":"5619:6:8","nodeType":"VariableDeclaration","scope":1668,"src":"5611:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1653,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"data","nameLocation":"5640:4:8","nodeType":"VariableDeclaration","scope":1668,"src":"5627:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1655,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:8"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1668,"src":"5669:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1658,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:8"},"scope":1827,"src":"5583:197:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1696,"nodeType":"Block","src":"6122:168:8","statements":[{"assignments":[1681,1683],"declarations":[{"constant":false,"id":1681,"mutability":"mutable","name":"success","nameLocation":"6138:7:8","nodeType":"VariableDeclaration","scope":1696,"src":"6133:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1680,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1683,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:8","nodeType":"VariableDeclaration","scope":1696,"src":"6147:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1682,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1688,"initialValue":{"arguments":[{"id":1686,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"6192:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1684,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"6174:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:8","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:8"},{"expression":{"arguments":[{"id":1690,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"6241:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1691,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"6249:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1692,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1683,"src":"6258:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1693,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"6270:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1689,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"6214:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6214:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1679,"id":1695,"nodeType":"Return","src":"6207:76:8"}]},"documentation":{"id":1669,"nodeType":"StructuredDocumentation","src":"5786:173:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1697,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:8","nodeType":"FunctionDefinition","parameters":{"id":1676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1671,"mutability":"mutable","name":"target","nameLocation":"6009:6:8","nodeType":"VariableDeclaration","scope":1697,"src":"6001:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1670,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1673,"mutability":"mutable","name":"data","nameLocation":"6038:4:8","nodeType":"VariableDeclaration","scope":1697,"src":"6025:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1672,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1675,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:8","nodeType":"VariableDeclaration","scope":1697,"src":"6052:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1674,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:8"},"returnParameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1697,"src":"6108:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1677,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:8"},"scope":1827,"src":"5964:326:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1713,"nodeType":"Block","src":"6566:101:8","statements":[{"expression":{"arguments":[{"id":1708,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"6604:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1709,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1702,"src":"6612:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1707,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1714,1743],"referencedDeclaration":1743,"src":"6583:20:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6583:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1706,"id":1712,"nodeType":"Return","src":"6576:84:8"}]},"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"6296:168:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1714,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:8","nodeType":"FunctionDefinition","parameters":{"id":1703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"target","nameLocation":"6507:6:8","nodeType":"VariableDeclaration","scope":1714,"src":"6499:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1699,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1702,"mutability":"mutable","name":"data","nameLocation":"6528:4:8","nodeType":"VariableDeclaration","scope":1714,"src":"6515:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1701,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:8"},"returnParameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1714,"src":"6552:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1704,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:8"},"scope":1827,"src":"6469:198:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1742,"nodeType":"Block","src":"7008:170:8","statements":[{"assignments":[1727,1729],"declarations":[{"constant":false,"id":1727,"mutability":"mutable","name":"success","nameLocation":"7024:7:8","nodeType":"VariableDeclaration","scope":1742,"src":"7019:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1726,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1729,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:8","nodeType":"VariableDeclaration","scope":1742,"src":"7033:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1728,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1734,"initialValue":{"arguments":[{"id":1732,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1719,"src":"7080:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1730,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"7060:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:8","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7060:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:8"},{"expression":{"arguments":[{"id":1736,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"7129:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1737,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"7137:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1738,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"7146:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1739,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"7158:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1735,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"7102:26:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7102:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1725,"id":1741,"nodeType":"Return","src":"7095:76:8"}]},"documentation":{"id":1715,"nodeType":"StructuredDocumentation","src":"6673:175:8","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1743,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:8","nodeType":"FunctionDefinition","parameters":{"id":1722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1717,"mutability":"mutable","name":"target","nameLocation":"6900:6:8","nodeType":"VariableDeclaration","scope":1743,"src":"6892:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1716,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1719,"mutability":"mutable","name":"data","nameLocation":"6929:4:8","nodeType":"VariableDeclaration","scope":1743,"src":"6916:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1718,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1721,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:8","nodeType":"VariableDeclaration","scope":1743,"src":"6943:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1720,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:8"},"returnParameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1743,"src":"6994:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1723,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:8"},"scope":1827,"src":"6853:325:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1781,"nodeType":"Block","src":"7660:434:8","statements":[{"condition":{"id":1757,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"7674:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1779,"nodeType":"Block","src":"8030:58:8","statements":[{"expression":{"arguments":[{"id":1775,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"8052:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1776,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"8064:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1774,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"8044:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8044:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1778,"nodeType":"ExpressionStatement","src":"8044:33:8"}]},"id":1780,"nodeType":"IfStatement","src":"7670:418:8","trueBody":{"id":1773,"nodeType":"Block","src":"7683:341:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1758,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"7701:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7701:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1770,"nodeType":"IfStatement","src":"7697:286:8","trueBody":{"id":1769,"nodeType":"Block","src":"7725:258:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":1764,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"7927:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1763,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"7916:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7916:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1762,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7908:60:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1768,"nodeType":"ExpressionStatement","src":"7908:60:8"}]}},{"expression":{"id":1771,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"8003:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1756,"id":1772,"nodeType":"Return","src":"7996:17:8"}]}}]},"documentation":{"id":1744,"nodeType":"StructuredDocumentation","src":"7184:277:8","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1782,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:8","nodeType":"FunctionDefinition","parameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"target","nameLocation":"7519:6:8","nodeType":"VariableDeclaration","scope":1782,"src":"7511:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1745,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"success","nameLocation":"7540:7:8","nodeType":"VariableDeclaration","scope":1782,"src":"7535:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1747,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:8","nodeType":"VariableDeclaration","scope":1782,"src":"7557:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1749,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1752,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:8","nodeType":"VariableDeclaration","scope":1782,"src":"7590:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1751,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:8"},"returnParameters":{"id":1756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1782,"src":"7646:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1754,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:8"},"scope":1827,"src":"7466:628:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1805,"nodeType":"Block","src":"8475:135:8","statements":[{"condition":{"id":1794,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"8489:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1803,"nodeType":"Block","src":"8546:58:8","statements":[{"expression":{"arguments":[{"id":1799,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"8568:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1800,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"8580:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1798,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"8560:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8560:33:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1802,"nodeType":"ExpressionStatement","src":"8560:33:8"}]},"id":1804,"nodeType":"IfStatement","src":"8485:119:8","trueBody":{"id":1797,"nodeType":"Block","src":"8498:42:8","statements":[{"expression":{"id":1795,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"8519:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1793,"id":1796,"nodeType":"Return","src":"8512:17:8"}]}}]},"documentation":{"id":1783,"nodeType":"StructuredDocumentation","src":"8100:210:8","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1806,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:8","nodeType":"FunctionDefinition","parameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"success","nameLocation":"8355:7:8","nodeType":"VariableDeclaration","scope":1806,"src":"8350:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1784,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1787,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:8","nodeType":"VariableDeclaration","scope":1806,"src":"8372:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1786,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1789,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:8","nodeType":"VariableDeclaration","scope":1806,"src":"8405:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1788,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:8"},"returnParameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1806,"src":"8461:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1791,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:8"},"scope":1827,"src":"8315:295:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1825,"nodeType":"Block","src":"8699:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1813,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1808,"src":"8775:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8775:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1823,"nodeType":"Block","src":"9105:45:8","statements":[{"expression":{"arguments":[{"id":1820,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"9126:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1819,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9119:20:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1822,"nodeType":"ExpressionStatement","src":"9119:20:8"}]},"id":1824,"nodeType":"IfStatement","src":"8771:379:8","trueBody":{"id":1818,"nodeType":"Block","src":"8798:301:8","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:8","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:8","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:8"},"nodeType":"YulFunctionCall","src":"8997:17:8"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:8","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:8","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:8"},"nodeType":"YulFunctionCall","src":"9038:19:8"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:8"},"nodeType":"YulFunctionCall","src":"9031:44:8"},"nodeType":"YulExpressionStatement","src":"9031:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1808,"isOffset":false,"isSlot":false,"src":"9003:10:8","valueSize":1},{"declaration":1808,"isOffset":false,"isSlot":false,"src":"9046:10:8","valueSize":1}],"id":1817,"nodeType":"InlineAssembly","src":"8947:142:8"}]}}]},"id":1826,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:8","nodeType":"FunctionDefinition","parameters":{"id":1811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:8","nodeType":"VariableDeclaration","scope":1826,"src":"8633:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1807,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1810,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:8","nodeType":"VariableDeclaration","scope":1826,"src":"8658:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1809,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:8"},"returnParameters":{"id":1812,"nodeType":"ParameterList","parameters":[],"src":"8699:0:8"},"scope":1827,"src":"8616:540:8","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1828,"src":"194:8964:8","usedErrors":[]}],"src":"101:9058:8"},"id":8},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1849]},"id":1850,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1829,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:9"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1830,"nodeType":"StructuredDocumentation","src":"111:496:9","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1849,"linearizedBaseContracts":[1849],"name":"Context","nameLocation":"626:7:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1838,"nodeType":"Block","src":"702:34:9","statements":[{"expression":{"expression":{"id":1835,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1834,"id":1837,"nodeType":"Return","src":"712:17:9"}]},"id":1839,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:9","nodeType":"FunctionDefinition","parameters":{"id":1831,"nodeType":"ParameterList","parameters":[],"src":"659:2:9"},"returnParameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1839,"src":"693:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1832,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:9"},"scope":1849,"src":"640:96:9","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1847,"nodeType":"Block","src":"809:32:9","statements":[{"expression":{"expression":{"id":1844,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:9","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1843,"id":1846,"nodeType":"Return","src":"819:15:9"}]},"id":1848,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:9","nodeType":"FunctionDefinition","parameters":{"id":1840,"nodeType":"ParameterList","parameters":[],"src":"759:2:9"},"returnParameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1848,"src":"793:14:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1841,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:9"},"scope":1849,"src":"742:99:9","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1850,"src":"608:235:9","usedErrors":[]}],"src":"86:758:9"},"id":9},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2925],"Strings":[2024]},"id":2025,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1851,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1852,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2025,"sourceUnit":2926,"src":"126:25:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1853,"nodeType":"StructuredDocumentation","src":"153:34:10","text":" @dev String operations."},"fullyImplemented":true,"id":2024,"linearizedBaseContracts":[2024],"name":"Strings","nameLocation":"196:7:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1856,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:10","nodeType":"VariableDeclaration","scope":2024,"src":"210:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1854,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1859,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:10","nodeType":"VariableDeclaration","scope":2024,"src":"270:43:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1857,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:10","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1906,"nodeType":"Block","src":"486:625:10","statements":[{"id":1905,"nodeType":"UncheckedBlock","src":"496:609:10","statements":[{"assignments":[1868],"declarations":[{"constant":false,"id":1868,"mutability":"mutable","name":"length","nameLocation":"528:6:10","nodeType":"VariableDeclaration","scope":1905,"src":"520:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1875,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1871,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"548:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1869,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"537:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2925_$","typeString":"type(library Math)"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2762,"src":"537:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"537:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:10"},{"assignments":[1877],"declarations":[{"constant":false,"id":1877,"mutability":"mutable","name":"buffer","nameLocation":"586:6:10","nodeType":"VariableDeclaration","scope":1905,"src":"572:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1876,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1882,"initialValue":{"arguments":[{"id":1880,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"606:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1879,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1878,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"595:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:10"},{"assignments":[1884],"declarations":[{"constant":false,"id":1884,"mutability":"mutable","name":"ptr","nameLocation":"635:3:10","nodeType":"VariableDeclaration","scope":1905,"src":"627:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1885,"nodeType":"VariableDeclarationStatement","src":"627:11:10"},{"AST":{"nodeType":"YulBlock","src":"708:67:10","statements":[{"nodeType":"YulAssignment","src":"726:35:10","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:10","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:10"},"nodeType":"YulFunctionCall","src":"745:15:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:10"},"nodeType":"YulFunctionCall","src":"733:28:10"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1877,"isOffset":false,"isSlot":false,"src":"737:6:10","valueSize":1},{"declaration":1868,"isOffset":false,"isSlot":false,"src":"753:6:10","valueSize":1},{"declaration":1884,"isOffset":false,"isSlot":false,"src":"726:3:10","valueSize":1}],"id":1886,"nodeType":"InlineAssembly","src":"699:76:10"},{"body":{"id":1901,"nodeType":"Block","src":"801:267:10","statements":[{"expression":{"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:10","subExpression":{"id":1888,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"819:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1890,"nodeType":"ExpressionStatement","src":"819:5:10"},{"AST":{"nodeType":"YulBlock","src":"902:84:10","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:10"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:10","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:10"},"nodeType":"YulFunctionCall","src":"942:14:10"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:10"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:10"},"nodeType":"YulFunctionCall","src":"937:30:10"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:10"},"nodeType":"YulFunctionCall","src":"924:44:10"},"nodeType":"YulExpressionStatement","src":"924:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1856,"isOffset":false,"isSlot":false,"src":"958:8:10","valueSize":1},{"declaration":1884,"isOffset":false,"isSlot":false,"src":"932:3:10","valueSize":1},{"declaration":1862,"isOffset":false,"isSlot":false,"src":"946:5:10","valueSize":1}],"id":1891,"nodeType":"InlineAssembly","src":"893:93:10"},{"expression":{"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1892,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"1003:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1895,"nodeType":"ExpressionStatement","src":"1003:11:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1896,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"1036:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1900,"nodeType":"IfStatement","src":"1032:21:10","trueBody":{"id":1899,"nodeType":"Break","src":"1048:5:10"}}]},"condition":{"hexValue":"74727565","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1902,"nodeType":"WhileStatement","src":"788:280:10"},{"expression":{"id":1903,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"1088:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1866,"id":1904,"nodeType":"Return","src":"1081:13:10"}]}]},"documentation":{"id":1860,"nodeType":"StructuredDocumentation","src":"320:90:10","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1907,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:10","nodeType":"FunctionDefinition","parameters":{"id":1863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1862,"mutability":"mutable","name":"value","nameLocation":"441:5:10","nodeType":"VariableDeclaration","scope":1907,"src":"433:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:10"},"returnParameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1907,"src":"471:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1864,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:10"},"scope":2024,"src":"415:696:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1926,"nodeType":"Block","src":"1290:100:10","statements":[{"id":1925,"nodeType":"UncheckedBlock","src":"1300:84:10","statements":[{"expression":{"arguments":[{"id":1916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1343:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1362:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1917,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"1350:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2925_$","typeString":"type(library Math)"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2885,"src":"1350:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1350:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1915,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1927,2003,2023],"referencedDeclaration":2003,"src":"1331:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1331:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1914,"id":1924,"nodeType":"Return","src":"1324:49:10"}]}]},"documentation":{"id":1908,"nodeType":"StructuredDocumentation","src":"1117:94:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1927,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:10","nodeType":"FunctionDefinition","parameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"value","nameLocation":"1245:5:10","nodeType":"VariableDeclaration","scope":1927,"src":"1237:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1909,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:10"},"returnParameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1927,"src":"1275:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1912,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:10"},"scope":2024,"src":"1216:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2002,"nodeType":"Block","src":"1603:347:10","statements":[{"assignments":[1938],"declarations":[{"constant":false,"id":1938,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:10","nodeType":"VariableDeclaration","scope":2002,"src":"1613:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1937,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1947,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1942,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"1649:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1939,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:10"},{"expression":{"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1948,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"1670:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1950,"indexExpression":{"hexValue":"30","id":1949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1953,"nodeType":"ExpressionStatement","src":"1670:15:10"},{"expression":{"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1954,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"1695:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1956,"indexExpression":{"hexValue":"31","id":1955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1959,"nodeType":"ExpressionStatement","src":"1695:15:10"},{"body":{"id":1988,"nodeType":"Block","src":"1765:83:10","statements":[{"expression":{"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1974,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"1779:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1976,"indexExpression":{"id":1975,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1786:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1977,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"1791:8:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1981,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1978,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"1800:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:10","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1983,"nodeType":"ExpressionStatement","src":"1779:33:10"},{"expression":{"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"1826:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1987,"nodeType":"ExpressionStatement","src":"1826:11:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1968,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1753:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1989,"initializationExpression":{"assignments":[1961],"declarations":[{"constant":false,"id":1961,"mutability":"mutable","name":"i","nameLocation":"1733:1:10","nodeType":"VariableDeclaration","scope":1989,"src":"1725:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1960,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1967,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1963,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"1741:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:10"},"loopExpression":{"expression":{"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:10","subExpression":{"id":1971,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"1762:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1973,"nodeType":"ExpressionStatement","src":"1760:3:10"},"nodeType":"ForStatement","src":"1720:128:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1991,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"1865:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1990,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1857:55:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1996,"nodeType":"ExpressionStatement","src":"1857:55:10"},{"expression":{"arguments":[{"id":1999,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"1936:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1997,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:10","typeDescriptions":{}}},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1929:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1936,"id":2001,"nodeType":"Return","src":"1922:21:10"}]},"documentation":{"id":1928,"nodeType":"StructuredDocumentation","src":"1396:112:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2003,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:10","nodeType":"FunctionDefinition","parameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1930,"mutability":"mutable","name":"value","nameLocation":"1542:5:10","nodeType":"VariableDeclaration","scope":2003,"src":"1534:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1929,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1932,"mutability":"mutable","name":"length","nameLocation":"1557:6:10","nodeType":"VariableDeclaration","scope":2003,"src":"1549:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1931,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:10"},"returnParameters":{"id":1936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2003,"src":"1588:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1934,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:10"},"scope":2024,"src":"1513:437:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2022,"nodeType":"Block","src":"2175:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2016,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"2220:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2015,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2014,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:10","typeDescriptions":{}}},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2212:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:10","typeDescriptions":{}}},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2019,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"2228:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2011,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1927,2003,2023],"referencedDeclaration":2003,"src":"2192:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2192:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2010,"id":2021,"nodeType":"Return","src":"2185:59:10"}]},"documentation":{"id":2004,"nodeType":"StructuredDocumentation","src":"1956:141:10","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2023,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:10","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"addr","nameLocation":"2131:4:10","nodeType":"VariableDeclaration","scope":2023,"src":"2123:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:10"},"returnParameters":{"id":2010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2023,"src":"2160:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2008,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:10"},"scope":2024,"src":"2102:149:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2025,"src":"188:2065:10","usedErrors":[]}],"src":"101:2153:10"},"id":10},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2048],"IERC165":[2060]},"id":2049,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2026,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2027,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2049,"sourceUnit":2061,"src":"124:23:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2029,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":2060,"src":"754:7:11"},"id":2030,"nodeType":"InheritanceSpecifier","src":"754:7:11"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2028,"nodeType":"StructuredDocumentation","src":"149:576:11","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2048,"linearizedBaseContracts":[2048,2060],"name":"ERC165","nameLocation":"744:6:11","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2059],"body":{"id":2046,"nodeType":"Block","src":"920:64:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"937:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2041,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"957:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2060_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2060_$","typeString":"type(contract IERC165)"}],"id":2040,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2060","typeString":"type(contract IERC165)"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2038,"id":2045,"nodeType":"Return","src":"930:47:11"}]},"documentation":{"id":2031,"nodeType":"StructuredDocumentation","src":"768:56:11","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2047,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:11","nodeType":"FunctionDefinition","overrides":{"id":2035,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:11"},"parameters":{"id":2034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2033,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:11","nodeType":"VariableDeclaration","scope":2047,"src":"856:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2032,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:11"},"returnParameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2047,"src":"914:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2036,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:11"},"scope":2048,"src":"829:155:11","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2049,"src":"726:260:11","usedErrors":[]}],"src":"99:888:11"},"id":11},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2060]},"id":2061,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2050,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:12"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":2051,"nodeType":"StructuredDocumentation","src":"125:279:12","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2060,"linearizedBaseContracts":[2060],"name":"IERC165","nameLocation":"415:7:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2052,"nodeType":"StructuredDocumentation","src":"429:340:12","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2059,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:12","nodeType":"FunctionDefinition","parameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:12","nodeType":"VariableDeclaration","scope":2059,"src":"801:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2053,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:12"},"returnParameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2059,"src":"844:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2056,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:12"},"scope":2060,"src":"774:76:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2061,"src":"405:447:12","usedErrors":[]}],"src":"100:753:12"},"id":12},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2925]},"id":2926,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2062,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:13"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":2063,"nodeType":"StructuredDocumentation","src":"128:73:13","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2925,"linearizedBaseContracts":[2925],"name":"Math","nameLocation":"210:4:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2067,"members":[{"id":2064,"name":"Down","nameLocation":"245:4:13","nodeType":"EnumValue","src":"245:4:13"},{"id":2065,"name":"Up","nameLocation":"287:2:13","nodeType":"EnumValue","src":"287:2:13"},{"id":2066,"name":"Zero","nameLocation":"318:4:13","nodeType":"EnumValue","src":"318:4:13"}],"name":"Rounding","nameLocation":"226:8:13","nodeType":"EnumDefinition","src":"221:122:13"},{"body":{"id":2084,"nodeType":"Block","src":"480:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2077,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2070,"src":"497:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2078,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"501:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2081,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2072,"src":"509:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:13","trueExpression":{"id":2080,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2070,"src":"505:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2076,"id":2083,"nodeType":"Return","src":"490:20:13"}]},"documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"349:59:13","text":" @dev Returns the largest of two numbers."},"id":2085,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:13","nodeType":"FunctionDefinition","parameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"a","nameLocation":"434:1:13","nodeType":"VariableDeclaration","scope":2085,"src":"426:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2069,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2072,"mutability":"mutable","name":"b","nameLocation":"445:1:13","nodeType":"VariableDeclaration","scope":2085,"src":"437:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2071,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:13"},"returnParameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2085,"src":"471:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2074,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:13"},"scope":2925,"src":"413:104:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2102,"nodeType":"Block","src":"655:37:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2095,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"672:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2096,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"676:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2099,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"684:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:13","trueExpression":{"id":2098,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"680:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2094,"id":2101,"nodeType":"Return","src":"665:20:13"}]},"documentation":{"id":2086,"nodeType":"StructuredDocumentation","src":"523:60:13","text":" @dev Returns the smallest of two numbers."},"id":2103,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:13","nodeType":"FunctionDefinition","parameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2088,"mutability":"mutable","name":"a","nameLocation":"609:1:13","nodeType":"VariableDeclaration","scope":2103,"src":"601:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2090,"mutability":"mutable","name":"b","nameLocation":"620:1:13","nodeType":"VariableDeclaration","scope":2103,"src":"612:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2089,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:13"},"returnParameters":{"id":2094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2093,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2103,"src":"646:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2092,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:13"},"scope":2925,"src":"588:104:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2125,"nodeType":"Block","src":"876:82:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2113,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"931:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2114,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"935:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2116,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2117,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2106,"src":"941:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2118,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"945:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2120,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2112,"id":2124,"nodeType":"Return","src":"923:28:13"}]},"documentation":{"id":2104,"nodeType":"StructuredDocumentation","src":"698:102:13","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2126,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:13","nodeType":"FunctionDefinition","parameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2106,"mutability":"mutable","name":"a","nameLocation":"830:1:13","nodeType":"VariableDeclaration","scope":2126,"src":"822:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2105,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2108,"mutability":"mutable","name":"b","nameLocation":"841:1:13","nodeType":"VariableDeclaration","scope":2126,"src":"833:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:13"},"returnParameters":{"id":2112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2126,"src":"867:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:13"},"scope":2925,"src":"805:153:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2150,"nodeType":"Block","src":"1228:123:13","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2136,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2129,"src":"1316:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2140,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2129,"src":"1330:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2143,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2144,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2131,"src":"1339:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:13","trueExpression":{"hexValue":"30","id":2139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2135,"id":2149,"nodeType":"Return","src":"1309:35:13"}]},"documentation":{"id":2127,"nodeType":"StructuredDocumentation","src":"964:188:13","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2151,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:13","nodeType":"FunctionDefinition","parameters":{"id":2132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2129,"mutability":"mutable","name":"a","nameLocation":"1182:1:13","nodeType":"VariableDeclaration","scope":2151,"src":"1174:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2128,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2131,"mutability":"mutable","name":"b","nameLocation":"1193:1:13","nodeType":"VariableDeclaration","scope":2151,"src":"1185:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2130,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:13"},"returnParameters":{"id":2135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2134,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2151,"src":"1219:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2133,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:13"},"scope":2925,"src":"1157:194:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2272,"nodeType":"Block","src":"1795:3797:13","statements":[{"id":2271,"nodeType":"UncheckedBlock","src":"1805:3781:13","statements":[{"assignments":[2164],"declarations":[{"constant":false,"id":2164,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:13","nodeType":"VariableDeclaration","scope":2271,"src":"2126:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2163,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2165,"nodeType":"VariableDeclarationStatement","src":"2126:13:13"},{"assignments":[2167],"declarations":[{"constant":false,"id":2167,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:13","nodeType":"VariableDeclaration","scope":2271,"src":"2198:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2166,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2168,"nodeType":"VariableDeclarationStatement","src":"2198:13:13"},{"AST":{"nodeType":"YulBlock","src":"2278:157:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:13","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:13"},"nodeType":"YulFunctionCall","src":"2319:6:13"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:13"},"nodeType":"YulFunctionCall","src":"2306:20:13"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:13","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:13"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:13"},"nodeType":"YulFunctionCall","src":"2352:9:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:13"}]},{"nodeType":"YulAssignment","src":"2378:43:13","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:13"},"nodeType":"YulFunctionCall","src":"2391:14:13"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:13"},"nodeType":"YulFunctionCall","src":"2407:13:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:13"},"nodeType":"YulFunctionCall","src":"2387:34:13"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:13"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2164,"isOffset":false,"isSlot":false,"src":"2343:5:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"2399:5:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"2414:5:13","valueSize":1},{"declaration":2167,"isOffset":false,"isSlot":false,"src":"2378:5:13","valueSize":1},{"declaration":2154,"isOffset":false,"isSlot":false,"src":"2313:1:13","valueSize":1},{"declaration":2154,"isOffset":false,"isSlot":false,"src":"2356:1:13","valueSize":1},{"declaration":2156,"isOffset":false,"isSlot":false,"src":"2316:1:13","valueSize":1},{"declaration":2156,"isOffset":false,"isSlot":false,"src":"2359:1:13","valueSize":1}],"id":2169,"nodeType":"InlineAssembly","src":"2269:166:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2170,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2516:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2178,"nodeType":"IfStatement","src":"2512:75:13","trueBody":{"id":2177,"nodeType":"Block","src":"2528:59:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2173,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"2553:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2174,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2561:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2162,"id":2176,"nodeType":"Return","src":"2546:26:13"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"2697:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2181,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2711:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2179,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2689:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2184,"nodeType":"ExpressionStatement","src":"2689:28:13"},{"assignments":[2186],"declarations":[{"constant":false,"id":2186,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:13","nodeType":"VariableDeclaration","scope":2271,"src":"2973:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2185,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2187,"nodeType":"VariableDeclarationStatement","src":"2973:17:13"},{"AST":{"nodeType":"YulBlock","src":"3013:291:13","statements":[{"nodeType":"YulAssignment","src":"3082:38:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:13"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:13"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:13"},"nodeType":"YulFunctionCall","src":"3095:25:13"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:13"}]},{"nodeType":"YulAssignment","src":"3202:41:13","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:13"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:13"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:13"},"nodeType":"YulFunctionCall","src":"3222:20:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:13"},"nodeType":"YulFunctionCall","src":"3211:32:13"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:13"}]},{"nodeType":"YulAssignment","src":"3260:30:13","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:13"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:13"},"nodeType":"YulFunctionCall","src":"3269:21:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:13"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2158,"isOffset":false,"isSlot":false,"src":"3108:11:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"3236:5:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"3260:5:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"3273:5:13","valueSize":1},{"declaration":2167,"isOffset":false,"isSlot":false,"src":"3202:5:13","valueSize":1},{"declaration":2167,"isOffset":false,"isSlot":false,"src":"3215:5:13","valueSize":1},{"declaration":2186,"isOffset":false,"isSlot":false,"src":"3082:9:13","valueSize":1},{"declaration":2186,"isOffset":false,"isSlot":false,"src":"3225:9:13","valueSize":1},{"declaration":2186,"isOffset":false,"isSlot":false,"src":"3280:9:13","valueSize":1},{"declaration":2154,"isOffset":false,"isSlot":false,"src":"3102:1:13","valueSize":1},{"declaration":2156,"isOffset":false,"isSlot":false,"src":"3105:1:13","valueSize":1}],"id":2188,"nodeType":"InlineAssembly","src":"3004:300:13"},{"assignments":[2190],"declarations":[{"constant":false,"id":2190,"mutability":"mutable","name":"twos","nameLocation":"3619:4:13","nodeType":"VariableDeclaration","scope":2271,"src":"3611:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2189,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2198,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2191,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3626:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:13","subExpression":{"id":2192,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"3642:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:13"},{"AST":{"nodeType":"YulBlock","src":"3681:362:13","statements":[{"nodeType":"YulAssignment","src":"3746:37:13","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:13"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:13"},"nodeType":"YulFunctionCall","src":"3761:22:13"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:13"}]},{"nodeType":"YulAssignment","src":"3850:25:13","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:13"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:13"},"nodeType":"YulFunctionCall","src":"3859:16:13"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:13"}]},{"nodeType":"YulAssignment","src":"3990:39:13","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:13","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:13"},"nodeType":"YulFunctionCall","src":"4006:12:13"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:13"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:13"},"nodeType":"YulFunctionCall","src":"4002:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:13"},"nodeType":"YulFunctionCall","src":"3998:31:13"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:13"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2158,"isOffset":false,"isSlot":false,"src":"3746:11:13","valueSize":1},{"declaration":2158,"isOffset":false,"isSlot":false,"src":"3765:11:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"3850:5:13","valueSize":1},{"declaration":2164,"isOffset":false,"isSlot":false,"src":"3863:5:13","valueSize":1},{"declaration":2190,"isOffset":false,"isSlot":false,"src":"3778:4:13","valueSize":1},{"declaration":2190,"isOffset":false,"isSlot":false,"src":"3870:4:13","valueSize":1},{"declaration":2190,"isOffset":false,"isSlot":false,"src":"3990:4:13","valueSize":1},{"declaration":2190,"isOffset":false,"isSlot":false,"src":"4013:4:13","valueSize":1},{"declaration":2190,"isOffset":false,"isSlot":false,"src":"4020:4:13","valueSize":1}],"id":2199,"nodeType":"InlineAssembly","src":"3672:371:13"},{"expression":{"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2200,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"4109:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2201,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"4118:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2202,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2190,"src":"4126:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2205,"nodeType":"ExpressionStatement","src":"4109:21:13"},{"assignments":[2207],"declarations":[{"constant":false,"id":2207,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:13","nodeType":"VariableDeclaration","scope":2271,"src":"4448:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2206,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2214,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2209,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4471:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2211,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:13"},{"expression":{"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2215,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4704:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2217,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4719:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2218,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4733:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2222,"nodeType":"ExpressionStatement","src":"4704:36:13"},{"expression":{"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2223,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4773:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2225,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4788:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2226,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4802:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2230,"nodeType":"ExpressionStatement","src":"4773:36:13"},{"expression":{"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2231,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4843:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2233,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4858:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2234,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4872:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2238,"nodeType":"ExpressionStatement","src":"4843:36:13"},{"expression":{"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2239,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4913:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2241,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4928:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2242,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4942:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2246,"nodeType":"ExpressionStatement","src":"4913:36:13"},{"expression":{"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2247,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"4983:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2249,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"4998:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2250,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"5012:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2254,"nodeType":"ExpressionStatement","src":"4983:36:13"},{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2255,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"5054:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2257,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"5069:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2258,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"5083:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"5054:36:13"},{"expression":{"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2263,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"5524:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2264,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"5533:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2265,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2207,"src":"5541:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2268,"nodeType":"ExpressionStatement","src":"5524:24:13"},{"expression":{"id":2269,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"5569:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2162,"id":2270,"nodeType":"Return","src":"5562:13:13"}]}]},"documentation":{"id":2152,"nodeType":"StructuredDocumentation","src":"1357:305:13","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2273,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:13","nodeType":"FunctionDefinition","parameters":{"id":2159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2154,"mutability":"mutable","name":"x","nameLocation":"1700:1:13","nodeType":"VariableDeclaration","scope":2273,"src":"1692:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2153,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2156,"mutability":"mutable","name":"y","nameLocation":"1719:1:13","nodeType":"VariableDeclaration","scope":2273,"src":"1711:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2155,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2158,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:13","nodeType":"VariableDeclaration","scope":2273,"src":"1730:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2157,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:13"},"returnParameters":{"id":2162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2161,"mutability":"mutable","name":"result","nameLocation":"1787:6:13","nodeType":"VariableDeclaration","scope":2273,"src":"1779:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2160,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:13"},"scope":2925,"src":"1667:3925:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2316,"nodeType":"Block","src":"5872:189:13","statements":[{"assignments":[2289],"declarations":[{"constant":false,"id":2289,"mutability":"mutable","name":"result","nameLocation":"5890:6:13","nodeType":"VariableDeclaration","scope":2316,"src":"5882:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2288,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2295,"initialValue":{"arguments":[{"id":2291,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"5906:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2292,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"5909:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2293,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"5912:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2290,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2273,2317],"referencedDeclaration":2273,"src":"5899:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5899:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:13"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2296,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"5938:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2297,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"5950:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2067_$","typeString":"type(enum Math.Rounding)"}},"id":2298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2065,"src":"5950:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"src":"5938:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2301,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2276,"src":"5972:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2302,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"5975:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2303,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"5978:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2300,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:13","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5965:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2313,"nodeType":"IfStatement","src":"5934:98:13","trueBody":{"id":2312,"nodeType":"Block","src":"5996:36:13","statements":[{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"6010:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2311,"nodeType":"ExpressionStatement","src":"6010:11:13"}]}},{"expression":{"id":2314,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"6048:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2287,"id":2315,"nodeType":"Return","src":"6041:13:13"}]},"documentation":{"id":2274,"nodeType":"StructuredDocumentation","src":"5598:121:13","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2317,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:13","nodeType":"FunctionDefinition","parameters":{"id":2284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"mutability":"mutable","name":"x","nameLocation":"5757:1:13","nodeType":"VariableDeclaration","scope":2317,"src":"5749:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2275,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2278,"mutability":"mutable","name":"y","nameLocation":"5776:1:13","nodeType":"VariableDeclaration","scope":2317,"src":"5768:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2280,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:13","nodeType":"VariableDeclaration","scope":2317,"src":"5787:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:13","nodeType":"VariableDeclaration","scope":2317,"src":"5816:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"typeName":{"id":2282,"nodeType":"UserDefinedTypeName","pathNode":{"id":2281,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2067,"src":"5816:8:13"},"referencedDeclaration":2067,"src":"5816:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:13"},"returnParameters":{"id":2287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2317,"src":"5863:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2285,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:13"},"scope":2925,"src":"5724:337:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2428,"nodeType":"Block","src":"6337:1585:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2325,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"6351:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2331,"nodeType":"IfStatement","src":"6347:45:13","trueBody":{"id":2330,"nodeType":"Block","src":"6359:33:13","statements":[{"expression":{"hexValue":"30","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2324,"id":2329,"nodeType":"Return","src":"6373:8:13"}]}},{"assignments":[2333],"declarations":[{"constant":false,"id":2333,"mutability":"mutable","name":"result","nameLocation":"7079:6:13","nodeType":"VariableDeclaration","scope":2428,"src":"7071:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2332,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2342,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2336,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7099:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2335,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2597,2633],"referencedDeclaration":2597,"src":"7094:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7094:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2340,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:13"},{"id":2427,"nodeType":"UncheckedBlock","src":"7508:408:13","statements":[{"expression":{"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7532:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2344,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7542:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2345,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7551:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2346,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7555:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2349,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2353,"nodeType":"ExpressionStatement","src":"7532:35:13"},{"expression":{"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7581:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2355,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7591:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2356,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7600:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7604:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2360,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2364,"nodeType":"ExpressionStatement","src":"7581:35:13"},{"expression":{"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2365,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7630:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2366,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7640:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2367,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7649:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2368,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7653:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2371,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2375,"nodeType":"ExpressionStatement","src":"7630:35:13"},{"expression":{"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2376,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7679:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7689:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2378,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7698:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2379,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7702:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2382,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2386,"nodeType":"ExpressionStatement","src":"7679:35:13"},{"expression":{"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2387,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7728:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2388,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7738:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2389,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7747:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2390,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7751:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2393,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2397,"nodeType":"ExpressionStatement","src":"7728:35:13"},{"expression":{"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2398,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7777:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2399,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7787:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2400,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7796:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2401,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7800:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2404,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2408,"nodeType":"ExpressionStatement","src":"7777:35:13"},{"expression":{"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2409,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7826:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2410,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7836:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2411,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7845:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2412,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7849:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2415,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2419,"nodeType":"ExpressionStatement","src":"7826:35:13"},{"expression":{"arguments":[{"id":2421,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7886:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2422,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2320,"src":"7894:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2423,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2333,"src":"7898:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2420,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2103,"src":"7882:3:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7882:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2324,"id":2426,"nodeType":"Return","src":"7875:30:13"}]}]},"documentation":{"id":2318,"nodeType":"StructuredDocumentation","src":"6067:208:13","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2429,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:13","nodeType":"FunctionDefinition","parameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2320,"mutability":"mutable","name":"a","nameLocation":"6302:1:13","nodeType":"VariableDeclaration","scope":2429,"src":"6294:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2319,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:13"},"returnParameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2429,"src":"6328:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2322,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:13"},"scope":2925,"src":"6280:1642:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2464,"nodeType":"Block","src":"8098:161:13","statements":[{"id":2463,"nodeType":"UncheckedBlock","src":"8108:145:13","statements":[{"assignments":[2441],"declarations":[{"constant":false,"id":2441,"mutability":"mutable","name":"result","nameLocation":"8140:6:13","nodeType":"VariableDeclaration","scope":2463,"src":"8132:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2440,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2445,"initialValue":{"arguments":[{"id":2443,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"8154:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2442,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2429,2465],"referencedDeclaration":2429,"src":"8149:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8149:7:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2446,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"8177:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2447,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2435,"src":"8187:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2448,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"8199:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2067_$","typeString":"type(enum Math.Rounding)"}},"id":2449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2065,"src":"8199:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"src":"8187:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"8214:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2452,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"8223:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2454,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"8232:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:13","trueExpression":{"hexValue":"31","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2460,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2439,"id":2462,"nodeType":"Return","src":"8170:72:13"}]}]},"documentation":{"id":2430,"nodeType":"StructuredDocumentation","src":"7928:89:13","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2465,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:13","nodeType":"FunctionDefinition","parameters":{"id":2436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2432,"mutability":"mutable","name":"a","nameLocation":"8044:1:13","nodeType":"VariableDeclaration","scope":2465,"src":"8036:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2431,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2435,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:13","nodeType":"VariableDeclaration","scope":2465,"src":"8047:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"typeName":{"id":2434,"nodeType":"UserDefinedTypeName","pathNode":{"id":2433,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2067,"src":"8047:8:13"},"referencedDeclaration":2067,"src":"8047:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:13"},"returnParameters":{"id":2439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2438,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2465,"src":"8089:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2437,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:13"},"scope":2925,"src":"8022:237:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2596,"nodeType":"Block","src":"8444:922:13","statements":[{"assignments":[2474],"declarations":[{"constant":false,"id":2474,"mutability":"mutable","name":"result","nameLocation":"8462:6:13","nodeType":"VariableDeclaration","scope":2596,"src":"8454:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2473,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2476,"initialValue":{"hexValue":"30","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:13"},{"id":2593,"nodeType":"UncheckedBlock","src":"8482:855:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2477,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8510:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2491,"nodeType":"IfStatement","src":"8506:99:13","trueBody":{"id":2490,"nodeType":"Block","src":"8528:77:13","statements":[{"expression":{"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2482,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8546:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2485,"nodeType":"ExpressionStatement","src":"8546:13:13"},{"expression":{"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2486,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"8577:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2489,"nodeType":"ExpressionStatement","src":"8577:13:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8622:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2506,"nodeType":"IfStatement","src":"8618:96:13","trueBody":{"id":2505,"nodeType":"Block","src":"8639:75:13","statements":[{"expression":{"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8657:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2500,"nodeType":"ExpressionStatement","src":"8657:12:13"},{"expression":{"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2501,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"8687:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2504,"nodeType":"ExpressionStatement","src":"8687:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2507,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8731:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2521,"nodeType":"IfStatement","src":"8727:96:13","trueBody":{"id":2520,"nodeType":"Block","src":"8748:75:13","statements":[{"expression":{"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8766:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2515,"nodeType":"ExpressionStatement","src":"8766:12:13"},{"expression":{"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"8796:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2519,"nodeType":"ExpressionStatement","src":"8796:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2522,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8840:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2536,"nodeType":"IfStatement","src":"8836:96:13","trueBody":{"id":2535,"nodeType":"Block","src":"8857:75:13","statements":[{"expression":{"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2527,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8875:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2530,"nodeType":"ExpressionStatement","src":"8875:12:13"},{"expression":{"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2531,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"8905:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2534,"nodeType":"ExpressionStatement","src":"8905:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2537,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8949:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2551,"nodeType":"IfStatement","src":"8945:93:13","trueBody":{"id":2550,"nodeType":"Block","src":"8965:73:13","statements":[{"expression":{"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2542,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8983:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2545,"nodeType":"ExpressionStatement","src":"8983:11:13"},{"expression":{"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2546,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"9012:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2549,"nodeType":"ExpressionStatement","src":"9012:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2552,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"9055:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2566,"nodeType":"IfStatement","src":"9051:93:13","trueBody":{"id":2565,"nodeType":"Block","src":"9071:73:13","statements":[{"expression":{"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2557,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"9089:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2560,"nodeType":"ExpressionStatement","src":"9089:11:13"},{"expression":{"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"9118:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2564,"nodeType":"ExpressionStatement","src":"9118:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"9161:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2581,"nodeType":"IfStatement","src":"9157:93:13","trueBody":{"id":2580,"nodeType":"Block","src":"9177:73:13","statements":[{"expression":{"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"9195:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2575,"nodeType":"ExpressionStatement","src":"9195:11:13"},{"expression":{"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2576,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"9224:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2579,"nodeType":"ExpressionStatement","src":"9224:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2582,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"9267:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2592,"nodeType":"IfStatement","src":"9263:64:13","trueBody":{"id":2591,"nodeType":"Block","src":"9283:44:13","statements":[{"expression":{"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2587,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"9301:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2590,"nodeType":"ExpressionStatement","src":"9301:11:13"}]}}]},{"expression":{"id":2594,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"9353:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2472,"id":2595,"nodeType":"Return","src":"9346:13:13"}]},"documentation":{"id":2466,"nodeType":"StructuredDocumentation","src":"8265:113:13","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2597,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:13","nodeType":"FunctionDefinition","parameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"value","nameLocation":"8405:5:13","nodeType":"VariableDeclaration","scope":2597,"src":"8397:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:13"},"returnParameters":{"id":2472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2597,"src":"8435:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2470,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:13"},"scope":2925,"src":"8383:983:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2632,"nodeType":"Block","src":"9599:165:13","statements":[{"id":2631,"nodeType":"UncheckedBlock","src":"9609:149:13","statements":[{"assignments":[2609],"declarations":[{"constant":false,"id":2609,"mutability":"mutable","name":"result","nameLocation":"9641:6:13","nodeType":"VariableDeclaration","scope":2631,"src":"9633:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2608,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2613,"initialValue":{"arguments":[{"id":2611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"9655:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2610,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2597,2633],"referencedDeclaration":2597,"src":"9650:4:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9650:11:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2614,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"9682:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2615,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"9692:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2616,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"9704:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2067_$","typeString":"type(enum Math.Rounding)"}},"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2065,"src":"9704:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"src":"9692:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2620,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"9724:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"9733:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:13","trueExpression":{"hexValue":"31","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2628,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2607,"id":2630,"nodeType":"Return","src":"9675:72:13"}]}]},"documentation":{"id":2598,"nodeType":"StructuredDocumentation","src":"9372:142:13","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2633,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:13","nodeType":"FunctionDefinition","parameters":{"id":2604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2600,"mutability":"mutable","name":"value","nameLocation":"9541:5:13","nodeType":"VariableDeclaration","scope":2633,"src":"9533:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2599,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2603,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:13","nodeType":"VariableDeclaration","scope":2633,"src":"9548:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"typeName":{"id":2602,"nodeType":"UserDefinedTypeName","pathNode":{"id":2601,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2067,"src":"9548:8:13"},"referencedDeclaration":2067,"src":"9548:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:13"},"returnParameters":{"id":2607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2633,"src":"9590:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2605,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:13"},"scope":2925,"src":"9519:245:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2761,"nodeType":"Block","src":"9951:828:13","statements":[{"assignments":[2642],"declarations":[{"constant":false,"id":2642,"mutability":"mutable","name":"result","nameLocation":"9969:6:13","nodeType":"VariableDeclaration","scope":2761,"src":"9961:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2641,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2644,"initialValue":{"hexValue":"30","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:13"},{"id":2758,"nodeType":"UncheckedBlock","src":"9989:761:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2645,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10017:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2661,"nodeType":"IfStatement","src":"10013:99:13","trueBody":{"id":2660,"nodeType":"Block","src":"10034:78:13","statements":[{"expression":{"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2650,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10052:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2655,"nodeType":"ExpressionStatement","src":"10052:15:13"},{"expression":{"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2656,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10085:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2659,"nodeType":"ExpressionStatement","src":"10085:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2662,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10129:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2678,"nodeType":"IfStatement","src":"10125:99:13","trueBody":{"id":2677,"nodeType":"Block","src":"10146:78:13","statements":[{"expression":{"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2667,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10164:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2672,"nodeType":"ExpressionStatement","src":"10164:15:13"},{"expression":{"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2673,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10197:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2676,"nodeType":"ExpressionStatement","src":"10197:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10241:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2695,"nodeType":"IfStatement","src":"10237:99:13","trueBody":{"id":2694,"nodeType":"Block","src":"10258:78:13","statements":[{"expression":{"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2684,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10276:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2687,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2689,"nodeType":"ExpressionStatement","src":"10276:15:13"},{"expression":{"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2690,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10309:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2693,"nodeType":"ExpressionStatement","src":"10309:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2696,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10353:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2712,"nodeType":"IfStatement","src":"10349:96:13","trueBody":{"id":2711,"nodeType":"Block","src":"10369:76:13","statements":[{"expression":{"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2701,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10387:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:13","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2706,"nodeType":"ExpressionStatement","src":"10387:14:13"},{"expression":{"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2707,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10419:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2710,"nodeType":"ExpressionStatement","src":"10419:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2713,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10462:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2729,"nodeType":"IfStatement","src":"10458:96:13","trueBody":{"id":2728,"nodeType":"Block","src":"10478:76:13","statements":[{"expression":{"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10496:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2721,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2723,"nodeType":"ExpressionStatement","src":"10496:14:13"},{"expression":{"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2724,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10528:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2727,"nodeType":"ExpressionStatement","src":"10528:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10571:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2746,"nodeType":"IfStatement","src":"10567:96:13","trueBody":{"id":2745,"nodeType":"Block","src":"10587:76:13","statements":[{"expression":{"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2735,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10605:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:13","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2740,"nodeType":"ExpressionStatement","src":"10605:14:13"},{"expression":{"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2741,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10637:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2744,"nodeType":"ExpressionStatement","src":"10637:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2747,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2636,"src":"10680:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2750,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2757,"nodeType":"IfStatement","src":"10676:64:13","trueBody":{"id":2756,"nodeType":"Block","src":"10696:44:13","statements":[{"expression":{"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2752,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10714:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2755,"nodeType":"ExpressionStatement","src":"10714:11:13"}]}}]},{"expression":{"id":2759,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"10766:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2640,"id":2760,"nodeType":"Return","src":"10759:13:13"}]},"documentation":{"id":2634,"nodeType":"StructuredDocumentation","src":"9770:114:13","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2762,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:13","nodeType":"FunctionDefinition","parameters":{"id":2637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2636,"mutability":"mutable","name":"value","nameLocation":"9912:5:13","nodeType":"VariableDeclaration","scope":2762,"src":"9904:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2635,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:13"},"returnParameters":{"id":2640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2762,"src":"9942:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:13"},"scope":2925,"src":"9889:890:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2797,"nodeType":"Block","src":"11014:165:13","statements":[{"id":2796,"nodeType":"UncheckedBlock","src":"11024:149:13","statements":[{"assignments":[2774],"declarations":[{"constant":false,"id":2774,"mutability":"mutable","name":"result","nameLocation":"11056:6:13","nodeType":"VariableDeclaration","scope":2796,"src":"11048:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2773,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2778,"initialValue":{"arguments":[{"id":2776,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"11071:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2775,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2762,2798],"referencedDeclaration":2762,"src":"11065:5:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11065:12:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2779,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"11098:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2780,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2768,"src":"11108:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2781,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"11120:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2067_$","typeString":"type(enum Math.Rounding)"}},"id":2782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2065,"src":"11120:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"src":"11108:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:13","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2785,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"11139:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"11148:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:13","trueExpression":{"hexValue":"31","id":2790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2793,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2772,"id":2795,"nodeType":"Return","src":"11091:71:13"}]}]},"documentation":{"id":2763,"nodeType":"StructuredDocumentation","src":"10785:143:13","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2798,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:13","nodeType":"FunctionDefinition","parameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2765,"mutability":"mutable","name":"value","nameLocation":"10956:5:13","nodeType":"VariableDeclaration","scope":2798,"src":"10948:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2764,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2768,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:13","nodeType":"VariableDeclaration","scope":2798,"src":"10963:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"typeName":{"id":2767,"nodeType":"UserDefinedTypeName","pathNode":{"id":2766,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2067,"src":"10963:8:13"},"referencedDeclaration":2067,"src":"10963:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:13"},"returnParameters":{"id":2772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2798,"src":"11005:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2770,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:13"},"scope":2925,"src":"10933:246:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2884,"nodeType":"Block","src":"11493:600:13","statements":[{"assignments":[2807],"declarations":[{"constant":false,"id":2807,"mutability":"mutable","name":"result","nameLocation":"11511:6:13","nodeType":"VariableDeclaration","scope":2884,"src":"11503:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2806,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2809,"initialValue":{"hexValue":"30","id":2808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:13"},{"id":2881,"nodeType":"UncheckedBlock","src":"11531:533:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2810,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11559:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2824,"nodeType":"IfStatement","src":"11555:98:13","trueBody":{"id":2823,"nodeType":"Block","src":"11577:76:13","statements":[{"expression":{"id":2817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2815,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11595:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2818,"nodeType":"ExpressionStatement","src":"11595:13:13"},{"expression":{"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2819,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"11626:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2822,"nodeType":"ExpressionStatement","src":"11626:12:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2825,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11670:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2839,"nodeType":"IfStatement","src":"11666:95:13","trueBody":{"id":2838,"nodeType":"Block","src":"11687:74:13","statements":[{"expression":{"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2830,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11705:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:13","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2833,"nodeType":"ExpressionStatement","src":"11705:12:13"},{"expression":{"id":2836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"11735:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2837,"nodeType":"ExpressionStatement","src":"11735:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2840,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11778:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2854,"nodeType":"IfStatement","src":"11774:95:13","trueBody":{"id":2853,"nodeType":"Block","src":"11795:74:13","statements":[{"expression":{"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2845,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11813:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:13","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2848,"nodeType":"ExpressionStatement","src":"11813:12:13"},{"expression":{"id":2851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"11843:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2852,"nodeType":"ExpressionStatement","src":"11843:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2855,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11886:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2869,"nodeType":"IfStatement","src":"11882:95:13","trueBody":{"id":2868,"nodeType":"Block","src":"11903:74:13","statements":[{"expression":{"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11921:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2863,"nodeType":"ExpressionStatement","src":"11921:12:13"},{"expression":{"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"11951:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2867,"nodeType":"ExpressionStatement","src":"11951:11:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2801,"src":"11994:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2880,"nodeType":"IfStatement","src":"11990:64:13","trueBody":{"id":2879,"nodeType":"Block","src":"12010:44:13","statements":[{"expression":{"id":2877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2875,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"12028:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2878,"nodeType":"ExpressionStatement","src":"12028:11:13"}]}}]},{"expression":{"id":2882,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"12080:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2805,"id":2883,"nodeType":"Return","src":"12073:13:13"}]},"documentation":{"id":2799,"nodeType":"StructuredDocumentation","src":"11185:240:13","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2885,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:13","nodeType":"FunctionDefinition","parameters":{"id":2802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2801,"mutability":"mutable","name":"value","nameLocation":"11454:5:13","nodeType":"VariableDeclaration","scope":2885,"src":"11446:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2800,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:13"},"returnParameters":{"id":2805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2885,"src":"11484:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:13"},"scope":2925,"src":"11430:663:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2923,"nodeType":"Block","src":"12329:173:13","statements":[{"id":2922,"nodeType":"UncheckedBlock","src":"12339:157:13","statements":[{"assignments":[2897],"declarations":[{"constant":false,"id":2897,"mutability":"mutable","name":"result","nameLocation":"12371:6:13","nodeType":"VariableDeclaration","scope":2922,"src":"12363:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2896,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2901,"initialValue":{"arguments":[{"id":2899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"12387:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2898,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2885,2924],"referencedDeclaration":2885,"src":"12380:6:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12380:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:13"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2902,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"12414:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2903,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"12424:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2904,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"12436:8:13","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2067_$","typeString":"type(enum Math.Rounding)"}},"id":2905,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2065,"src":"12436:11:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"src":"12424:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2908,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"12457:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:13","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2913,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"12471:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:13","trueExpression":{"hexValue":"31","id":2916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2919,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:13","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2895,"id":2921,"nodeType":"Return","src":"12407:78:13"}]}]},"documentation":{"id":2886,"nodeType":"StructuredDocumentation","src":"12099:143:13","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2924,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:13","nodeType":"FunctionDefinition","parameters":{"id":2892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2888,"mutability":"mutable","name":"value","nameLocation":"12271:5:13","nodeType":"VariableDeclaration","scope":2924,"src":"12263:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2887,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2891,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:13","nodeType":"VariableDeclaration","scope":2924,"src":"12278:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"},"typeName":{"id":2890,"nodeType":"UserDefinedTypeName","pathNode":{"id":2889,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2067,"src":"12278:8:13"},"referencedDeclaration":2067,"src":"12278:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2067","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:13"},"returnParameters":{"id":2895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2924,"src":"12320:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2893,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:13"},"scope":2925,"src":"12247:255:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2926,"src":"202:12302:13","usedErrors":[]}],"src":"103:12402:13"},"id":13},"contracts/RandomIpfsNft.sol":{"ast":{"absolutePath":"contracts/RandomIpfsNft.sol","exportedSymbols":{"Address":[1827],"Context":[1849],"ERC165":[2048],"ERC721":[1211],"ERC721URIStorage":[1470],"IERC165":[2060],"IERC721":[1327],"IERC721Metadata":[1497],"IERC721Receiver":[1345],"Math":[2925],"Ownable":[266],"RandomIpfsNft":[3319],"RandomIpfsNft__NeedMoreETHSent":[2936],"RandomIpfsNft__RangeOutOfBounds":[2934],"RandomIpfsNft__TranferFailed":[2938],"Strings":[2024],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[153]},"id":3320,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2927,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"33:23:14"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":2928,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3320,"sourceUnit":154,"src":"58:80:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":2929,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3320,"sourceUnit":58,"src":"139:61:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2930,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3320,"sourceUnit":1212,"src":"202:57:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":2931,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3320,"sourceUnit":1471,"src":"260:78:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":2932,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3320,"sourceUnit":267,"src":"339:52:14","symbolAliases":[],"unitAlias":""},{"id":2934,"name":"RandomIpfsNft__RangeOutOfBounds","nameLocation":"399:31:14","nodeType":"ErrorDefinition","parameters":{"id":2933,"nodeType":"ParameterList","parameters":[],"src":"430:2:14"},"src":"393:40:14"},{"id":2936,"name":"RandomIpfsNft__NeedMoreETHSent","nameLocation":"440:30:14","nodeType":"ErrorDefinition","parameters":{"id":2935,"nodeType":"ParameterList","parameters":[],"src":"470:2:14"},"src":"434:39:14"},{"id":2938,"name":"RandomIpfsNft__TranferFailed","nameLocation":"480:28:14","nodeType":"ErrorDefinition","parameters":{"id":2937,"nodeType":"ParameterList","parameters":[],"src":"508:2:14"},"src":"474:37:14"},{"abstract":false,"baseContracts":[{"baseName":{"id":2939,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"539:17:14"},"id":2940,"nodeType":"InheritanceSpecifier","src":"539:17:14"},{"baseName":{"id":2941,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":1470,"src":"558:16:14"},"id":2942,"nodeType":"InheritanceSpecifier","src":"558:16:14"},{"baseName":{"id":2943,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":266,"src":"576:7:14"},"id":2944,"nodeType":"InheritanceSpecifier","src":"576:7:14"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3319,"linearizedBaseContracts":[3319,266,1470,1211,1497,1327,2048,2060,1849,57],"name":"RandomIpfsNft","nameLocation":"522:13:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"RandomIpfsNft.Breed","id":2948,"members":[{"id":2945,"name":"PUG","nameLocation":"611:3:14","nodeType":"EnumValue","src":"611:3:14"},{"id":2946,"name":"SHIBA_INU","nameLocation":"624:9:14","nodeType":"EnumValue","src":"624:9:14"},{"id":2947,"name":"ST_BERNARD","nameLocation":"643:10:14","nodeType":"EnumValue","src":"643:10:14"}],"name":"Breed","nameLocation":"595:5:14","nodeType":"EnumDefinition","src":"590:69:14"},{"constant":false,"id":2951,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"709:16:14","nodeType":"VariableDeclaration","scope":3319,"src":"665:60:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":2950,"nodeType":"UserDefinedTypeName","pathNode":{"id":2949,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":153,"src":"665:25:14"},"referencedDeclaration":153,"src":"665:25:14","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":2953,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"756:16:14","nodeType":"VariableDeclaration","scope":3319,"src":"731:41:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2952,"name":"uint64","nodeType":"ElementaryTypeName","src":"731:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":2955,"mutability":"immutable","name":"i_gasLane","nameLocation":"804:9:14","nodeType":"VariableDeclaration","scope":3319,"src":"778:35:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"778:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2957,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"844:18:14","nodeType":"VariableDeclaration","scope":3319,"src":"819:43:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2956,"name":"uint32","nodeType":"ElementaryTypeName","src":"819:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":2960,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"892:21:14","nodeType":"VariableDeclaration","scope":3319,"src":"868:49:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2958,"name":"uint16","nodeType":"ElementaryTypeName","src":"868:6:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31","id":2959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"916:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":2963,"mutability":"constant","name":"NUM_WORDS","nameLocation":"947:9:14","nodeType":"VariableDeclaration","scope":3319,"src":"923:37:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2961,"name":"uint32","nodeType":"ElementaryTypeName","src":"923:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"959:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":2965,"mutability":"immutable","name":"i_mintFee","nameLocation":"993:9:14","nodeType":"VariableDeclaration","scope":3319,"src":"966:36:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2964,"name":"uint256","nodeType":"ElementaryTypeName","src":"966:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2969,"mutability":"mutable","name":"s_requestIdToSender","nameLocation":"1056:19:14","nodeType":"VariableDeclaration","scope":3319,"src":"1028:47:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2968,"keyType":{"id":2966,"name":"uint256","nodeType":"ElementaryTypeName","src":"1036:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1028:27:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":2967,"name":"address","nodeType":"ElementaryTypeName","src":"1047:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"functionSelector":"0b21a83b","id":2971,"mutability":"mutable","name":"s_tokenCounter","nameLocation":"1118:14:14","nodeType":"VariableDeclaration","scope":3319,"src":"1103:29:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2970,"name":"uint256","nodeType":"ElementaryTypeName","src":"1103:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":2974,"mutability":"immutable","name":"MAX_CHANCE_VALUE","nameLocation":"1165:16:14","nodeType":"VariableDeclaration","scope":3319,"src":"1138:48:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"1138:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3630","id":2973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1184:2:14","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"},"visibility":"internal"},{"constant":false,"id":2977,"mutability":"mutable","name":"s_dogTokenUris","nameLocation":"1210:14:14","nodeType":"VariableDeclaration","scope":3319,"src":"1192:32:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string[]"},"typeName":{"baseType":{"id":2975,"name":"string","nodeType":"ElementaryTypeName","src":"1192:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2976,"nodeType":"ArrayTypeName","src":"1192:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"anonymous":false,"id":2983,"name":"NftRequested","nameLocation":"1252:12:14","nodeType":"EventDefinition","parameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2979,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1281:9:14","nodeType":"VariableDeclaration","scope":2983,"src":"1265:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2978,"name":"uint256","nodeType":"ElementaryTypeName","src":"1265:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2981,"indexed":false,"mutability":"mutable","name":"requester","nameLocation":"1300:9:14","nodeType":"VariableDeclaration","scope":2983,"src":"1292:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2980,"name":"address","nodeType":"ElementaryTypeName","src":"1292:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1264:46:14"},"src":"1246:65:14"},{"anonymous":false,"id":2990,"name":"NftMinted","nameLocation":"1322:9:14","nodeType":"EventDefinition","parameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2986,"indexed":false,"mutability":"mutable","name":"dogBreed","nameLocation":"1338:8:14","nodeType":"VariableDeclaration","scope":2990,"src":"1332:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"},"typeName":{"id":2985,"nodeType":"UserDefinedTypeName","pathNode":{"id":2984,"name":"Breed","nodeType":"IdentifierPath","referencedDeclaration":2948,"src":"1332:5:14"},"referencedDeclaration":2948,"src":"1332:5:14","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"}},"visibility":"internal"},{"constant":false,"id":2988,"indexed":false,"mutability":"mutable","name":"minter","nameLocation":"1356:6:14","nodeType":"VariableDeclaration","scope":2990,"src":"1348:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2987,"name":"address","nodeType":"ElementaryTypeName","src":"1348:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1331:32:14"},"src":"1316:48:14"},{"body":{"id":3040,"nodeType":"Block","src":"1644:266:14","statements":[{"expression":{"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3014,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"1654:16:14","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3016,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"1699:16:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3015,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"1673:25:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$153_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1673:43:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1654:62:14","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"id":3019,"nodeType":"ExpressionStatement","src":"1654:62:14"},{"expression":{"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3020,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"1726:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3021,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"1738:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1726:19:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3023,"nodeType":"ExpressionStatement","src":"1726:19:14"},{"expression":{"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3024,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"1755:18:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3025,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2998,"src":"1776:16:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1755:37:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":3027,"nodeType":"ExpressionStatement","src":"1755:37:14"},{"expression":{"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3028,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"1802:16:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3029,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"1821:14:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1802:33:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":3031,"nodeType":"ExpressionStatement","src":"1802:33:14"},{"expression":{"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3032,"name":"s_dogTokenUris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"1845:14:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3033,"name":"dogTokenUris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3002,"src":"1862:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$3_memory_ptr","typeString":"string memory[3] memory"}},"src":"1845:29:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":3035,"nodeType":"ExpressionStatement","src":"1845:29:14"},{"expression":{"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3036,"name":"i_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"1884:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3037,"name":"mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"1896:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1884:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3039,"nodeType":"ExpressionStatement","src":"1884:19:14"}]},"id":3041,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3007,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"1593:16:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3008,"kind":"baseConstructorSpecifier","modifierName":{"id":3006,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1575:17:14"},"nodeType":"ModifierInvocation","src":"1575:35:14"},{"arguments":[{"hexValue":"52616e646f6d2049504653204e4654","id":3010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1618:17:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_060d1bdab5c66f2c3459267e43d1a510b3c61ad39afb4b1b9b944fbc6d6a9661","typeString":"literal_string \"Random IPFS NFT\""},"value":"Random IPFS NFT"},{"hexValue":"52494e","id":3011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1637:5:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2493aacafadd9e7cfb3e25fe184ffa39fa77c9794b3bfc81822f04194b6f764","typeString":"literal_string \"RIN\""},"value":"RIN"}],"id":3012,"kind":"baseConstructorSpecifier","modifierName":{"id":3009,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1211,"src":"1611:6:14"},"nodeType":"ModifierInvocation","src":"1611:32:14"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2992,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1399:16:14","nodeType":"VariableDeclaration","scope":3041,"src":"1391:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2991,"name":"address","nodeType":"ElementaryTypeName","src":"1391:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2994,"mutability":"mutable","name":"subscriptionId","nameLocation":"1432:14:14","nodeType":"VariableDeclaration","scope":3041,"src":"1425:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2993,"name":"uint64","nodeType":"ElementaryTypeName","src":"1425:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2996,"mutability":"mutable","name":"gasLane","nameLocation":"1464:7:14","nodeType":"VariableDeclaration","scope":3041,"src":"1456:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2995,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1456:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2998,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1488:16:14","nodeType":"VariableDeclaration","scope":3041,"src":"1481:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2997,"name":"uint32","nodeType":"ElementaryTypeName","src":"1481:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3002,"mutability":"mutable","name":"dogTokenUris","nameLocation":"1531:12:14","nodeType":"VariableDeclaration","scope":3041,"src":"1514:29:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$3_memory_ptr","typeString":"string[3]"},"typeName":{"baseType":{"id":2999,"name":"string","nodeType":"ElementaryTypeName","src":"1514:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":3001,"length":{"hexValue":"33","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1521:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"1514:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$3_storage_ptr","typeString":"string[3]"}},"visibility":"internal"},{"constant":false,"id":3004,"mutability":"mutable","name":"mintFee","nameLocation":"1561:7:14","nodeType":"VariableDeclaration","scope":3041,"src":"1553:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3003,"name":"uint256","nodeType":"ElementaryTypeName","src":"1553:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1381:193:14"},"returnParameters":{"id":3013,"nodeType":"ParameterList","parameters":[],"src":"1644:0:14"},"scope":3319,"src":"1370:540:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3079,"nodeType":"Block","src":"1981:420:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3046,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1995:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"1995:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3048,"name":"i_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"2007:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1995:21:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3054,"nodeType":"IfStatement","src":"1991:91:14","trueBody":{"id":3053,"nodeType":"Block","src":"2018:64:14","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3050,"name":"RandomIpfsNft__NeedMoreETHSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2936,"src":"2039:30:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2039:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3052,"nodeType":"RevertStatement","src":"2032:39:14"}]}},{"expression":{"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3055,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"2091:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3058,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"2152:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3059,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"2175:16:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3060,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"2205:21:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":3061,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"2240:18:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":3062,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2963,"src":"2272:9:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":3056,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2951,"src":"2103:16:14","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":86,"src":"2103:35:14","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2103:188:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2091:200:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3065,"nodeType":"ExpressionStatement","src":"2091:200:14"},{"expression":{"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3066,"name":"s_requestIdToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"2301:19:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3068,"indexExpression":{"id":3067,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"2321:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2301:30:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3069,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2334:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2334:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2301:43:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3072,"nodeType":"ExpressionStatement","src":"2301:43:14"},{"eventCall":{"arguments":[{"id":3074,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"2372:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":3075,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2383:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2383:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3073,"name":"NftRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"2359:12:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2359:35:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3078,"nodeType":"EmitStatement","src":"2354:40:14"}]},"functionSelector":"aa152491","id":3080,"implemented":true,"kind":"function","modifiers":[],"name":"requestNft","nameLocation":"1925:10:14","nodeType":"FunctionDefinition","parameters":{"id":3042,"nodeType":"ParameterList","parameters":[],"src":"1935:2:14"},"returnParameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3044,"mutability":"mutable","name":"requestId","nameLocation":"1970:9:14","nodeType":"VariableDeclaration","scope":3080,"src":"1962:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"1962:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1961:19:14"},"scope":3319,"src":"1916:485:14","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3113,"nodeType":"Block","src":"2444:212:14","statements":[{"assignments":[3086],"declarations":[{"constant":false,"id":3086,"mutability":"mutable","name":"amount","nameLocation":"2462:6:14","nodeType":"VariableDeclaration","scope":3113,"src":"2454:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3085,"name":"uint256","nodeType":"ElementaryTypeName","src":"2454:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3092,"initialValue":{"expression":{"arguments":[{"id":3089,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2479:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_RandomIpfsNft_$3319","typeString":"contract RandomIpfsNft"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RandomIpfsNft_$3319","typeString":"contract RandomIpfsNft"}],"id":3088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2471:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3087,"name":"address","nodeType":"ElementaryTypeName","src":"2471:7:14","typeDescriptions":{}}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2471:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2471:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2454:38:14"},{"assignments":[3094,null],"declarations":[{"constant":false,"id":3094,"mutability":"mutable","name":"success","nameLocation":"2508:7:14","nodeType":"VariableDeclaration","scope":3113,"src":"2503:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3093,"name":"bool","nodeType":"ElementaryTypeName","src":"2503:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3105,"initialValue":{"arguments":[{"hexValue":"","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2561:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":3097,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2529:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2529:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2521:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3095,"name":"address","nodeType":"ElementaryTypeName","src":"2521:8:14","stateMutability":"payable","typeDescriptions":{}}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2521:19:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2521:24:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3101,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"2553:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2521:39:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2521:43:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2502:62:14"},{"condition":{"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2578:8:14","subExpression":{"id":3106,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"2579:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3112,"nodeType":"IfStatement","src":"2574:76:14","trueBody":{"id":3111,"nodeType":"Block","src":"2588:62:14","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3108,"name":"RandomIpfsNft__TranferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"2609:28:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2609:30:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3110,"nodeType":"RevertStatement","src":"2602:37:14"}]}}]},"functionSelector":"3ccfd60b","id":3114,"implemented":true,"kind":"function","modifiers":[{"id":3083,"kind":"modifierInvocation","modifierName":{"id":3082,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":185,"src":"2434:9:14"},"nodeType":"ModifierInvocation","src":"2434:9:14"}],"name":"withdraw","nameLocation":"2416:8:14","nodeType":"FunctionDefinition","parameters":{"id":3081,"nodeType":"ParameterList","parameters":[],"src":"2424:2:14"},"returnParameters":{"id":3084,"nodeType":"ParameterList","parameters":[],"src":"2444:0:14"},"scope":3319,"src":"2407:249:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[30],"body":{"id":3179,"nodeType":"Block","src":"2779:481:14","statements":[{"assignments":[3124],"declarations":[{"constant":false,"id":3124,"mutability":"mutable","name":"dogOwner","nameLocation":"2797:8:14","nodeType":"VariableDeclaration","scope":3179,"src":"2789:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3123,"name":"address","nodeType":"ElementaryTypeName","src":"2789:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3128,"initialValue":{"baseExpression":{"id":3125,"name":"s_requestIdToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"2808:19:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3127,"indexExpression":{"id":3126,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"2828:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2808:30:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2789:49:14"},{"assignments":[3130],"declarations":[{"constant":false,"id":3130,"mutability":"mutable","name":"newTokenId","nameLocation":"2856:10:14","nodeType":"VariableDeclaration","scope":3179,"src":"2848:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3129,"name":"uint256","nodeType":"ElementaryTypeName","src":"2848:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3132,"initialValue":{"id":3131,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"2869:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2848:35:14"},{"expression":{"arguments":[{"id":3134,"name":"dogOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"2903:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3135,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"2913:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3133,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[761,790],"referencedDeclaration":761,"src":"2893:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2893:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3137,"nodeType":"ExpressionStatement","src":"2893:31:14"},{"assignments":[3139],"declarations":[{"constant":false,"id":3139,"mutability":"mutable","name":"moddedRng","nameLocation":"2943:9:14","nodeType":"VariableDeclaration","scope":3179,"src":"2935:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3138,"name":"uint256","nodeType":"ElementaryTypeName","src":"2935:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3145,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3140,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"2955:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3142,"indexExpression":{"hexValue":"30","id":3141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2967:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2955:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3143,"name":"MAX_CHANCE_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"2972:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2955:33:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2935:53:14"},{"assignments":[3148],"declarations":[{"constant":false,"id":3148,"mutability":"mutable","name":"dogBreed","nameLocation":"3005:8:14","nodeType":"VariableDeclaration","scope":3179,"src":"2999:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"},"typeName":{"id":3147,"nodeType":"UserDefinedTypeName","pathNode":{"id":3146,"name":"Breed","nodeType":"IdentifierPath","referencedDeclaration":2948,"src":"2999:5:14"},"referencedDeclaration":2948,"src":"2999:5:14","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"}},"visibility":"internal"}],"id":3152,"initialValue":{"arguments":[{"id":3150,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"3038:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3149,"name":"getBreedFromModdedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3241,"src":"3016:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_enum$_Breed_$2948_$","typeString":"function (uint256) pure returns (enum RandomIpfsNft.Breed)"}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3016:32:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"}},"nodeType":"VariableDeclarationStatement","src":"2999:49:14"},{"expression":{"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3153,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"3058:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3076:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3058:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3156,"nodeType":"ExpressionStatement","src":"3058:19:14"},{"expression":{"arguments":[{"baseExpression":{"id":3158,"name":"s_requestIdToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"3097:19:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3160,"indexExpression":{"id":3159,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"3117:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3097:30:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3161,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"3129:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3157,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[761,790],"referencedDeclaration":761,"src":"3087:9:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3087:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3163,"nodeType":"ExpressionStatement","src":"3087:53:14"},{"expression":{"arguments":[{"id":3165,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"3163:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":3166,"name":"s_dogTokenUris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"3175:14:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":3171,"indexExpression":{"arguments":[{"id":3169,"name":"dogBreed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"3198:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"}],"id":3168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3190:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3167,"name":"uint256","nodeType":"ElementaryTypeName","src":"3190:7:14","typeDescriptions":{}}},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3190:17:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3175:33:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3164,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"3150:12:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3150:59:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3173,"nodeType":"ExpressionStatement","src":"3150:59:14"},{"eventCall":{"arguments":[{"id":3175,"name":"dogBreed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3148,"src":"3234:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"}},{"id":3176,"name":"dogOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"3244:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3174,"name":"NftMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"3224:9:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_Breed_$2948_$_t_address_$returns$__$","typeString":"function (enum RandomIpfsNft.Breed,address)"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3224:29:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3178,"nodeType":"EmitStatement","src":"3219:34:14"}]},"id":3180,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"2671:18:14","nodeType":"FunctionDefinition","overrides":{"id":3121,"nodeType":"OverrideSpecifier","overrides":[],"src":"2770:8:14"},"parameters":{"id":3120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3116,"mutability":"mutable","name":"requestId","nameLocation":"2707:9:14","nodeType":"VariableDeclaration","scope":3180,"src":"2699:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3115,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3119,"mutability":"mutable","name":"randomWords","nameLocation":"2743:11:14","nodeType":"VariableDeclaration","scope":3180,"src":"2726:28:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3117,"name":"uint256","nodeType":"ElementaryTypeName","src":"2726:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3118,"nodeType":"ArrayTypeName","src":"2726:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2689:71:14"},"returnParameters":{"id":3122,"nodeType":"ParameterList","parameters":[],"src":"2779:0:14"},"scope":3319,"src":"2662:598:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3240,"nodeType":"Block","src":"3358:450:14","statements":[{"assignments":[3189],"declarations":[{"constant":false,"id":3189,"mutability":"mutable","name":"cumulativeSum","nameLocation":"3376:13:14","nodeType":"VariableDeclaration","scope":3240,"src":"3368:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3188,"name":"uint256","nodeType":"ElementaryTypeName","src":"3368:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3191,"initialValue":{"hexValue":"30","id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3392:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3368:25:14"},{"assignments":[3197],"declarations":[{"constant":false,"id":3197,"mutability":"mutable","name":"chanceArray","nameLocation":"3421:11:14","nodeType":"VariableDeclaration","scope":3240,"src":"3403:29:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":3195,"name":"uint256","nodeType":"ElementaryTypeName","src":"3403:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3196,"length":{"hexValue":"33","id":3194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3411:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"3403:10:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"id":3200,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":3198,"name":"getChanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3290,"src":"3435:14:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_array$_t_uint256_$3_memory_ptr_$","typeString":"function () pure returns (uint256[3] memory)"}},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3435:16:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"nodeType":"VariableDeclarationStatement","src":"3403:48:14"},{"body":{"id":3235,"nodeType":"Block","src":"3510:241:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3212,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"3545:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3213,"name":"cumulativeSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"3558:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3545:26:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3215,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"3591:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3216,"name":"cumulativeSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"3603:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"baseExpression":{"id":3217,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"3619:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":3219,"indexExpression":{"id":3218,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3631:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3619:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3603:30:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3591:42:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3545:88:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3228,"nodeType":"IfStatement","src":"3524:172:14","trueBody":{"id":3227,"nodeType":"Block","src":"3648:48:14","statements":[{"expression":{"arguments":[{"id":3224,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3679:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3223,"name":"Breed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"3673:5:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Breed_$2948_$","typeString":"type(enum RandomIpfsNft.Breed)"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3673:8:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"}},"functionReturnParameters":3187,"id":3226,"nodeType":"Return","src":"3666:15:14"}]}},{"expression":{"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3229,"name":"cumulativeSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"3709:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":3230,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"3726:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":3232,"indexExpression":{"id":3231,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3738:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3726:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3709:31:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3234,"nodeType":"ExpressionStatement","src":"3709:31:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3205,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3481:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3206,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"3485:11:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3485:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3481:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3236,"initializationExpression":{"assignments":[3202],"declarations":[{"constant":false,"id":3202,"mutability":"mutable","name":"i","nameLocation":"3474:1:14","nodeType":"VariableDeclaration","scope":3236,"src":"3466:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3201,"name":"uint256","nodeType":"ElementaryTypeName","src":"3466:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3204,"initialValue":{"hexValue":"30","id":3203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3478:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3466:13:14"},"loopExpression":{"expression":{"id":3210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3505:3:14","subExpression":{"id":3209,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3202,"src":"3505:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3211,"nodeType":"ExpressionStatement","src":"3505:3:14"},"nodeType":"ForStatement","src":"3461:290:14"},{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3237,"name":"RandomIpfsNft__RangeOutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2934,"src":"3768:31:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3768:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3239,"nodeType":"RevertStatement","src":"3761:40:14"}]},"functionSelector":"a51cccf3","id":3241,"implemented":true,"kind":"function","modifiers":[],"name":"getBreedFromModdedRng","nameLocation":"3275:21:14","nodeType":"FunctionDefinition","parameters":{"id":3183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"moddedRng","nameLocation":"3314:9:14","nodeType":"VariableDeclaration","scope":3241,"src":"3306:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3181,"name":"uint256","nodeType":"ElementaryTypeName","src":"3306:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3296:33:14"},"returnParameters":{"id":3187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3186,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3241,"src":"3351:5:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"},"typeName":{"id":3185,"nodeType":"UserDefinedTypeName","pathNode":{"id":3184,"name":"Breed","nodeType":"IdentifierPath","referencedDeclaration":2948,"src":"3351:5:14"},"referencedDeclaration":2948,"src":"3351:5:14","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2948","typeString":"enum RandomIpfsNft.Breed"}},"visibility":"internal"}],"src":"3350:7:14"},"scope":3319,"src":"3266:542:14","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":3248,"nodeType":"Block","src":"3873:40:14","statements":[{"expression":{"id":3246,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"3890:16:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":3245,"id":3247,"nodeType":"Return","src":"3883:23:14"}]},"functionSelector":"de3d9fb7","id":3249,"implemented":true,"kind":"function","modifiers":[],"name":"getSubscriptionId","nameLocation":"3823:17:14","nodeType":"FunctionDefinition","parameters":{"id":3242,"nodeType":"ParameterList","parameters":[],"src":"3840:2:14"},"returnParameters":{"id":3245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3249,"src":"3864:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"3864:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3863:9:14"},"scope":3319,"src":"3814:99:14","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3260,"nodeType":"Block","src":"3997:54:14","statements":[{"expression":{"baseExpression":{"id":3256,"name":"s_requestIdToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"4014:19:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3258,"indexExpression":{"id":3257,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3251,"src":"4034:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4014:30:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3255,"id":3259,"nodeType":"Return","src":"4007:37:14"}]},"functionSelector":"83762616","id":3261,"implemented":true,"kind":"function","modifiers":[],"name":"getSenderFromRequestId","nameLocation":"3927:22:14","nodeType":"FunctionDefinition","parameters":{"id":3252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3251,"mutability":"mutable","name":"requestId","nameLocation":"3958:9:14","nodeType":"VariableDeclaration","scope":3261,"src":"3950:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3250,"name":"uint256","nodeType":"ElementaryTypeName","src":"3950:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3949:19:14"},"returnParameters":{"id":3255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3261,"src":"3989:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3253,"name":"address","nodeType":"ElementaryTypeName","src":"3989:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3988:9:14"},"scope":3319,"src":"3918:133:14","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3268,"nodeType":"Block","src":"4117:42:14","statements":[{"expression":{"id":3266,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2957,"src":"4134:18:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":3265,"id":3267,"nodeType":"Return","src":"4127:25:14"}]},"functionSelector":"de8be8e7","id":3269,"implemented":true,"kind":"function","modifiers":[],"name":"getCallbackGasLimit","nameLocation":"4066:19:14","nodeType":"FunctionDefinition","parameters":{"id":3262,"nodeType":"ParameterList","parameters":[],"src":"4085:2:14"},"returnParameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3269,"src":"4109:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3263,"name":"uint32","nodeType":"ElementaryTypeName","src":"4109:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"4108:8:14"},"scope":3319,"src":"4057:102:14","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3276,"nodeType":"Block","src":"4217:33:14","statements":[{"expression":{"id":3274,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"4234:9:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3273,"id":3275,"nodeType":"Return","src":"4227:16:14"}]},"functionSelector":"c19dd76b","id":3277,"implemented":true,"kind":"function","modifiers":[],"name":"getGasLane","nameLocation":"4174:10:14","nodeType":"FunctionDefinition","parameters":{"id":3270,"nodeType":"ParameterList","parameters":[],"src":"4184:2:14"},"returnParameters":{"id":3273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3272,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3277,"src":"4208:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3271,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4208:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4207:9:14"},"scope":3319,"src":"4165:85:14","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3289,"nodeType":"Block","src":"4322:50:14","statements":[{"expression":{"components":[{"hexValue":"3130","id":3284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4340:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},{"hexValue":"3330","id":3285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4344:2:14","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},{"id":3286,"name":"MAX_CHANCE_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"4348:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3287,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4339:26:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"functionReturnParameters":3283,"id":3288,"nodeType":"Return","src":"4332:33:14"}]},"functionSelector":"5dacf5f4","id":3290,"implemented":true,"kind":"function","modifiers":[],"name":"getChanceArray","nameLocation":"4265:14:14","nodeType":"FunctionDefinition","parameters":{"id":3278,"nodeType":"ParameterList","parameters":[],"src":"4279:2:14"},"returnParameters":{"id":3283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3282,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3290,"src":"4303:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":3279,"name":"uint256","nodeType":"ElementaryTypeName","src":"4303:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3281,"length":{"hexValue":"33","id":3280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4311:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"4303:10:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"src":"4302:19:14"},"scope":3319,"src":"4256:116:14","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":3297,"nodeType":"Block","src":"4430:33:14","statements":[{"expression":{"id":3295,"name":"i_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"4447:9:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3294,"id":3296,"nodeType":"Return","src":"4440:16:14"}]},"functionSelector":"7a5caab3","id":3298,"implemented":true,"kind":"function","modifiers":[],"name":"getMintFee","nameLocation":"4387:10:14","nodeType":"FunctionDefinition","parameters":{"id":3291,"nodeType":"ParameterList","parameters":[],"src":"4397:2:14"},"returnParameters":{"id":3294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3293,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3298,"src":"4421:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3292,"name":"uint256","nodeType":"ElementaryTypeName","src":"4421:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4420:9:14"},"scope":3319,"src":"4378:85:14","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3309,"nodeType":"Block","src":"4559:45:14","statements":[{"expression":{"baseExpression":{"id":3305,"name":"s_dogTokenUris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2977,"src":"4576:14:14","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":3307,"indexExpression":{"id":3306,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"4591:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4576:21:14","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3304,"id":3308,"nodeType":"Return","src":"4569:28:14"}]},"functionSelector":"3af25975","id":3310,"implemented":true,"kind":"function","modifiers":[],"name":"getDogTokenUris","nameLocation":"4478:15:14","nodeType":"FunctionDefinition","parameters":{"id":3301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3300,"mutability":"mutable","name":"index","nameLocation":"4511:5:14","nodeType":"VariableDeclaration","scope":3310,"src":"4503:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3299,"name":"uint256","nodeType":"ElementaryTypeName","src":"4503:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4493:29:14"},"returnParameters":{"id":3304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3303,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3310,"src":"4544:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3302,"name":"string","nodeType":"ElementaryTypeName","src":"4544:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4543:15:14"},"scope":3319,"src":"4469:135:14","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3317,"nodeType":"Block","src":"4667:38:14","statements":[{"expression":{"id":3315,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"4684:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3314,"id":3316,"nodeType":"Return","src":"4677:21:14"}]},"functionSelector":"6e02007d","id":3318,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenCounter","nameLocation":"4619:15:14","nodeType":"FunctionDefinition","parameters":{"id":3311,"nodeType":"ParameterList","parameters":[],"src":"4634:2:14"},"returnParameters":{"id":3314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3318,"src":"4658:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3312,"name":"uint256","nodeType":"ElementaryTypeName","src":"4658:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4657:9:14"},"scope":3319,"src":"4610:95:14","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3320,"src":"513:4194:14","usedErrors":[8,2934,2936,2938]}],"src":"33:4675:14"},"id":14}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":161,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_329":{"entryPoint":null,"id":329,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":289,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":364,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":415,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":548,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":579,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":589,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":643,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":697,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":751,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":805,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":852,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":899,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":904,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":909,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":914,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":919,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4093:15","statements":[{"body":{"nodeType":"YulBlock","src":"102:326:15","statements":[{"nodeType":"YulAssignment","src":"112:75:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"179:6:15"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"137:41:15"},"nodeType":"YulFunctionCall","src":"137:49:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"121:15:15"},"nodeType":"YulFunctionCall","src":"121:66:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"112:5:15"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"203:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"210:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"196:6:15"},"nodeType":"YulFunctionCall","src":"196:21:15"},"nodeType":"YulExpressionStatement","src":"196:21:15"},{"nodeType":"YulVariableDeclaration","src":"226:27:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"241:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"248:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"237:3:15"},"nodeType":"YulFunctionCall","src":"237:16:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"230:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"291:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"293:77:15"},"nodeType":"YulFunctionCall","src":"293:79:15"},"nodeType":"YulExpressionStatement","src":"293:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"272:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"277:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"268:3:15"},"nodeType":"YulFunctionCall","src":"268:16:15"},{"name":"end","nodeType":"YulIdentifier","src":"286:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"265:2:15"},"nodeType":"YulFunctionCall","src":"265:25:15"},"nodeType":"YulIf","src":"262:112:15"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"405:3:15"},{"name":"dst","nodeType":"YulIdentifier","src":"410:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"415:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"383:21:15"},"nodeType":"YulFunctionCall","src":"383:39:15"},"nodeType":"YulExpressionStatement","src":"383:39:15"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"75:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"88:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"96:5:15","type":""}],"src":"7:421:15"},{"body":{"nodeType":"YulBlock","src":"521:282:15","statements":[{"body":{"nodeType":"YulBlock","src":"570:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"572:77:15"},"nodeType":"YulFunctionCall","src":"572:79:15"},"nodeType":"YulExpressionStatement","src":"572:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"549:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"557:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"545:3:15"},"nodeType":"YulFunctionCall","src":"545:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"564:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"541:3:15"},"nodeType":"YulFunctionCall","src":"541:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"534:6:15"},"nodeType":"YulFunctionCall","src":"534:35:15"},"nodeType":"YulIf","src":"531:122:15"},{"nodeType":"YulVariableDeclaration","src":"662:27:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"682:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"676:5:15"},"nodeType":"YulFunctionCall","src":"676:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"666:6:15","type":""}]},{"nodeType":"YulAssignment","src":"698:99:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"770:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"778:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"766:3:15"},"nodeType":"YulFunctionCall","src":"766:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"793:3:15"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"707:58:15"},"nodeType":"YulFunctionCall","src":"707:90:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"698:5:15"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"499:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"507:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"515:5:15","type":""}],"src":"448:355:15"},{"body":{"nodeType":"YulBlock","src":"923:739:15","statements":[{"body":{"nodeType":"YulBlock","src":"969:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"971:77:15"},"nodeType":"YulFunctionCall","src":"971:79:15"},"nodeType":"YulExpressionStatement","src":"971:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"944:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"953:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"940:3:15"},"nodeType":"YulFunctionCall","src":"940:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"965:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"936:3:15"},"nodeType":"YulFunctionCall","src":"936:32:15"},"nodeType":"YulIf","src":"933:119:15"},{"nodeType":"YulBlock","src":"1062:291:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1077:38:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1101:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1112:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1097:3:15"},"nodeType":"YulFunctionCall","src":"1097:17:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1091:5:15"},"nodeType":"YulFunctionCall","src":"1091:24:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1081:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1162:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"1164:77:15"},"nodeType":"YulFunctionCall","src":"1164:79:15"},"nodeType":"YulExpressionStatement","src":"1164:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1134:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1142:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1131:2:15"},"nodeType":"YulFunctionCall","src":"1131:30:15"},"nodeType":"YulIf","src":"1128:117:15"},{"nodeType":"YulAssignment","src":"1259:84:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1315:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1326:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1311:3:15"},"nodeType":"YulFunctionCall","src":"1311:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1335:7:15"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1269:41:15"},"nodeType":"YulFunctionCall","src":"1269:74:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1259:6:15"}]}]},{"nodeType":"YulBlock","src":"1363:292:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1378:39:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1402:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1413:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1398:3:15"},"nodeType":"YulFunctionCall","src":"1398:18:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1392:5:15"},"nodeType":"YulFunctionCall","src":"1392:25:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1382:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1464:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"1466:77:15"},"nodeType":"YulFunctionCall","src":"1466:79:15"},"nodeType":"YulExpressionStatement","src":"1466:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1436:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1444:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1433:2:15"},"nodeType":"YulFunctionCall","src":"1433:30:15"},"nodeType":"YulIf","src":"1430:117:15"},{"nodeType":"YulAssignment","src":"1561:84:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1617:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1628:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1613:3:15"},"nodeType":"YulFunctionCall","src":"1613:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1637:7:15"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1571:41:15"},"nodeType":"YulFunctionCall","src":"1571:74:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1561:6:15"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"885:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"896:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"908:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"916:6:15","type":""}],"src":"809:853:15"},{"body":{"nodeType":"YulBlock","src":"1709:88:15","statements":[{"nodeType":"YulAssignment","src":"1719:30:15","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1729:18:15"},"nodeType":"YulFunctionCall","src":"1729:20:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1719:6:15"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1778:6:15"},{"name":"size","nodeType":"YulIdentifier","src":"1786:4:15"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1758:19:15"},"nodeType":"YulFunctionCall","src":"1758:33:15"},"nodeType":"YulExpressionStatement","src":"1758:33:15"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1693:4:15","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1702:6:15","type":""}],"src":"1668:129:15"},{"body":{"nodeType":"YulBlock","src":"1843:35:15","statements":[{"nodeType":"YulAssignment","src":"1853:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1869:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1863:5:15"},"nodeType":"YulFunctionCall","src":"1863:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1853:6:15"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1836:6:15","type":""}],"src":"1803:75:15"},{"body":{"nodeType":"YulBlock","src":"1951:241:15","statements":[{"body":{"nodeType":"YulBlock","src":"2056:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2058:16:15"},"nodeType":"YulFunctionCall","src":"2058:18:15"},"nodeType":"YulExpressionStatement","src":"2058:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2028:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2036:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2025:2:15"},"nodeType":"YulFunctionCall","src":"2025:30:15"},"nodeType":"YulIf","src":"2022:56:15"},{"nodeType":"YulAssignment","src":"2088:37:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2118:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2096:21:15"},"nodeType":"YulFunctionCall","src":"2096:29:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2088:4:15"}]},{"nodeType":"YulAssignment","src":"2162:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2174:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"2180:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2170:3:15"},"nodeType":"YulFunctionCall","src":"2170:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2162:4:15"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1935:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1946:4:15","type":""}],"src":"1884:308:15"},{"body":{"nodeType":"YulBlock","src":"2247:258:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2257:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2266:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2261:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2326:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2351:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"2356:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2347:3:15"},"nodeType":"YulFunctionCall","src":"2347:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2370:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"2375:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2366:3:15"},"nodeType":"YulFunctionCall","src":"2366:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2360:5:15"},"nodeType":"YulFunctionCall","src":"2360:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2340:6:15"},"nodeType":"YulFunctionCall","src":"2340:39:15"},"nodeType":"YulExpressionStatement","src":"2340:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2287:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"2290:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2284:2:15"},"nodeType":"YulFunctionCall","src":"2284:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2298:19:15","statements":[{"nodeType":"YulAssignment","src":"2300:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2309:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"2312:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2305:3:15"},"nodeType":"YulFunctionCall","src":"2305:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2300:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"2280:3:15","statements":[]},"src":"2276:113:15"},{"body":{"nodeType":"YulBlock","src":"2423:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2473:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"2478:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2469:3:15"},"nodeType":"YulFunctionCall","src":"2469:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"2487:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2462:6:15"},"nodeType":"YulFunctionCall","src":"2462:27:15"},"nodeType":"YulExpressionStatement","src":"2462:27:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2404:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"2407:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2401:2:15"},"nodeType":"YulFunctionCall","src":"2401:13:15"},"nodeType":"YulIf","src":"2398:101:15"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2229:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2234:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"2239:6:15","type":""}],"src":"2198:307:15"},{"body":{"nodeType":"YulBlock","src":"2562:269:15","statements":[{"nodeType":"YulAssignment","src":"2572:22:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2586:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"2592:1:15","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2582:3:15"},"nodeType":"YulFunctionCall","src":"2582:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2572:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"2603:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2633:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"2639:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2629:3:15"},"nodeType":"YulFunctionCall","src":"2629:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2607:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2680:51:15","statements":[{"nodeType":"YulAssignment","src":"2694:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2708:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2716:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2704:3:15"},"nodeType":"YulFunctionCall","src":"2704:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2694:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2660:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2653:6:15"},"nodeType":"YulFunctionCall","src":"2653:26:15"},"nodeType":"YulIf","src":"2650:81:15"},{"body":{"nodeType":"YulBlock","src":"2783:42:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"2797:16:15"},"nodeType":"YulFunctionCall","src":"2797:18:15"},"nodeType":"YulExpressionStatement","src":"2797:18:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2747:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2770:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2778:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2767:2:15"},"nodeType":"YulFunctionCall","src":"2767:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2744:2:15"},"nodeType":"YulFunctionCall","src":"2744:38:15"},"nodeType":"YulIf","src":"2741:84:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2546:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2555:6:15","type":""}],"src":"2511:320:15"},{"body":{"nodeType":"YulBlock","src":"2880:238:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2890:58:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2912:6:15"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2942:4:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2920:21:15"},"nodeType":"YulFunctionCall","src":"2920:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2908:3:15"},"nodeType":"YulFunctionCall","src":"2908:40:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2894:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3059:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3061:16:15"},"nodeType":"YulFunctionCall","src":"3061:18:15"},"nodeType":"YulExpressionStatement","src":"3061:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3002:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"3014:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2999:2:15"},"nodeType":"YulFunctionCall","src":"2999:34:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3038:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3050:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3035:2:15"},"nodeType":"YulFunctionCall","src":"3035:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2996:2:15"},"nodeType":"YulFunctionCall","src":"2996:62:15"},"nodeType":"YulIf","src":"2993:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3097:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3101:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3090:6:15"},"nodeType":"YulFunctionCall","src":"3090:22:15"},"nodeType":"YulExpressionStatement","src":"3090:22:15"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2866:6:15","type":""},{"name":"size","nodeType":"YulTypedName","src":"2874:4:15","type":""}],"src":"2837:281:15"},{"body":{"nodeType":"YulBlock","src":"3152:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3169:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3172:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3162:6:15"},"nodeType":"YulFunctionCall","src":"3162:88:15"},"nodeType":"YulExpressionStatement","src":"3162:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3266:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3269:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3259:6:15"},"nodeType":"YulFunctionCall","src":"3259:15:15"},"nodeType":"YulExpressionStatement","src":"3259:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3290:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3293:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3283:6:15"},"nodeType":"YulFunctionCall","src":"3283:15:15"},"nodeType":"YulExpressionStatement","src":"3283:15:15"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3124:180:15"},{"body":{"nodeType":"YulBlock","src":"3338:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3355:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3358:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3348:6:15"},"nodeType":"YulFunctionCall","src":"3348:88:15"},"nodeType":"YulExpressionStatement","src":"3348:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3452:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3455:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3445:6:15"},"nodeType":"YulFunctionCall","src":"3445:15:15"},"nodeType":"YulExpressionStatement","src":"3445:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3476:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3479:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3469:6:15"},"nodeType":"YulFunctionCall","src":"3469:15:15"},"nodeType":"YulExpressionStatement","src":"3469:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3310:180:15"},{"body":{"nodeType":"YulBlock","src":"3585:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3602:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3605:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3595:6:15"},"nodeType":"YulFunctionCall","src":"3595:12:15"},"nodeType":"YulExpressionStatement","src":"3595:12:15"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"3496:117:15"},{"body":{"nodeType":"YulBlock","src":"3708:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3725:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3728:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3718:6:15"},"nodeType":"YulFunctionCall","src":"3718:12:15"},"nodeType":"YulExpressionStatement","src":"3718:12:15"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"3619:117:15"},{"body":{"nodeType":"YulBlock","src":"3831:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3848:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3851:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3841:6:15"},"nodeType":"YulFunctionCall","src":"3841:12:15"},"nodeType":"YulExpressionStatement","src":"3841:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"3742:117:15"},{"body":{"nodeType":"YulBlock","src":"3954:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3971:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3974:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3964:6:15"},"nodeType":"YulFunctionCall","src":"3964:12:15"},"nodeType":"YulExpressionStatement","src":"3964:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"3865:117:15"},{"body":{"nodeType":"YulBlock","src":"4036:54:15","statements":[{"nodeType":"YulAssignment","src":"4046:38:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4064:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"4071:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4060:3:15"},"nodeType":"YulFunctionCall","src":"4060:14:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4080:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4076:3:15"},"nodeType":"YulFunctionCall","src":"4076:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4056:3:15"},"nodeType":"YulFunctionCall","src":"4056:28:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4046:6:15"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4019:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4029:6:15","type":""}],"src":"3988:102:15"}]},"contents":"{\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620026da380380620026da83398181016040528101906200003791906200019f565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b505050620003a8565b8280546200007f90620002b9565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b60006200013862000132846200024d565b62000224565b90508281526020810184848401111562000157576200015662000388565b5b6200016484828562000283565b509392505050565b600082601f83011262000184576200018362000383565b5b81516200019684826020860162000121565b91505092915050565b60008060408385031215620001b957620001b862000392565b5b600083015167ffffffffffffffff811115620001da57620001d96200038d565b5b620001e8858286016200016c565b925050602083015167ffffffffffffffff8111156200020c576200020b6200038d565b5b6200021a858286016200016c565b9150509250929050565b60006200023062000243565b90506200023e8282620002ef565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026b576200026a62000354565b5b620002768262000397565b9050602081019050919050565b60005b83811015620002a357808201518184015260208101905062000286565b83811115620002b3576000848401525b50505050565b60006002820490506001821680620002d257607f821691505b60208210811415620002e957620002e862000325565b5b50919050565b620002fa8262000397565b810181811067ffffffffffffffff821117156200031c576200031b62000354565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61232280620003b86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611863565b6102bc565b6040516100fb9190611b80565b60405180910390f35b61010c61039e565b6040516101199190611b9b565b60405180910390f35b61013c600480360381019061013791906118bd565b610430565b6040516101499190611b19565b60405180910390f35b61016c60048036038101906101679190611823565b610476565b005b6101886004803603810190610183919061170d565b61058e565b005b6101a4600480360381019061019f919061170d565b6105ee565b005b6101c060048036038101906101bb91906118bd565b61060e565b6040516101cd9190611b19565b60405180910390f35b6101f060048036038101906101eb91906116a0565b610695565b6040516101fd9190611cdd565b60405180910390f35b61020e61074d565b60405161021b9190611b9b565b60405180910390f35b61023e600480360381019061023991906117e3565b6107df565b005b61025a60048036038101906102559190611760565b6107f5565b005b610276600480360381019061027191906118bd565b610857565b6040516102839190611b9b565b60405180910390f35b6102a660048036038101906102a191906116cd565b6108bf565b6040516102b39190611b80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611ed1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611ed1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611bbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611c7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611c5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611ed1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611ed1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611bbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611af5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611c7d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611bfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611c1d565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611bfd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611c3d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611b80565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611bdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a2611fc1565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b611f63565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a9190611de7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a59190611d91565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b81526004016113269493929190611b34565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e9190611890565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390611bdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4611f63565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1611f63565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510611f63565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539611f63565b5b0492506008810190505b612710831061156957612710838161155f5761155e611f63565b5b0492506004810190505b6064831061158c576064838161158257611581611f63565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006115da6115d584611d1d565b611cf8565b9050828152602081018484840111156115f6576115f5611ff5565b5b611601848285611e8f565b509392505050565b60008135905061161881612290565b92915050565b60008135905061162d816122a7565b92915050565b600081359050611642816122be565b92915050565b600081519050611657816122be565b92915050565b600082601f83011261167257611671611ff0565b5b81356116828482602086016115c7565b91505092915050565b60008135905061169a816122d5565b92915050565b6000602082840312156116b6576116b5611fff565b5b60006116c484828501611609565b91505092915050565b600080604083850312156116e4576116e3611fff565b5b60006116f285828601611609565b925050602061170385828601611609565b9150509250929050565b60008060006060848603121561172657611725611fff565b5b600061173486828701611609565b935050602061174586828701611609565b92505060406117568682870161168b565b9150509250925092565b6000806000806080858703121561177a57611779611fff565b5b600061178887828801611609565b945050602061179987828801611609565b93505060406117aa8782880161168b565b925050606085013567ffffffffffffffff8111156117cb576117ca611ffa565b5b6117d78782880161165d565b91505092959194509250565b600080604083850312156117fa576117f9611fff565b5b600061180885828601611609565b92505060206118198582860161161e565b9150509250929050565b6000806040838503121561183a57611839611fff565b5b600061184885828601611609565b92505060206118598582860161168b565b9150509250929050565b60006020828403121561187957611878611fff565b5b600061188784828501611633565b91505092915050565b6000602082840312156118a6576118a5611fff565b5b60006118b484828501611648565b91505092915050565b6000602082840312156118d3576118d2611fff565b5b60006118e18482850161168b565b91505092915050565b6118f381611e1b565b82525050565b61190281611e2d565b82525050565b600061191382611d4e565b61191d8185611d64565b935061192d818560208601611e9e565b61193681612004565b840191505092915050565b600061194c82611d59565b6119568185611d75565b9350611966818560208601611e9e565b61196f81612004565b840191505092915050565b600061198582611d59565b61198f8185611d86565b935061199f818560208601611e9e565b80840191505092915050565b60006119b8602d83611d75565b91506119c382612015565b604082019050919050565b60006119db603283611d75565b91506119e682612064565b604082019050919050565b60006119fe602583611d75565b9150611a09826120b3565b604082019050919050565b6000611a21602483611d75565b9150611a2c82612102565b604082019050919050565b6000611a44601983611d75565b9150611a4f82612151565b602082019050919050565b6000611a67602983611d75565b9150611a728261217a565b604082019050919050565b6000611a8a601883611d75565b9150611a95826121c9565b602082019050919050565b6000611aad602183611d75565b9150611ab8826121f2565b604082019050919050565b6000611ad0603d83611d75565b9150611adb82612241565b604082019050919050565b611aef81611e85565b82525050565b6000611b01828561197a565b9150611b0d828461197a565b91508190509392505050565b6000602082019050611b2e60008301846118ea565b92915050565b6000608082019050611b4960008301876118ea565b611b5660208301866118ea565b611b636040830185611ae6565b8181036060830152611b758184611908565b905095945050505050565b6000602082019050611b9560008301846118f9565b92915050565b60006020820190508181036000830152611bb58184611941565b905092915050565b60006020820190508181036000830152611bd6816119ab565b9050919050565b60006020820190508181036000830152611bf6816119ce565b9050919050565b60006020820190508181036000830152611c16816119f1565b9050919050565b60006020820190508181036000830152611c3681611a14565b9050919050565b60006020820190508181036000830152611c5681611a37565b9050919050565b60006020820190508181036000830152611c7681611a5a565b9050919050565b60006020820190508181036000830152611c9681611a7d565b9050919050565b60006020820190508181036000830152611cb681611aa0565b9050919050565b60006020820190508181036000830152611cd681611ac3565b9050919050565b6000602082019050611cf26000830184611ae6565b92915050565b6000611d02611d13565b9050611d0e8282611f03565b919050565b6000604051905090565b600067ffffffffffffffff821115611d3857611d37611fc1565b5b611d4182612004565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611d9c82611e85565b9150611da783611e85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ddc57611ddb611f34565b5b828201905092915050565b6000611df282611e85565b9150611dfd83611e85565b925082821015611e1057611e0f611f34565b5b828203905092915050565b6000611e2682611e65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611ebc578082015181840152602081019050611ea1565b83811115611ecb576000848401525b50505050565b60006002820490506001821680611ee957607f821691505b60208210811415611efd57611efc611f92565b5b50919050565b611f0c82612004565b810181811067ffffffffffffffff82111715611f2b57611f2a611fc1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61229981611e1b565b81146122a457600080fd5b50565b6122b081611e2d565b81146122bb57600080fd5b50565b6122c781611e39565b81146122d257600080fd5b50565b6122de81611e85565b81146122e957600080fd5b5056fea2646970667358221220d8ee7fada685f0b32f66df66d6451cea01150b5c19624f410f83018282edc5bb64736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x26DA CODESIZE SUB DUP1 PUSH3 0x26DA DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x19F JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x3A8 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x2B9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x138 PUSH3 0x132 DUP5 PUSH3 0x24D JUMP JUMPDEST PUSH3 0x224 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x157 JUMPI PUSH3 0x156 PUSH3 0x388 JUMP JUMPDEST JUMPDEST PUSH3 0x164 DUP5 DUP3 DUP6 PUSH3 0x283 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x184 JUMPI PUSH3 0x183 PUSH3 0x383 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x196 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x121 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1B9 JUMPI PUSH3 0x1B8 PUSH3 0x392 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x1DA JUMPI PUSH3 0x1D9 PUSH3 0x38D JUMP JUMPDEST JUMPDEST PUSH3 0x1E8 DUP6 DUP3 DUP7 ADD PUSH3 0x16C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x20C JUMPI PUSH3 0x20B PUSH3 0x38D JUMP JUMPDEST JUMPDEST PUSH3 0x21A DUP6 DUP3 DUP7 ADD PUSH3 0x16C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x230 PUSH3 0x243 JUMP JUMPDEST SWAP1 POP PUSH3 0x23E DUP3 DUP3 PUSH3 0x2EF JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x26B JUMPI PUSH3 0x26A PUSH3 0x354 JUMP JUMPDEST JUMPDEST PUSH3 0x276 DUP3 PUSH3 0x397 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x2A3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x286 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x2B3 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2D2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x2E9 JUMPI PUSH3 0x2E8 PUSH3 0x325 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2FA DUP3 PUSH3 0x397 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x31C JUMPI PUSH3 0x31B PUSH3 0x354 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2322 DUP1 PUSH3 0x3B8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1863 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1823 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x16A0 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x16CD JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x1D91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x1890 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DA PUSH2 0x15D5 DUP5 PUSH2 0x1D1D JUMP JUMPDEST PUSH2 0x1CF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x15F6 JUMPI PUSH2 0x15F5 PUSH2 0x1FF5 JUMP JUMPDEST JUMPDEST PUSH2 0x1601 DUP5 DUP3 DUP6 PUSH2 0x1E8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1618 DUP2 PUSH2 0x2290 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x22A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1642 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1657 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1672 JUMPI PUSH2 0x1671 PUSH2 0x1FF0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1682 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x15C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x169A DUP2 PUSH2 0x22D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x16B5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16C4 DUP5 DUP3 DUP6 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16E4 JUMPI PUSH2 0x16E3 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16F2 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1703 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1726 JUMPI PUSH2 0x1725 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1734 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1745 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1756 DUP7 DUP3 DUP8 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x177A JUMPI PUSH2 0x1779 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1788 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1799 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x17AA DUP8 DUP3 DUP9 ADD PUSH2 0x168B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17CB JUMPI PUSH2 0x17CA PUSH2 0x1FFA JUMP JUMPDEST JUMPDEST PUSH2 0x17D7 DUP8 DUP3 DUP9 ADD PUSH2 0x165D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17FA JUMPI PUSH2 0x17F9 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1808 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1819 DUP6 DUP3 DUP7 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x183A JUMPI PUSH2 0x1839 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1848 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1859 DUP6 DUP3 DUP7 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1879 JUMPI PUSH2 0x1878 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1887 DUP5 DUP3 DUP6 ADD PUSH2 0x1633 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A6 JUMPI PUSH2 0x18A5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18D3 JUMPI PUSH2 0x18D2 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18E1 DUP5 DUP3 DUP6 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18F3 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1902 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1913 DUP3 PUSH2 0x1D4E JUMP JUMPDEST PUSH2 0x191D DUP2 DUP6 PUSH2 0x1D64 JUMP JUMPDEST SWAP4 POP PUSH2 0x192D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1936 DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x194C DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x1956 DUP2 DUP6 PUSH2 0x1D75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1966 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x196F DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1985 DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x198F DUP2 DUP6 PUSH2 0x1D86 JUMP JUMPDEST SWAP4 POP PUSH2 0x199F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B8 PUSH1 0x2D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19C3 DUP3 PUSH2 0x2015 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB PUSH1 0x32 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19E6 DUP3 PUSH2 0x2064 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FE PUSH1 0x25 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A09 DUP3 PUSH2 0x20B3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A21 PUSH1 0x24 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2C DUP3 PUSH2 0x2102 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A44 PUSH1 0x19 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A4F DUP3 PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A67 PUSH1 0x29 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A72 DUP3 PUSH2 0x217A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8A PUSH1 0x18 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A95 DUP3 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAD PUSH1 0x21 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB8 DUP3 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD0 PUSH1 0x3D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ADB DUP3 PUSH2 0x2241 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AEF DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B01 DUP3 DUP6 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0D DUP3 DUP5 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1B49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1AE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1B75 DUP2 DUP5 PUSH2 0x1908 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB5 DUP2 DUP5 PUSH2 0x1941 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BD6 DUP2 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BF6 DUP2 PUSH2 0x19CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C16 DUP2 PUSH2 0x19F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C36 DUP2 PUSH2 0x1A14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C56 DUP2 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1A5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C96 DUP2 PUSH2 0x1A7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB6 DUP2 PUSH2 0x1AA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D02 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D0E DUP3 DUP3 PUSH2 0x1F03 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x1D37 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH2 0x1D41 DUP3 PUSH2 0x2004 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9C DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA7 DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1DDC JUMPI PUSH2 0x1DDB PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DF2 DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DFD DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1E10 JUMPI PUSH2 0x1E0F PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E26 DUP3 PUSH2 0x1E65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1EA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1EE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1EFD JUMPI PUSH2 0x1EFC PUSH2 0x1F92 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F0C DUP3 PUSH2 0x2004 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F2B JUMPI PUSH2 0x1F2A PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2299 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP2 EQ PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22B0 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP2 EQ PUSH2 0x22BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22C7 DUP2 PUSH2 0x1E39 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22DE DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP2 EQ PUSH2 0x22E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xEE PUSH32 0xADA685F0B32F66DF66D6451CEA01150B5C19624F410F83018282EDC5BB64736F PUSH13 0x63430008070033000000000000 ","sourceMap":"628:16327:3:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;628:16327;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:421:15:-;96:5;121:66;137:49;179:6;137:49;:::i;:::-;121:66;:::i;:::-;112:75;;210:6;203:5;196:21;248:4;241:5;237:16;286:3;277:6;272:3;268:16;265:25;262:112;;;293:79;;:::i;:::-;262:112;383:39;415:6;410:3;405;383:39;:::i;:::-;102:326;7:421;;;;;:::o;448:355::-;515:5;564:3;557:4;549:6;545:17;541:27;531:122;;572:79;;:::i;:::-;531:122;682:6;676:13;707:90;793:3;785:6;778:4;770:6;766:17;707:90;:::i;:::-;698:99;;521:282;448:355;;;;:::o;809:853::-;908:6;916;965:2;953:9;944:7;940:23;936:32;933:119;;;971:79;;:::i;:::-;933:119;1112:1;1101:9;1097:17;1091:24;1142:18;1134:6;1131:30;1128:117;;;1164:79;;:::i;:::-;1128:117;1269:74;1335:7;1326:6;1315:9;1311:22;1269:74;:::i;:::-;1259:84;;1062:291;1413:2;1402:9;1398:18;1392:25;1444:18;1436:6;1433:30;1430:117;;;1466:79;;:::i;:::-;1430:117;1571:74;1637:7;1628:6;1617:9;1613:22;1571:74;:::i;:::-;1561:84;;1363:292;809:853;;;;;:::o;1668:129::-;1702:6;1729:20;;:::i;:::-;1719:30;;1758:33;1786:4;1778:6;1758:33;:::i;:::-;1668:129;;;:::o;1803:75::-;1836:6;1869:2;1863:9;1853:19;;1803:75;:::o;1884:308::-;1946:4;2036:18;2028:6;2025:30;2022:56;;;2058:18;;:::i;:::-;2022:56;2096:29;2118:6;2096:29;:::i;:::-;2088:37;;2180:4;2174;2170:15;2162:23;;1884:308;;;:::o;2198:307::-;2266:1;2276:113;2290:6;2287:1;2284:13;2276:113;;;2375:1;2370:3;2366:11;2360:18;2356:1;2351:3;2347:11;2340:39;2312:2;2309:1;2305:10;2300:15;;2276:113;;;2407:6;2404:1;2401:13;2398:101;;;2487:1;2478:6;2473:3;2469:16;2462:27;2398:101;2247:258;2198:307;;;:::o;2511:320::-;2555:6;2592:1;2586:4;2582:12;2572:22;;2639:1;2633:4;2629:12;2660:18;2650:81;;2716:4;2708:6;2704:17;2694:27;;2650:81;2778:2;2770:6;2767:14;2747:18;2744:38;2741:84;;;2797:18;;:::i;:::-;2741:84;2562:269;2511:320;;;:::o;2837:281::-;2920:27;2942:4;2920:27;:::i;:::-;2912:6;2908:40;3050:6;3038:10;3035:22;3014:18;3002:10;2999:34;2996:62;2993:88;;;3061:18;;:::i;:::-;2993:88;3101:10;3097:2;3090:22;2880:238;2837:281;;:::o;3124:180::-;3172:77;3169:1;3162:88;3269:4;3266:1;3259:15;3293:4;3290:1;3283:15;3310:180;3358:77;3355:1;3348:88;3455:4;3452:1;3445:15;3479:4;3476:1;3469:15;3496:117;3605:1;3602;3595:12;3619:117;3728:1;3725;3718:12;3742:117;3851:1;3848;3841:12;3865:117;3974:1;3971;3964:12;3988:102;4029:6;4080:2;4076:7;4071:2;4064:5;4060:14;4056:28;4046:38;;3988:102;;;:::o;628:16327:3:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1210":{"entryPoint":4788,"id":1210,"parameterSlots":4,"returnSlots":0},"@_approve_1043":{"entryPoint":2576,"id":1043,"parameterSlots":2,"returnSlots":0},"@_baseURI_480":{"entryPoint":4190,"id":480,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1197":{"entryPoint":4494,"id":1197,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1151":{"entryPoint":4794,"id":1151,"parameterSlots":4,"returnSlots":1},"@_exists_712":{"entryPoint":4429,"id":712,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_746":{"entryPoint":2761,"id":746,"parameterSlots":2,"returnSlots":1},"@_msgSender_1839":{"entryPoint":2568,"id":1839,"parameterSlots":0,"returnSlots":1},"@_ownerOf_694":{"entryPoint":3672,"id":694,"parameterSlots":1,"returnSlots":1},"@_requireMinted_1089":{"entryPoint":2493,"id":1089,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_681":{"entryPoint":4098,"id":681,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1075":{"entryPoint":3733,"id":1075,"parameterSlots":3,"returnSlots":0},"@_transfer_1019":{"entryPoint":2910,"id":1019,"parameterSlots":3,"returnSlots":0},"@approve_523":{"entryPoint":1142,"id":523,"parameterSlots":2,"returnSlots":0},"@balanceOf_384":{"entryPoint":1685,"id":384,"parameterSlots":1,"returnSlots":1},"@getApproved_541":{"entryPoint":1072,"id":541,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_576":{"entryPoint":2239,"id":576,"parameterSlots":2,"returnSlots":1},"@isContract_1515":{"entryPoint":5540,"id":1515,"parameterSlots":1,"returnSlots":1},"@log10_2762":{"entryPoint":5201,"id":2762,"parameterSlots":1,"returnSlots":1},"@name_422":{"entryPoint":926,"id":422,"parameterSlots":0,"returnSlots":1},"@ownerOf_412":{"entryPoint":1550,"id":412,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_622":{"entryPoint":1518,"id":622,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_652":{"entryPoint":2037,"id":652,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_558":{"entryPoint":2015,"id":558,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2047":{"entryPoint":2387,"id":2047,"parameterSlots":1,"returnSlots":1},"@supportsInterface_360":{"entryPoint":700,"id":360,"parameterSlots":1,"returnSlots":1},"@symbol_432":{"entryPoint":1869,"id":432,"parameterSlots":0,"returnSlots":1},"@toString_1907":{"entryPoint":4213,"id":1907,"parameterSlots":1,"returnSlots":1},"@tokenURI_471":{"entryPoint":2135,"id":471,"parameterSlots":1,"returnSlots":1},"@transferFrom_603":{"entryPoint":1422,"id":603,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":5575,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5641,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":5662,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":5704,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":5725,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5771,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5792,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":5837,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5901,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":5984,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6115,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6179,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6243,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":6288,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6333,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6378,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6393,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":6408,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":6465,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":6522,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":6571,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":6606,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":6641,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":6676,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":6711,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":6746,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":6781,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":6816,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":6851,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6886,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6901,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6937,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6964,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":7040,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7067,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7101,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7133,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7165,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7197,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7229,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7261,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7293,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7357,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":7389,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7416,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":7443,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":7453,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":7502,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":7513,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":7524,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":7541,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7558,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7569,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7655,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":7707,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":7725,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":7737,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":7781,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":7813,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":7823,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":7838,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7889,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7939,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":7988,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8035,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":8082,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":8129,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":8176,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":8181,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":8186,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8191,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":8196,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":8213,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8292,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":8371,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":8450,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":8529,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":8570,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":8649,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":8690,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":8769,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":8848,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":8871,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8894,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":8917,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23861:15","statements":[{"body":{"nodeType":"YulBlock","src":"90:327:15","statements":[{"nodeType":"YulAssignment","src":"100:74:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:15"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:15"},"nodeType":"YulFunctionCall","src":"125:48:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:15"},"nodeType":"YulFunctionCall","src":"109:65:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:15"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:15"},"nodeType":"YulFunctionCall","src":"183:21:15"},"nodeType":"YulExpressionStatement","src":"183:21:15"},{"nodeType":"YulVariableDeclaration","src":"213:27:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:15"},"nodeType":"YulFunctionCall","src":"224:16:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"280:77:15"},"nodeType":"YulFunctionCall","src":"280:79:15"},"nodeType":"YulExpressionStatement","src":"280:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:15"},"nodeType":"YulFunctionCall","src":"255:16:15"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:15"},"nodeType":"YulFunctionCall","src":"252:25:15"},"nodeType":"YulIf","src":"249:112:15"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"394:3:15"},{"name":"dst","nodeType":"YulIdentifier","src":"399:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"404:6:15"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"370:23:15"},"nodeType":"YulFunctionCall","src":"370:41:15"},"nodeType":"YulExpressionStatement","src":"370:41:15"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:15","type":""}],"src":"7:410:15"},{"body":{"nodeType":"YulBlock","src":"475:87:15","statements":[{"nodeType":"YulAssignment","src":"485:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"507:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"494:12:15"},"nodeType":"YulFunctionCall","src":"494:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"485:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:15"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"523:26:15"},"nodeType":"YulFunctionCall","src":"523:33:15"},"nodeType":"YulExpressionStatement","src":"523:33:15"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"453:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"461:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"469:5:15","type":""}],"src":"423:139:15"},{"body":{"nodeType":"YulBlock","src":"617:84:15","statements":[{"nodeType":"YulAssignment","src":"627:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"649:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"636:12:15"},"nodeType":"YulFunctionCall","src":"636:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"627:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"689:5:15"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"665:23:15"},"nodeType":"YulFunctionCall","src":"665:30:15"},"nodeType":"YulExpressionStatement","src":"665:30:15"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"595:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"603:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"611:5:15","type":""}],"src":"568:133:15"},{"body":{"nodeType":"YulBlock","src":"758:86:15","statements":[{"nodeType":"YulAssignment","src":"768:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"790:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"777:12:15"},"nodeType":"YulFunctionCall","src":"777:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"768:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"832:5:15"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"806:25:15"},"nodeType":"YulFunctionCall","src":"806:32:15"},"nodeType":"YulExpressionStatement","src":"806:32:15"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"736:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"744:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"752:5:15","type":""}],"src":"707:137:15"},{"body":{"nodeType":"YulBlock","src":"912:79:15","statements":[{"nodeType":"YulAssignment","src":"922:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"937:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"931:5:15"},"nodeType":"YulFunctionCall","src":"931:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"922:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"979:5:15"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"953:25:15"},"nodeType":"YulFunctionCall","src":"953:32:15"},"nodeType":"YulExpressionStatement","src":"953:32:15"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"890:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"898:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"906:5:15","type":""}],"src":"850:141:15"},{"body":{"nodeType":"YulBlock","src":"1071:277:15","statements":[{"body":{"nodeType":"YulBlock","src":"1120:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1122:77:15"},"nodeType":"YulFunctionCall","src":"1122:79:15"},"nodeType":"YulExpressionStatement","src":"1122:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1099:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1095:3:15"},"nodeType":"YulFunctionCall","src":"1095:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"1114:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1091:3:15"},"nodeType":"YulFunctionCall","src":"1091:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1084:6:15"},"nodeType":"YulFunctionCall","src":"1084:35:15"},"nodeType":"YulIf","src":"1081:122:15"},{"nodeType":"YulVariableDeclaration","src":"1212:34:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1239:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1226:12:15"},"nodeType":"YulFunctionCall","src":"1226:20:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1216:6:15","type":""}]},{"nodeType":"YulAssignment","src":"1255:87:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1315:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1323:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1311:3:15"},"nodeType":"YulFunctionCall","src":"1311:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"1330:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"1338:3:15"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1264:46:15"},"nodeType":"YulFunctionCall","src":"1264:78:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1255:5:15"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1049:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1057:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1065:5:15","type":""}],"src":"1010:338:15"},{"body":{"nodeType":"YulBlock","src":"1406:87:15","statements":[{"nodeType":"YulAssignment","src":"1416:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1438:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1425:12:15"},"nodeType":"YulFunctionCall","src":"1425:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1416:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1481:5:15"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1454:26:15"},"nodeType":"YulFunctionCall","src":"1454:33:15"},"nodeType":"YulExpressionStatement","src":"1454:33:15"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1384:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1392:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1400:5:15","type":""}],"src":"1354:139:15"},{"body":{"nodeType":"YulBlock","src":"1565:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"1611:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1613:77:15"},"nodeType":"YulFunctionCall","src":"1613:79:15"},"nodeType":"YulExpressionStatement","src":"1613:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1586:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1595:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1582:3:15"},"nodeType":"YulFunctionCall","src":"1582:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1607:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1578:3:15"},"nodeType":"YulFunctionCall","src":"1578:32:15"},"nodeType":"YulIf","src":"1575:119:15"},{"nodeType":"YulBlock","src":"1704:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1719:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1733:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1723:6:15","type":""}]},{"nodeType":"YulAssignment","src":"1748:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1783:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1794:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1779:3:15"},"nodeType":"YulFunctionCall","src":"1779:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1803:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1758:20:15"},"nodeType":"YulFunctionCall","src":"1758:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1748:6:15"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1535:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1546:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1558:6:15","type":""}],"src":"1499:329:15"},{"body":{"nodeType":"YulBlock","src":"1917:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"1963:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1965:77:15"},"nodeType":"YulFunctionCall","src":"1965:79:15"},"nodeType":"YulExpressionStatement","src":"1965:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1938:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1947:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1934:3:15"},"nodeType":"YulFunctionCall","src":"1934:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1959:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1930:3:15"},"nodeType":"YulFunctionCall","src":"1930:32:15"},"nodeType":"YulIf","src":"1927:119:15"},{"nodeType":"YulBlock","src":"2056:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2071:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2085:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2075:6:15","type":""}]},{"nodeType":"YulAssignment","src":"2100:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2135:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"2146:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2131:3:15"},"nodeType":"YulFunctionCall","src":"2131:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2155:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2110:20:15"},"nodeType":"YulFunctionCall","src":"2110:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2100:6:15"}]}]},{"nodeType":"YulBlock","src":"2183:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2198:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2212:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2202:6:15","type":""}]},{"nodeType":"YulAssignment","src":"2228:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2263:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"2274:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2259:3:15"},"nodeType":"YulFunctionCall","src":"2259:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2283:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2238:20:15"},"nodeType":"YulFunctionCall","src":"2238:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2228:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1879:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1890:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1902:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1910:6:15","type":""}],"src":"1834:474:15"},{"body":{"nodeType":"YulBlock","src":"2414:519:15","statements":[{"body":{"nodeType":"YulBlock","src":"2460:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2462:77:15"},"nodeType":"YulFunctionCall","src":"2462:79:15"},"nodeType":"YulExpressionStatement","src":"2462:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2435:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2444:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2431:3:15"},"nodeType":"YulFunctionCall","src":"2431:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"2456:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2427:3:15"},"nodeType":"YulFunctionCall","src":"2427:32:15"},"nodeType":"YulIf","src":"2424:119:15"},{"nodeType":"YulBlock","src":"2553:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2568:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2582:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2572:6:15","type":""}]},{"nodeType":"YulAssignment","src":"2597:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2632:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"2643:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2628:3:15"},"nodeType":"YulFunctionCall","src":"2628:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2652:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2607:20:15"},"nodeType":"YulFunctionCall","src":"2607:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2597:6:15"}]}]},{"nodeType":"YulBlock","src":"2680:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2695:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2709:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2699:6:15","type":""}]},{"nodeType":"YulAssignment","src":"2725:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2760:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"2771:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2756:3:15"},"nodeType":"YulFunctionCall","src":"2756:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2780:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2735:20:15"},"nodeType":"YulFunctionCall","src":"2735:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2725:6:15"}]}]},{"nodeType":"YulBlock","src":"2808:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2823:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2837:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2827:6:15","type":""}]},{"nodeType":"YulAssignment","src":"2853:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2888:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2884:3:15"},"nodeType":"YulFunctionCall","src":"2884:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2908:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2863:20:15"},"nodeType":"YulFunctionCall","src":"2863:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2853:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2368:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2379:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2391:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2399:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2407:6:15","type":""}],"src":"2314:619:15"},{"body":{"nodeType":"YulBlock","src":"3065:817:15","statements":[{"body":{"nodeType":"YulBlock","src":"3112:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3114:77:15"},"nodeType":"YulFunctionCall","src":"3114:79:15"},"nodeType":"YulExpressionStatement","src":"3114:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3086:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3095:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3082:3:15"},"nodeType":"YulFunctionCall","src":"3082:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3107:3:15","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3078:3:15"},"nodeType":"YulFunctionCall","src":"3078:33:15"},"nodeType":"YulIf","src":"3075:120:15"},{"nodeType":"YulBlock","src":"3205:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3220:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3234:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3224:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3249:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3284:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3295:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3280:3:15"},"nodeType":"YulFunctionCall","src":"3280:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3304:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3259:20:15"},"nodeType":"YulFunctionCall","src":"3259:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3249:6:15"}]}]},{"nodeType":"YulBlock","src":"3332:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3347:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3361:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3351:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3377:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3412:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3423:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3408:3:15"},"nodeType":"YulFunctionCall","src":"3408:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3432:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3387:20:15"},"nodeType":"YulFunctionCall","src":"3387:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3377:6:15"}]}]},{"nodeType":"YulBlock","src":"3460:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3475:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3489:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3479:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3505:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3540:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3551:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3536:3:15"},"nodeType":"YulFunctionCall","src":"3536:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3560:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3515:20:15"},"nodeType":"YulFunctionCall","src":"3515:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3505:6:15"}]}]},{"nodeType":"YulBlock","src":"3588:287:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3603:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3634:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3645:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3630:3:15"},"nodeType":"YulFunctionCall","src":"3630:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3617:12:15"},"nodeType":"YulFunctionCall","src":"3617:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3607:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3696:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3698:77:15"},"nodeType":"YulFunctionCall","src":"3698:79:15"},"nodeType":"YulExpressionStatement","src":"3698:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3668:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"3676:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3665:2:15"},"nodeType":"YulFunctionCall","src":"3665:30:15"},"nodeType":"YulIf","src":"3662:117:15"},{"nodeType":"YulAssignment","src":"3793:72:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3837:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3848:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3833:3:15"},"nodeType":"YulFunctionCall","src":"3833:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3857:7:15"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3803:29:15"},"nodeType":"YulFunctionCall","src":"3803:62:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3793:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3011:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3022:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3034:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3042:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3050:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3058:6:15","type":""}],"src":"2939:943:15"},{"body":{"nodeType":"YulBlock","src":"3968:388:15","statements":[{"body":{"nodeType":"YulBlock","src":"4014:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4016:77:15"},"nodeType":"YulFunctionCall","src":"4016:79:15"},"nodeType":"YulExpressionStatement","src":"4016:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3989:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3998:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3985:3:15"},"nodeType":"YulFunctionCall","src":"3985:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4010:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3981:3:15"},"nodeType":"YulFunctionCall","src":"3981:32:15"},"nodeType":"YulIf","src":"3978:119:15"},{"nodeType":"YulBlock","src":"4107:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4122:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4136:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4126:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4151:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4186:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4197:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4182:3:15"},"nodeType":"YulFunctionCall","src":"4182:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4206:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4161:20:15"},"nodeType":"YulFunctionCall","src":"4161:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4151:6:15"}]}]},{"nodeType":"YulBlock","src":"4234:115:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4249:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4263:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4253:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4279:60:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4311:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4322:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4307:3:15"},"nodeType":"YulFunctionCall","src":"4307:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4331:7:15"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"4289:17:15"},"nodeType":"YulFunctionCall","src":"4289:50:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4279:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3930:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3941:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3953:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3961:6:15","type":""}],"src":"3888:468:15"},{"body":{"nodeType":"YulBlock","src":"4445:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"4491:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4493:77:15"},"nodeType":"YulFunctionCall","src":"4493:79:15"},"nodeType":"YulExpressionStatement","src":"4493:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4466:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4475:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4462:3:15"},"nodeType":"YulFunctionCall","src":"4462:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4487:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4458:3:15"},"nodeType":"YulFunctionCall","src":"4458:32:15"},"nodeType":"YulIf","src":"4455:119:15"},{"nodeType":"YulBlock","src":"4584:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4599:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4613:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4603:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4628:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4663:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4674:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4659:3:15"},"nodeType":"YulFunctionCall","src":"4659:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4683:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4638:20:15"},"nodeType":"YulFunctionCall","src":"4638:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4628:6:15"}]}]},{"nodeType":"YulBlock","src":"4711:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4726:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4740:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4730:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4756:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4791:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4802:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4787:3:15"},"nodeType":"YulFunctionCall","src":"4787:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4811:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4766:20:15"},"nodeType":"YulFunctionCall","src":"4766:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4756:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4407:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4418:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4430:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4438:6:15","type":""}],"src":"4362:474:15"},{"body":{"nodeType":"YulBlock","src":"4907:262:15","statements":[{"body":{"nodeType":"YulBlock","src":"4953:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4955:77:15"},"nodeType":"YulFunctionCall","src":"4955:79:15"},"nodeType":"YulExpressionStatement","src":"4955:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4928:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4937:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4924:3:15"},"nodeType":"YulFunctionCall","src":"4924:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4949:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4920:3:15"},"nodeType":"YulFunctionCall","src":"4920:32:15"},"nodeType":"YulIf","src":"4917:119:15"},{"nodeType":"YulBlock","src":"5046:116:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5061:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5075:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5065:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5090:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5124:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5135:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5120:3:15"},"nodeType":"YulFunctionCall","src":"5120:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5144:7:15"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"5100:19:15"},"nodeType":"YulFunctionCall","src":"5100:52:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5090:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4877:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4888:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4900:6:15","type":""}],"src":"4842:327:15"},{"body":{"nodeType":"YulBlock","src":"5251:273:15","statements":[{"body":{"nodeType":"YulBlock","src":"5297:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5299:77:15"},"nodeType":"YulFunctionCall","src":"5299:79:15"},"nodeType":"YulExpressionStatement","src":"5299:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5272:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"5281:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5268:3:15"},"nodeType":"YulFunctionCall","src":"5268:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"5293:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5264:3:15"},"nodeType":"YulFunctionCall","src":"5264:32:15"},"nodeType":"YulIf","src":"5261:119:15"},{"nodeType":"YulBlock","src":"5390:127:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5405:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5419:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5409:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5434:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5479:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5490:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5475:3:15"},"nodeType":"YulFunctionCall","src":"5475:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5499:7:15"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"5444:30:15"},"nodeType":"YulFunctionCall","src":"5444:63:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5434:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5221:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5232:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5244:6:15","type":""}],"src":"5175:349:15"},{"body":{"nodeType":"YulBlock","src":"5596:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"5642:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5644:77:15"},"nodeType":"YulFunctionCall","src":"5644:79:15"},"nodeType":"YulExpressionStatement","src":"5644:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5617:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"5626:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5613:3:15"},"nodeType":"YulFunctionCall","src":"5613:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"5638:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5609:3:15"},"nodeType":"YulFunctionCall","src":"5609:32:15"},"nodeType":"YulIf","src":"5606:119:15"},{"nodeType":"YulBlock","src":"5735:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5750:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5764:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5754:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5779:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5814:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5825:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5810:3:15"},"nodeType":"YulFunctionCall","src":"5810:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5834:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5789:20:15"},"nodeType":"YulFunctionCall","src":"5789:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5779:6:15"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5566:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5577:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5589:6:15","type":""}],"src":"5530:329:15"},{"body":{"nodeType":"YulBlock","src":"5930:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5947:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5970:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5952:17:15"},"nodeType":"YulFunctionCall","src":"5952:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5940:6:15"},"nodeType":"YulFunctionCall","src":"5940:37:15"},"nodeType":"YulExpressionStatement","src":"5940:37:15"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5918:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5925:3:15","type":""}],"src":"5865:118:15"},{"body":{"nodeType":"YulBlock","src":"6048:50:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6065:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6085:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6070:14:15"},"nodeType":"YulFunctionCall","src":"6070:21:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6058:6:15"},"nodeType":"YulFunctionCall","src":"6058:34:15"},"nodeType":"YulExpressionStatement","src":"6058:34:15"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6036:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6043:3:15","type":""}],"src":"5989:109:15"},{"body":{"nodeType":"YulBlock","src":"6194:270:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6204:52:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6250:5:15"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"6218:31:15"},"nodeType":"YulFunctionCall","src":"6218:38:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6208:6:15","type":""}]},{"nodeType":"YulAssignment","src":"6265:77:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6330:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"6335:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6272:57:15"},"nodeType":"YulFunctionCall","src":"6272:70:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6265:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6377:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"6384:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6373:3:15"},"nodeType":"YulFunctionCall","src":"6373:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"6391:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"6396:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6351:21:15"},"nodeType":"YulFunctionCall","src":"6351:52:15"},"nodeType":"YulExpressionStatement","src":"6351:52:15"},{"nodeType":"YulAssignment","src":"6412:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6423:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6450:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6428:21:15"},"nodeType":"YulFunctionCall","src":"6428:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6419:3:15"},"nodeType":"YulFunctionCall","src":"6419:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6412:3:15"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6175:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6182:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6190:3:15","type":""}],"src":"6104:360:15"},{"body":{"nodeType":"YulBlock","src":"6562:272:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6572:53:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6619:5:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6586:32:15"},"nodeType":"YulFunctionCall","src":"6586:39:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6576:6:15","type":""}]},{"nodeType":"YulAssignment","src":"6634:78:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6700:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"6705:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6641:58:15"},"nodeType":"YulFunctionCall","src":"6641:71:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6634:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6747:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"6754:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6743:3:15"},"nodeType":"YulFunctionCall","src":"6743:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"6761:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"6766:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"6721:21:15"},"nodeType":"YulFunctionCall","src":"6721:52:15"},"nodeType":"YulExpressionStatement","src":"6721:52:15"},{"nodeType":"YulAssignment","src":"6782:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6793:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6820:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6798:21:15"},"nodeType":"YulFunctionCall","src":"6798:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6789:3:15"},"nodeType":"YulFunctionCall","src":"6789:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6782:3:15"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6543:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6550:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6558:3:15","type":""}],"src":"6470:364:15"},{"body":{"nodeType":"YulBlock","src":"6950:267:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6960:53:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7007:5:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"6974:32:15"},"nodeType":"YulFunctionCall","src":"6974:39:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6964:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7022:96:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7106:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"7111:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7029:76:15"},"nodeType":"YulFunctionCall","src":"7029:89:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7022:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7153:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"7160:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7149:3:15"},"nodeType":"YulFunctionCall","src":"7149:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"7167:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"7172:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7127:21:15"},"nodeType":"YulFunctionCall","src":"7127:52:15"},"nodeType":"YulExpressionStatement","src":"7127:52:15"},{"nodeType":"YulAssignment","src":"7188:23:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7199:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"7204:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7195:3:15"},"nodeType":"YulFunctionCall","src":"7195:16:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7188:3:15"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6931:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6938:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6946:3:15","type":""}],"src":"6840:377:15"},{"body":{"nodeType":"YulBlock","src":"7369:220:15","statements":[{"nodeType":"YulAssignment","src":"7379:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7445:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"7450:2:15","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7386:58:15"},"nodeType":"YulFunctionCall","src":"7386:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7379:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7551:3:15"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"7462:88:15"},"nodeType":"YulFunctionCall","src":"7462:93:15"},"nodeType":"YulExpressionStatement","src":"7462:93:15"},{"nodeType":"YulAssignment","src":"7564:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7575:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"7580:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7571:3:15"},"nodeType":"YulFunctionCall","src":"7571:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7564:3:15"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7357:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7365:3:15","type":""}],"src":"7223:366:15"},{"body":{"nodeType":"YulBlock","src":"7741:220:15","statements":[{"nodeType":"YulAssignment","src":"7751:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7817:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"7822:2:15","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7758:58:15"},"nodeType":"YulFunctionCall","src":"7758:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7751:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7923:3:15"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"7834:88:15"},"nodeType":"YulFunctionCall","src":"7834:93:15"},"nodeType":"YulExpressionStatement","src":"7834:93:15"},{"nodeType":"YulAssignment","src":"7936:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7947:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"7952:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7943:3:15"},"nodeType":"YulFunctionCall","src":"7943:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7936:3:15"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7729:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7737:3:15","type":""}],"src":"7595:366:15"},{"body":{"nodeType":"YulBlock","src":"8113:220:15","statements":[{"nodeType":"YulAssignment","src":"8123:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8189:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8194:2:15","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8130:58:15"},"nodeType":"YulFunctionCall","src":"8130:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8123:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8295:3:15"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"8206:88:15"},"nodeType":"YulFunctionCall","src":"8206:93:15"},"nodeType":"YulExpressionStatement","src":"8206:93:15"},{"nodeType":"YulAssignment","src":"8308:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8319:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8324:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8315:3:15"},"nodeType":"YulFunctionCall","src":"8315:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8308:3:15"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8101:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8109:3:15","type":""}],"src":"7967:366:15"},{"body":{"nodeType":"YulBlock","src":"8485:220:15","statements":[{"nodeType":"YulAssignment","src":"8495:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8561:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8566:2:15","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8502:58:15"},"nodeType":"YulFunctionCall","src":"8502:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8495:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8667:3:15"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"8578:88:15"},"nodeType":"YulFunctionCall","src":"8578:93:15"},"nodeType":"YulExpressionStatement","src":"8578:93:15"},{"nodeType":"YulAssignment","src":"8680:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8691:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8696:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8687:3:15"},"nodeType":"YulFunctionCall","src":"8687:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8680:3:15"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8473:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8481:3:15","type":""}],"src":"8339:366:15"},{"body":{"nodeType":"YulBlock","src":"8857:220:15","statements":[{"nodeType":"YulAssignment","src":"8867:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8933:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8938:2:15","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8874:58:15"},"nodeType":"YulFunctionCall","src":"8874:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8867:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9039:3:15"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"8950:88:15"},"nodeType":"YulFunctionCall","src":"8950:93:15"},"nodeType":"YulExpressionStatement","src":"8950:93:15"},{"nodeType":"YulAssignment","src":"9052:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9063:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9068:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9059:3:15"},"nodeType":"YulFunctionCall","src":"9059:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9052:3:15"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8845:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8853:3:15","type":""}],"src":"8711:366:15"},{"body":{"nodeType":"YulBlock","src":"9229:220:15","statements":[{"nodeType":"YulAssignment","src":"9239:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9305:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9310:2:15","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9246:58:15"},"nodeType":"YulFunctionCall","src":"9246:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9239:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9411:3:15"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"9322:88:15"},"nodeType":"YulFunctionCall","src":"9322:93:15"},"nodeType":"YulExpressionStatement","src":"9322:93:15"},{"nodeType":"YulAssignment","src":"9424:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9435:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9440:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9431:3:15"},"nodeType":"YulFunctionCall","src":"9431:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9424:3:15"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9217:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9225:3:15","type":""}],"src":"9083:366:15"},{"body":{"nodeType":"YulBlock","src":"9601:220:15","statements":[{"nodeType":"YulAssignment","src":"9611:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9677:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9682:2:15","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9618:58:15"},"nodeType":"YulFunctionCall","src":"9618:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9611:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9783:3:15"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"9694:88:15"},"nodeType":"YulFunctionCall","src":"9694:93:15"},"nodeType":"YulExpressionStatement","src":"9694:93:15"},{"nodeType":"YulAssignment","src":"9796:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9807:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9812:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9803:3:15"},"nodeType":"YulFunctionCall","src":"9803:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9796:3:15"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9589:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9597:3:15","type":""}],"src":"9455:366:15"},{"body":{"nodeType":"YulBlock","src":"9973:220:15","statements":[{"nodeType":"YulAssignment","src":"9983:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10049:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10054:2:15","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9990:58:15"},"nodeType":"YulFunctionCall","src":"9990:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9983:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10155:3:15"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"10066:88:15"},"nodeType":"YulFunctionCall","src":"10066:93:15"},"nodeType":"YulExpressionStatement","src":"10066:93:15"},{"nodeType":"YulAssignment","src":"10168:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10179:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10184:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10175:3:15"},"nodeType":"YulFunctionCall","src":"10175:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10168:3:15"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9961:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9969:3:15","type":""}],"src":"9827:366:15"},{"body":{"nodeType":"YulBlock","src":"10345:220:15","statements":[{"nodeType":"YulAssignment","src":"10355:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10421:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10426:2:15","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10362:58:15"},"nodeType":"YulFunctionCall","src":"10362:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10355:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10527:3:15"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"10438:88:15"},"nodeType":"YulFunctionCall","src":"10438:93:15"},"nodeType":"YulExpressionStatement","src":"10438:93:15"},{"nodeType":"YulAssignment","src":"10540:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10551:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10556:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10547:3:15"},"nodeType":"YulFunctionCall","src":"10547:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10540:3:15"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10333:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10341:3:15","type":""}],"src":"10199:366:15"},{"body":{"nodeType":"YulBlock","src":"10636:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10653:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10676:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10658:17:15"},"nodeType":"YulFunctionCall","src":"10658:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10646:6:15"},"nodeType":"YulFunctionCall","src":"10646:37:15"},"nodeType":"YulExpressionStatement","src":"10646:37:15"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10624:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10631:3:15","type":""}],"src":"10571:118:15"},{"body":{"nodeType":"YulBlock","src":"10879:251:15","statements":[{"nodeType":"YulAssignment","src":"10890:102:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10979:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"10988:3:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10897:81:15"},"nodeType":"YulFunctionCall","src":"10897:95:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10890:3:15"}]},{"nodeType":"YulAssignment","src":"11002:102:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11091:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"11100:3:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"11009:81:15"},"nodeType":"YulFunctionCall","src":"11009:95:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11002:3:15"}]},{"nodeType":"YulAssignment","src":"11114:10:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"11121:3:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11114:3:15"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10850:3:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10856:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10864:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10875:3:15","type":""}],"src":"10695:435:15"},{"body":{"nodeType":"YulBlock","src":"11234:124:15","statements":[{"nodeType":"YulAssignment","src":"11244:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11256:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11267:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11252:3:15"},"nodeType":"YulFunctionCall","src":"11252:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11244:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11324:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11337:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11348:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11333:3:15"},"nodeType":"YulFunctionCall","src":"11333:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11280:43:15"},"nodeType":"YulFunctionCall","src":"11280:71:15"},"nodeType":"YulExpressionStatement","src":"11280:71:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11206:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11218:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11229:4:15","type":""}],"src":"11136:222:15"},{"body":{"nodeType":"YulBlock","src":"11564:440:15","statements":[{"nodeType":"YulAssignment","src":"11574:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11586:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11597:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11582:3:15"},"nodeType":"YulFunctionCall","src":"11582:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11574:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11655:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11668:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11679:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11664:3:15"},"nodeType":"YulFunctionCall","src":"11664:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11611:43:15"},"nodeType":"YulFunctionCall","src":"11611:71:15"},"nodeType":"YulExpressionStatement","src":"11611:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11736:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11749:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11760:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11745:3:15"},"nodeType":"YulFunctionCall","src":"11745:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11692:43:15"},"nodeType":"YulFunctionCall","src":"11692:72:15"},"nodeType":"YulExpressionStatement","src":"11692:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11818:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11831:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11842:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11827:3:15"},"nodeType":"YulFunctionCall","src":"11827:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11774:43:15"},"nodeType":"YulFunctionCall","src":"11774:72:15"},"nodeType":"YulExpressionStatement","src":"11774:72:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11867:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11878:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11863:3:15"},"nodeType":"YulFunctionCall","src":"11863:18:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11887:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"11893:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11883:3:15"},"nodeType":"YulFunctionCall","src":"11883:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11856:6:15"},"nodeType":"YulFunctionCall","src":"11856:48:15"},"nodeType":"YulExpressionStatement","src":"11856:48:15"},{"nodeType":"YulAssignment","src":"11913:84:15","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11983:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"11992:4:15"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11921:61:15"},"nodeType":"YulFunctionCall","src":"11921:76:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11913:4:15"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11512:9:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11524:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11532:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11540:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11548:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11559:4:15","type":""}],"src":"11364:640:15"},{"body":{"nodeType":"YulBlock","src":"12102:118:15","statements":[{"nodeType":"YulAssignment","src":"12112:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12124:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12135:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12120:3:15"},"nodeType":"YulFunctionCall","src":"12120:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12112:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12186:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12199:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12210:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12195:3:15"},"nodeType":"YulFunctionCall","src":"12195:17:15"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"12148:37:15"},"nodeType":"YulFunctionCall","src":"12148:65:15"},"nodeType":"YulExpressionStatement","src":"12148:65:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12074:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12086:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12097:4:15","type":""}],"src":"12010:210:15"},{"body":{"nodeType":"YulBlock","src":"12344:195:15","statements":[{"nodeType":"YulAssignment","src":"12354:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12366:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12377:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12362:3:15"},"nodeType":"YulFunctionCall","src":"12362:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12354:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12401:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12412:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12397:3:15"},"nodeType":"YulFunctionCall","src":"12397:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12420:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"12426:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12416:3:15"},"nodeType":"YulFunctionCall","src":"12416:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12390:6:15"},"nodeType":"YulFunctionCall","src":"12390:47:15"},"nodeType":"YulExpressionStatement","src":"12390:47:15"},{"nodeType":"YulAssignment","src":"12446:86:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12518:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"12527:4:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12454:63:15"},"nodeType":"YulFunctionCall","src":"12454:78:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12446:4:15"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12316:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12328:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12339:4:15","type":""}],"src":"12226:313:15"},{"body":{"nodeType":"YulBlock","src":"12716:248:15","statements":[{"nodeType":"YulAssignment","src":"12726:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12738:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12749:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12734:3:15"},"nodeType":"YulFunctionCall","src":"12734:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12726:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12773:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12784:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12769:3:15"},"nodeType":"YulFunctionCall","src":"12769:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12792:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"12798:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12788:3:15"},"nodeType":"YulFunctionCall","src":"12788:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12762:6:15"},"nodeType":"YulFunctionCall","src":"12762:47:15"},"nodeType":"YulExpressionStatement","src":"12762:47:15"},{"nodeType":"YulAssignment","src":"12818:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12952:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12826:124:15"},"nodeType":"YulFunctionCall","src":"12826:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12818:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12696:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12711:4:15","type":""}],"src":"12545:419:15"},{"body":{"nodeType":"YulBlock","src":"13141:248:15","statements":[{"nodeType":"YulAssignment","src":"13151:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13163:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13174:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13159:3:15"},"nodeType":"YulFunctionCall","src":"13159:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13151:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13198:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13209:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13194:3:15"},"nodeType":"YulFunctionCall","src":"13194:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13217:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"13223:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13213:3:15"},"nodeType":"YulFunctionCall","src":"13213:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13187:6:15"},"nodeType":"YulFunctionCall","src":"13187:47:15"},"nodeType":"YulExpressionStatement","src":"13187:47:15"},{"nodeType":"YulAssignment","src":"13243:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13377:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13251:124:15"},"nodeType":"YulFunctionCall","src":"13251:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13243:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13121:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13136:4:15","type":""}],"src":"12970:419:15"},{"body":{"nodeType":"YulBlock","src":"13566:248:15","statements":[{"nodeType":"YulAssignment","src":"13576:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13588:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13599:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13584:3:15"},"nodeType":"YulFunctionCall","src":"13584:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13576:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13623:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13634:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13619:3:15"},"nodeType":"YulFunctionCall","src":"13619:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13642:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"13648:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13638:3:15"},"nodeType":"YulFunctionCall","src":"13638:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13612:6:15"},"nodeType":"YulFunctionCall","src":"13612:47:15"},"nodeType":"YulExpressionStatement","src":"13612:47:15"},{"nodeType":"YulAssignment","src":"13668:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13802:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13676:124:15"},"nodeType":"YulFunctionCall","src":"13676:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13668:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13546:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13561:4:15","type":""}],"src":"13395:419:15"},{"body":{"nodeType":"YulBlock","src":"13991:248:15","statements":[{"nodeType":"YulAssignment","src":"14001:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14013:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14024:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14009:3:15"},"nodeType":"YulFunctionCall","src":"14009:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14001:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14048:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14059:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14044:3:15"},"nodeType":"YulFunctionCall","src":"14044:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14067:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"14073:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14063:3:15"},"nodeType":"YulFunctionCall","src":"14063:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14037:6:15"},"nodeType":"YulFunctionCall","src":"14037:47:15"},"nodeType":"YulExpressionStatement","src":"14037:47:15"},{"nodeType":"YulAssignment","src":"14093:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14227:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14101:124:15"},"nodeType":"YulFunctionCall","src":"14101:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14093:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13971:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13986:4:15","type":""}],"src":"13820:419:15"},{"body":{"nodeType":"YulBlock","src":"14416:248:15","statements":[{"nodeType":"YulAssignment","src":"14426:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14438:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14449:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14434:3:15"},"nodeType":"YulFunctionCall","src":"14434:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14426:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14473:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14484:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14469:3:15"},"nodeType":"YulFunctionCall","src":"14469:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14492:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"14498:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14488:3:15"},"nodeType":"YulFunctionCall","src":"14488:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14462:6:15"},"nodeType":"YulFunctionCall","src":"14462:47:15"},"nodeType":"YulExpressionStatement","src":"14462:47:15"},{"nodeType":"YulAssignment","src":"14518:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14652:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14526:124:15"},"nodeType":"YulFunctionCall","src":"14526:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14518:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14396:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14411:4:15","type":""}],"src":"14245:419:15"},{"body":{"nodeType":"YulBlock","src":"14841:248:15","statements":[{"nodeType":"YulAssignment","src":"14851:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14863:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14874:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14859:3:15"},"nodeType":"YulFunctionCall","src":"14859:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14851:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14898:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14909:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14894:3:15"},"nodeType":"YulFunctionCall","src":"14894:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14917:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"14923:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14913:3:15"},"nodeType":"YulFunctionCall","src":"14913:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14887:6:15"},"nodeType":"YulFunctionCall","src":"14887:47:15"},"nodeType":"YulExpressionStatement","src":"14887:47:15"},{"nodeType":"YulAssignment","src":"14943:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15077:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14951:124:15"},"nodeType":"YulFunctionCall","src":"14951:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14943:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14821:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14836:4:15","type":""}],"src":"14670:419:15"},{"body":{"nodeType":"YulBlock","src":"15266:248:15","statements":[{"nodeType":"YulAssignment","src":"15276:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15288:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15299:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15284:3:15"},"nodeType":"YulFunctionCall","src":"15284:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15276:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15323:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15334:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15319:3:15"},"nodeType":"YulFunctionCall","src":"15319:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15342:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"15348:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15338:3:15"},"nodeType":"YulFunctionCall","src":"15338:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15312:6:15"},"nodeType":"YulFunctionCall","src":"15312:47:15"},"nodeType":"YulExpressionStatement","src":"15312:47:15"},{"nodeType":"YulAssignment","src":"15368:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15502:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15376:124:15"},"nodeType":"YulFunctionCall","src":"15376:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15368:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15246:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15261:4:15","type":""}],"src":"15095:419:15"},{"body":{"nodeType":"YulBlock","src":"15691:248:15","statements":[{"nodeType":"YulAssignment","src":"15701:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15713:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15724:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15709:3:15"},"nodeType":"YulFunctionCall","src":"15709:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15701:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15748:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15759:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15744:3:15"},"nodeType":"YulFunctionCall","src":"15744:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15767:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"15773:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15763:3:15"},"nodeType":"YulFunctionCall","src":"15763:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15737:6:15"},"nodeType":"YulFunctionCall","src":"15737:47:15"},"nodeType":"YulExpressionStatement","src":"15737:47:15"},{"nodeType":"YulAssignment","src":"15793:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15927:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15801:124:15"},"nodeType":"YulFunctionCall","src":"15801:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15793:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15671:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15686:4:15","type":""}],"src":"15520:419:15"},{"body":{"nodeType":"YulBlock","src":"16116:248:15","statements":[{"nodeType":"YulAssignment","src":"16126:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16138:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16149:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16134:3:15"},"nodeType":"YulFunctionCall","src":"16134:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16126:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16173:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16184:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16169:3:15"},"nodeType":"YulFunctionCall","src":"16169:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16192:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"16198:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16188:3:15"},"nodeType":"YulFunctionCall","src":"16188:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16162:6:15"},"nodeType":"YulFunctionCall","src":"16162:47:15"},"nodeType":"YulExpressionStatement","src":"16162:47:15"},{"nodeType":"YulAssignment","src":"16218:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16352:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16226:124:15"},"nodeType":"YulFunctionCall","src":"16226:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16218:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16096:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16111:4:15","type":""}],"src":"15945:419:15"},{"body":{"nodeType":"YulBlock","src":"16468:124:15","statements":[{"nodeType":"YulAssignment","src":"16478:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16490:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16501:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16486:3:15"},"nodeType":"YulFunctionCall","src":"16486:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16478:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16558:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16571:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16582:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16567:3:15"},"nodeType":"YulFunctionCall","src":"16567:17:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16514:43:15"},"nodeType":"YulFunctionCall","src":"16514:71:15"},"nodeType":"YulExpressionStatement","src":"16514:71:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16440:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16452:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16463:4:15","type":""}],"src":"16370:222:15"},{"body":{"nodeType":"YulBlock","src":"16639:88:15","statements":[{"nodeType":"YulAssignment","src":"16649:30:15","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"16659:18:15"},"nodeType":"YulFunctionCall","src":"16659:20:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16649:6:15"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16708:6:15"},{"name":"size","nodeType":"YulIdentifier","src":"16716:4:15"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"16688:19:15"},"nodeType":"YulFunctionCall","src":"16688:33:15"},"nodeType":"YulExpressionStatement","src":"16688:33:15"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"16623:4:15","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"16632:6:15","type":""}],"src":"16598:129:15"},{"body":{"nodeType":"YulBlock","src":"16773:35:15","statements":[{"nodeType":"YulAssignment","src":"16783:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16799:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16793:5:15"},"nodeType":"YulFunctionCall","src":"16793:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16783:6:15"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"16766:6:15","type":""}],"src":"16733:75:15"},{"body":{"nodeType":"YulBlock","src":"16880:241:15","statements":[{"body":{"nodeType":"YulBlock","src":"16985:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16987:16:15"},"nodeType":"YulFunctionCall","src":"16987:18:15"},"nodeType":"YulExpressionStatement","src":"16987:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16957:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"16965:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16954:2:15"},"nodeType":"YulFunctionCall","src":"16954:30:15"},"nodeType":"YulIf","src":"16951:56:15"},{"nodeType":"YulAssignment","src":"17017:37:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17047:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"17025:21:15"},"nodeType":"YulFunctionCall","src":"17025:29:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"17017:4:15"}]},{"nodeType":"YulAssignment","src":"17091:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"17103:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"17109:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17099:3:15"},"nodeType":"YulFunctionCall","src":"17099:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"17091:4:15"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"16864:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"16875:4:15","type":""}],"src":"16814:307:15"},{"body":{"nodeType":"YulBlock","src":"17185:40:15","statements":[{"nodeType":"YulAssignment","src":"17196:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17212:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17206:5:15"},"nodeType":"YulFunctionCall","src":"17206:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17196:6:15"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17168:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17178:6:15","type":""}],"src":"17127:98:15"},{"body":{"nodeType":"YulBlock","src":"17290:40:15","statements":[{"nodeType":"YulAssignment","src":"17301:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17317:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17311:5:15"},"nodeType":"YulFunctionCall","src":"17311:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"17301:6:15"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17273:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"17283:6:15","type":""}],"src":"17231:99:15"},{"body":{"nodeType":"YulBlock","src":"17431:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17448:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"17453:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17441:6:15"},"nodeType":"YulFunctionCall","src":"17441:19:15"},"nodeType":"YulExpressionStatement","src":"17441:19:15"},{"nodeType":"YulAssignment","src":"17469:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17488:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"17493:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17484:3:15"},"nodeType":"YulFunctionCall","src":"17484:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17469:11:15"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17403:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"17408:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17419:11:15","type":""}],"src":"17336:168:15"},{"body":{"nodeType":"YulBlock","src":"17606:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17623:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"17628:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17616:6:15"},"nodeType":"YulFunctionCall","src":"17616:19:15"},"nodeType":"YulExpressionStatement","src":"17616:19:15"},{"nodeType":"YulAssignment","src":"17644:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17663:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"17668:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17659:3:15"},"nodeType":"YulFunctionCall","src":"17659:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17644:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17578:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"17583:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17594:11:15","type":""}],"src":"17510:169:15"},{"body":{"nodeType":"YulBlock","src":"17799:34:15","statements":[{"nodeType":"YulAssignment","src":"17809:18:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"17824:3:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17809:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17771:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"17776:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17787:11:15","type":""}],"src":"17685:148:15"},{"body":{"nodeType":"YulBlock","src":"17883:261:15","statements":[{"nodeType":"YulAssignment","src":"17893:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"17916:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17898:17:15"},"nodeType":"YulFunctionCall","src":"17898:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"17893:1:15"}]},{"nodeType":"YulAssignment","src":"17927:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"17950:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17932:17:15"},"nodeType":"YulFunctionCall","src":"17932:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"17927:1:15"}]},{"body":{"nodeType":"YulBlock","src":"18090:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18092:16:15"},"nodeType":"YulFunctionCall","src":"18092:18:15"},"nodeType":"YulExpressionStatement","src":"18092:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18011:1:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18018:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"18086:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18014:3:15"},"nodeType":"YulFunctionCall","src":"18014:74:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18008:2:15"},"nodeType":"YulFunctionCall","src":"18008:81:15"},"nodeType":"YulIf","src":"18005:107:15"},{"nodeType":"YulAssignment","src":"18122:16:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18133:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"18136:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18129:3:15"},"nodeType":"YulFunctionCall","src":"18129:9:15"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"18122:3:15"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"17870:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"17873:1:15","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"17879:3:15","type":""}],"src":"17839:305:15"},{"body":{"nodeType":"YulBlock","src":"18195:146:15","statements":[{"nodeType":"YulAssignment","src":"18205:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18228:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18210:17:15"},"nodeType":"YulFunctionCall","src":"18210:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"18205:1:15"}]},{"nodeType":"YulAssignment","src":"18239:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"18262:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18244:17:15"},"nodeType":"YulFunctionCall","src":"18244:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"18239:1:15"}]},{"body":{"nodeType":"YulBlock","src":"18286:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18288:16:15"},"nodeType":"YulFunctionCall","src":"18288:18:15"},"nodeType":"YulExpressionStatement","src":"18288:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18280:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"18283:1:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18277:2:15"},"nodeType":"YulFunctionCall","src":"18277:8:15"},"nodeType":"YulIf","src":"18274:34:15"},{"nodeType":"YulAssignment","src":"18318:17:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"18330:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"18333:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18326:3:15"},"nodeType":"YulFunctionCall","src":"18326:9:15"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"18318:4:15"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"18181:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"18184:1:15","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"18190:4:15","type":""}],"src":"18150:191:15"},{"body":{"nodeType":"YulBlock","src":"18392:51:15","statements":[{"nodeType":"YulAssignment","src":"18402:35:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18431:5:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"18413:17:15"},"nodeType":"YulFunctionCall","src":"18413:24:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18402:7:15"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18374:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18384:7:15","type":""}],"src":"18347:96:15"},{"body":{"nodeType":"YulBlock","src":"18491:48:15","statements":[{"nodeType":"YulAssignment","src":"18501:32:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18526:5:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18519:6:15"},"nodeType":"YulFunctionCall","src":"18519:13:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18512:6:15"},"nodeType":"YulFunctionCall","src":"18512:21:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18501:7:15"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18473:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18483:7:15","type":""}],"src":"18449:90:15"},{"body":{"nodeType":"YulBlock","src":"18589:105:15","statements":[{"nodeType":"YulAssignment","src":"18599:89:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18614:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18621:66:15","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18610:3:15"},"nodeType":"YulFunctionCall","src":"18610:78:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18599:7:15"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18571:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18581:7:15","type":""}],"src":"18545:149:15"},{"body":{"nodeType":"YulBlock","src":"18745:81:15","statements":[{"nodeType":"YulAssignment","src":"18755:65:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18770:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18777:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18766:3:15"},"nodeType":"YulFunctionCall","src":"18766:54:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18755:7:15"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18727:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18737:7:15","type":""}],"src":"18700:126:15"},{"body":{"nodeType":"YulBlock","src":"18877:32:15","statements":[{"nodeType":"YulAssignment","src":"18887:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"18898:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18887:7:15"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18859:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18869:7:15","type":""}],"src":"18832:77:15"},{"body":{"nodeType":"YulBlock","src":"18966:103:15","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"18989:3:15"},{"name":"src","nodeType":"YulIdentifier","src":"18994:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"18999:6:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"18976:12:15"},"nodeType":"YulFunctionCall","src":"18976:30:15"},"nodeType":"YulExpressionStatement","src":"18976:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19047:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"19052:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19043:3:15"},"nodeType":"YulFunctionCall","src":"19043:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"19061:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19036:6:15"},"nodeType":"YulFunctionCall","src":"19036:27:15"},"nodeType":"YulExpressionStatement","src":"19036:27:15"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"18948:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"18953:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"18958:6:15","type":""}],"src":"18915:154:15"},{"body":{"nodeType":"YulBlock","src":"19124:258:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19134:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"19143:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"19138:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"19203:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19228:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"19233:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19224:3:15"},"nodeType":"YulFunctionCall","src":"19224:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19247:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"19252:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19243:3:15"},"nodeType":"YulFunctionCall","src":"19243:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19237:5:15"},"nodeType":"YulFunctionCall","src":"19237:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19217:6:15"},"nodeType":"YulFunctionCall","src":"19217:39:15"},"nodeType":"YulExpressionStatement","src":"19217:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19164:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"19167:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19161:2:15"},"nodeType":"YulFunctionCall","src":"19161:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"19175:19:15","statements":[{"nodeType":"YulAssignment","src":"19177:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19186:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"19189:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19182:3:15"},"nodeType":"YulFunctionCall","src":"19182:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"19177:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"19157:3:15","statements":[]},"src":"19153:113:15"},{"body":{"nodeType":"YulBlock","src":"19300:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"19350:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"19355:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19346:3:15"},"nodeType":"YulFunctionCall","src":"19346:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"19364:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19339:6:15"},"nodeType":"YulFunctionCall","src":"19339:27:15"},"nodeType":"YulExpressionStatement","src":"19339:27:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"19281:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"19284:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19278:2:15"},"nodeType":"YulFunctionCall","src":"19278:13:15"},"nodeType":"YulIf","src":"19275:101:15"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"19106:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"19111:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"19116:6:15","type":""}],"src":"19075:307:15"},{"body":{"nodeType":"YulBlock","src":"19439:269:15","statements":[{"nodeType":"YulAssignment","src":"19449:22:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19463:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"19469:1:15","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"19459:3:15"},"nodeType":"YulFunctionCall","src":"19459:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19449:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"19480:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19510:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"19516:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19506:3:15"},"nodeType":"YulFunctionCall","src":"19506:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"19484:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"19557:51:15","statements":[{"nodeType":"YulAssignment","src":"19571:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19585:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"19593:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19581:3:15"},"nodeType":"YulFunctionCall","src":"19581:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19571:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"19537:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19530:6:15"},"nodeType":"YulFunctionCall","src":"19530:26:15"},"nodeType":"YulIf","src":"19527:81:15"},{"body":{"nodeType":"YulBlock","src":"19660:42:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"19674:16:15"},"nodeType":"YulFunctionCall","src":"19674:18:15"},"nodeType":"YulExpressionStatement","src":"19674:18:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"19624:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19647:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"19655:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19644:2:15"},"nodeType":"YulFunctionCall","src":"19644:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19621:2:15"},"nodeType":"YulFunctionCall","src":"19621:38:15"},"nodeType":"YulIf","src":"19618:84:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"19423:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"19432:6:15","type":""}],"src":"19388:320:15"},{"body":{"nodeType":"YulBlock","src":"19757:238:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19767:58:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19789:6:15"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"19819:4:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"19797:21:15"},"nodeType":"YulFunctionCall","src":"19797:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19785:3:15"},"nodeType":"YulFunctionCall","src":"19785:40:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"19771:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"19936:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"19938:16:15"},"nodeType":"YulFunctionCall","src":"19938:18:15"},"nodeType":"YulExpressionStatement","src":"19938:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19879:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"19891:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19876:2:15"},"nodeType":"YulFunctionCall","src":"19876:34:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19915:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"19927:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"19912:2:15"},"nodeType":"YulFunctionCall","src":"19912:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"19873:2:15"},"nodeType":"YulFunctionCall","src":"19873:62:15"},"nodeType":"YulIf","src":"19870:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19974:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"19978:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19967:6:15"},"nodeType":"YulFunctionCall","src":"19967:22:15"},"nodeType":"YulExpressionStatement","src":"19967:22:15"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19743:6:15","type":""},{"name":"size","nodeType":"YulTypedName","src":"19751:4:15","type":""}],"src":"19714:281:15"},{"body":{"nodeType":"YulBlock","src":"20029:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20046:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20049:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20039:6:15"},"nodeType":"YulFunctionCall","src":"20039:88:15"},"nodeType":"YulExpressionStatement","src":"20039:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20143:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20146:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20136:6:15"},"nodeType":"YulFunctionCall","src":"20136:15:15"},"nodeType":"YulExpressionStatement","src":"20136:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20167:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20170:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20160:6:15"},"nodeType":"YulFunctionCall","src":"20160:15:15"},"nodeType":"YulExpressionStatement","src":"20160:15:15"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"20001:180:15"},{"body":{"nodeType":"YulBlock","src":"20215:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20232:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20235:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20225:6:15"},"nodeType":"YulFunctionCall","src":"20225:88:15"},"nodeType":"YulExpressionStatement","src":"20225:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20329:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20332:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20322:6:15"},"nodeType":"YulFunctionCall","src":"20322:15:15"},"nodeType":"YulExpressionStatement","src":"20322:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20353:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20356:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20346:6:15"},"nodeType":"YulFunctionCall","src":"20346:15:15"},"nodeType":"YulExpressionStatement","src":"20346:15:15"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"20187:180:15"},{"body":{"nodeType":"YulBlock","src":"20401:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20418:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20421:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20411:6:15"},"nodeType":"YulFunctionCall","src":"20411:88:15"},"nodeType":"YulExpressionStatement","src":"20411:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20515:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20518:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20508:6:15"},"nodeType":"YulFunctionCall","src":"20508:15:15"},"nodeType":"YulExpressionStatement","src":"20508:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20539:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20542:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20532:6:15"},"nodeType":"YulFunctionCall","src":"20532:15:15"},"nodeType":"YulExpressionStatement","src":"20532:15:15"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"20373:180:15"},{"body":{"nodeType":"YulBlock","src":"20587:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20604:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20607:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20597:6:15"},"nodeType":"YulFunctionCall","src":"20597:88:15"},"nodeType":"YulExpressionStatement","src":"20597:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20701:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"20704:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20694:6:15"},"nodeType":"YulFunctionCall","src":"20694:15:15"},"nodeType":"YulExpressionStatement","src":"20694:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20725:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20728:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20718:6:15"},"nodeType":"YulFunctionCall","src":"20718:15:15"},"nodeType":"YulExpressionStatement","src":"20718:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"20559:180:15"},{"body":{"nodeType":"YulBlock","src":"20834:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20851:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20854:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20844:6:15"},"nodeType":"YulFunctionCall","src":"20844:12:15"},"nodeType":"YulExpressionStatement","src":"20844:12:15"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"20745:117:15"},{"body":{"nodeType":"YulBlock","src":"20957:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20974:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20977:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20967:6:15"},"nodeType":"YulFunctionCall","src":"20967:12:15"},"nodeType":"YulExpressionStatement","src":"20967:12:15"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"20868:117:15"},{"body":{"nodeType":"YulBlock","src":"21080:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21097:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21100:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21090:6:15"},"nodeType":"YulFunctionCall","src":"21090:12:15"},"nodeType":"YulExpressionStatement","src":"21090:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"20991:117:15"},{"body":{"nodeType":"YulBlock","src":"21203:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21220:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21223:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21213:6:15"},"nodeType":"YulFunctionCall","src":"21213:12:15"},"nodeType":"YulExpressionStatement","src":"21213:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"21114:117:15"},{"body":{"nodeType":"YulBlock","src":"21285:54:15","statements":[{"nodeType":"YulAssignment","src":"21295:38:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21313:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"21320:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21309:3:15"},"nodeType":"YulFunctionCall","src":"21309:14:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21329:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"21325:3:15"},"nodeType":"YulFunctionCall","src":"21325:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21305:3:15"},"nodeType":"YulFunctionCall","src":"21305:28:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"21295:6:15"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21268:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"21278:6:15","type":""}],"src":"21237:102:15"},{"body":{"nodeType":"YulBlock","src":"21451:126:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21473:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"21481:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21469:3:15"},"nodeType":"YulFunctionCall","src":"21469:14:15"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"21485:34:15","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21462:6:15"},"nodeType":"YulFunctionCall","src":"21462:58:15"},"nodeType":"YulExpressionStatement","src":"21462:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21541:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"21549:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21537:3:15"},"nodeType":"YulFunctionCall","src":"21537:15:15"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"21554:15:15","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21530:6:15"},"nodeType":"YulFunctionCall","src":"21530:40:15"},"nodeType":"YulExpressionStatement","src":"21530:40:15"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21443:6:15","type":""}],"src":"21345:232:15"},{"body":{"nodeType":"YulBlock","src":"21689:131:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21711:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"21719:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21707:3:15"},"nodeType":"YulFunctionCall","src":"21707:14:15"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"21723:34:15","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21700:6:15"},"nodeType":"YulFunctionCall","src":"21700:58:15"},"nodeType":"YulExpressionStatement","src":"21700:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21779:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"21787:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21775:3:15"},"nodeType":"YulFunctionCall","src":"21775:15:15"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"21792:20:15","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21768:6:15"},"nodeType":"YulFunctionCall","src":"21768:45:15"},"nodeType":"YulExpressionStatement","src":"21768:45:15"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21681:6:15","type":""}],"src":"21583:237:15"},{"body":{"nodeType":"YulBlock","src":"21932:118:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21954:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"21962:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21950:3:15"},"nodeType":"YulFunctionCall","src":"21950:14:15"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"21966:34:15","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21943:6:15"},"nodeType":"YulFunctionCall","src":"21943:58:15"},"nodeType":"YulExpressionStatement","src":"21943:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22022:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"22030:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22018:3:15"},"nodeType":"YulFunctionCall","src":"22018:15:15"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"22035:7:15","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22011:6:15"},"nodeType":"YulFunctionCall","src":"22011:32:15"},"nodeType":"YulExpressionStatement","src":"22011:32:15"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21924:6:15","type":""}],"src":"21826:224:15"},{"body":{"nodeType":"YulBlock","src":"22162:117:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22184:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"22192:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22180:3:15"},"nodeType":"YulFunctionCall","src":"22180:14:15"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"22196:34:15","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22173:6:15"},"nodeType":"YulFunctionCall","src":"22173:58:15"},"nodeType":"YulExpressionStatement","src":"22173:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22252:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"22260:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22248:3:15"},"nodeType":"YulFunctionCall","src":"22248:15:15"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"22265:6:15","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22241:6:15"},"nodeType":"YulFunctionCall","src":"22241:31:15"},"nodeType":"YulExpressionStatement","src":"22241:31:15"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22154:6:15","type":""}],"src":"22056:223:15"},{"body":{"nodeType":"YulBlock","src":"22391:69:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22413:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"22421:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22409:3:15"},"nodeType":"YulFunctionCall","src":"22409:14:15"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"22425:27:15","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22402:6:15"},"nodeType":"YulFunctionCall","src":"22402:51:15"},"nodeType":"YulExpressionStatement","src":"22402:51:15"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22383:6:15","type":""}],"src":"22285:175:15"},{"body":{"nodeType":"YulBlock","src":"22572:122:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22594:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"22602:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22590:3:15"},"nodeType":"YulFunctionCall","src":"22590:14:15"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"22606:34:15","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22583:6:15"},"nodeType":"YulFunctionCall","src":"22583:58:15"},"nodeType":"YulExpressionStatement","src":"22583:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22662:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"22670:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22658:3:15"},"nodeType":"YulFunctionCall","src":"22658:15:15"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"22675:11:15","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22651:6:15"},"nodeType":"YulFunctionCall","src":"22651:36:15"},"nodeType":"YulExpressionStatement","src":"22651:36:15"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22564:6:15","type":""}],"src":"22466:228:15"},{"body":{"nodeType":"YulBlock","src":"22806:68:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22828:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"22836:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22824:3:15"},"nodeType":"YulFunctionCall","src":"22824:14:15"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"22840:26:15","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22817:6:15"},"nodeType":"YulFunctionCall","src":"22817:50:15"},"nodeType":"YulExpressionStatement","src":"22817:50:15"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22798:6:15","type":""}],"src":"22700:174:15"},{"body":{"nodeType":"YulBlock","src":"22986:114:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23008:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23016:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23004:3:15"},"nodeType":"YulFunctionCall","src":"23004:14:15"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"23020:34:15","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22997:6:15"},"nodeType":"YulFunctionCall","src":"22997:58:15"},"nodeType":"YulExpressionStatement","src":"22997:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23076:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23084:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23072:3:15"},"nodeType":"YulFunctionCall","src":"23072:15:15"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"23089:3:15","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23065:6:15"},"nodeType":"YulFunctionCall","src":"23065:28:15"},"nodeType":"YulExpressionStatement","src":"23065:28:15"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22978:6:15","type":""}],"src":"22880:220:15"},{"body":{"nodeType":"YulBlock","src":"23212:142:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23234:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23242:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23230:3:15"},"nodeType":"YulFunctionCall","src":"23230:14:15"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"23246:34:15","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23223:6:15"},"nodeType":"YulFunctionCall","src":"23223:58:15"},"nodeType":"YulExpressionStatement","src":"23223:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23302:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23310:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23298:3:15"},"nodeType":"YulFunctionCall","src":"23298:15:15"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"23315:31:15","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23291:6:15"},"nodeType":"YulFunctionCall","src":"23291:56:15"},"nodeType":"YulExpressionStatement","src":"23291:56:15"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23204:6:15","type":""}],"src":"23106:248:15"},{"body":{"nodeType":"YulBlock","src":"23403:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"23460:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23469:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23472:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23462:6:15"},"nodeType":"YulFunctionCall","src":"23462:12:15"},"nodeType":"YulExpressionStatement","src":"23462:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23426:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23451:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"23433:17:15"},"nodeType":"YulFunctionCall","src":"23433:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23423:2:15"},"nodeType":"YulFunctionCall","src":"23423:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23416:6:15"},"nodeType":"YulFunctionCall","src":"23416:43:15"},"nodeType":"YulIf","src":"23413:63:15"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23396:5:15","type":""}],"src":"23360:122:15"},{"body":{"nodeType":"YulBlock","src":"23528:76:15","statements":[{"body":{"nodeType":"YulBlock","src":"23582:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23591:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23594:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23584:6:15"},"nodeType":"YulFunctionCall","src":"23584:12:15"},"nodeType":"YulExpressionStatement","src":"23584:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23551:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23573:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"23558:14:15"},"nodeType":"YulFunctionCall","src":"23558:21:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23548:2:15"},"nodeType":"YulFunctionCall","src":"23548:32:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23541:6:15"},"nodeType":"YulFunctionCall","src":"23541:40:15"},"nodeType":"YulIf","src":"23538:60:15"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23521:5:15","type":""}],"src":"23488:116:15"},{"body":{"nodeType":"YulBlock","src":"23652:78:15","statements":[{"body":{"nodeType":"YulBlock","src":"23708:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23717:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23720:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23710:6:15"},"nodeType":"YulFunctionCall","src":"23710:12:15"},"nodeType":"YulExpressionStatement","src":"23710:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23675:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23699:5:15"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"23682:16:15"},"nodeType":"YulFunctionCall","src":"23682:23:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23672:2:15"},"nodeType":"YulFunctionCall","src":"23672:34:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23665:6:15"},"nodeType":"YulFunctionCall","src":"23665:42:15"},"nodeType":"YulIf","src":"23662:62:15"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23645:5:15","type":""}],"src":"23610:120:15"},{"body":{"nodeType":"YulBlock","src":"23779:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"23836:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23845:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23848:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23838:6:15"},"nodeType":"YulFunctionCall","src":"23838:12:15"},"nodeType":"YulExpressionStatement","src":"23838:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23802:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23827:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23809:17:15"},"nodeType":"YulFunctionCall","src":"23809:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23799:2:15"},"nodeType":"YulFunctionCall","src":"23799:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23792:6:15"},"nodeType":"YulFunctionCall","src":"23792:43:15"},"nodeType":"YulIf","src":"23789:63:15"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23772:5:15","type":""}],"src":"23736:122:15"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611863565b6102bc565b6040516100fb9190611b80565b60405180910390f35b61010c61039e565b6040516101199190611b9b565b60405180910390f35b61013c600480360381019061013791906118bd565b610430565b6040516101499190611b19565b60405180910390f35b61016c60048036038101906101679190611823565b610476565b005b6101886004803603810190610183919061170d565b61058e565b005b6101a4600480360381019061019f919061170d565b6105ee565b005b6101c060048036038101906101bb91906118bd565b61060e565b6040516101cd9190611b19565b60405180910390f35b6101f060048036038101906101eb91906116a0565b610695565b6040516101fd9190611cdd565b60405180910390f35b61020e61074d565b60405161021b9190611b9b565b60405180910390f35b61023e600480360381019061023991906117e3565b6107df565b005b61025a60048036038101906102559190611760565b6107f5565b005b610276600480360381019061027191906118bd565b610857565b6040516102839190611b9b565b60405180910390f35b6102a660048036038101906102a191906116cd565b6108bf565b6040516102b39190611b80565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611ed1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611ed1565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c9d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cbd565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611bbd565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611c7d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611c5d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611ed1565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611ed1565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611bbd565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611af5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611c7d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611bfd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611c1d565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611bfd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb90611c3d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff59190611b80565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90611bdd565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a2611fc1565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b611f63565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a9190611de7565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a59190611d91565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b81526004016113269493929190611b34565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e9190611890565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390611bdd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4611f63565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1611f63565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510611f63565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539611f63565b5b0492506008810190505b612710831061156957612710838161155f5761155e611f63565b5b0492506004810190505b6064831061158c576064838161158257611581611f63565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006115da6115d584611d1d565b611cf8565b9050828152602081018484840111156115f6576115f5611ff5565b5b611601848285611e8f565b509392505050565b60008135905061161881612290565b92915050565b60008135905061162d816122a7565b92915050565b600081359050611642816122be565b92915050565b600081519050611657816122be565b92915050565b600082601f83011261167257611671611ff0565b5b81356116828482602086016115c7565b91505092915050565b60008135905061169a816122d5565b92915050565b6000602082840312156116b6576116b5611fff565b5b60006116c484828501611609565b91505092915050565b600080604083850312156116e4576116e3611fff565b5b60006116f285828601611609565b925050602061170385828601611609565b9150509250929050565b60008060006060848603121561172657611725611fff565b5b600061173486828701611609565b935050602061174586828701611609565b92505060406117568682870161168b565b9150509250925092565b6000806000806080858703121561177a57611779611fff565b5b600061178887828801611609565b945050602061179987828801611609565b93505060406117aa8782880161168b565b925050606085013567ffffffffffffffff8111156117cb576117ca611ffa565b5b6117d78782880161165d565b91505092959194509250565b600080604083850312156117fa576117f9611fff565b5b600061180885828601611609565b92505060206118198582860161161e565b9150509250929050565b6000806040838503121561183a57611839611fff565b5b600061184885828601611609565b92505060206118598582860161168b565b9150509250929050565b60006020828403121561187957611878611fff565b5b600061188784828501611633565b91505092915050565b6000602082840312156118a6576118a5611fff565b5b60006118b484828501611648565b91505092915050565b6000602082840312156118d3576118d2611fff565b5b60006118e18482850161168b565b91505092915050565b6118f381611e1b565b82525050565b61190281611e2d565b82525050565b600061191382611d4e565b61191d8185611d64565b935061192d818560208601611e9e565b61193681612004565b840191505092915050565b600061194c82611d59565b6119568185611d75565b9350611966818560208601611e9e565b61196f81612004565b840191505092915050565b600061198582611d59565b61198f8185611d86565b935061199f818560208601611e9e565b80840191505092915050565b60006119b8602d83611d75565b91506119c382612015565b604082019050919050565b60006119db603283611d75565b91506119e682612064565b604082019050919050565b60006119fe602583611d75565b9150611a09826120b3565b604082019050919050565b6000611a21602483611d75565b9150611a2c82612102565b604082019050919050565b6000611a44601983611d75565b9150611a4f82612151565b602082019050919050565b6000611a67602983611d75565b9150611a728261217a565b604082019050919050565b6000611a8a601883611d75565b9150611a95826121c9565b602082019050919050565b6000611aad602183611d75565b9150611ab8826121f2565b604082019050919050565b6000611ad0603d83611d75565b9150611adb82612241565b604082019050919050565b611aef81611e85565b82525050565b6000611b01828561197a565b9150611b0d828461197a565b91508190509392505050565b6000602082019050611b2e60008301846118ea565b92915050565b6000608082019050611b4960008301876118ea565b611b5660208301866118ea565b611b636040830185611ae6565b8181036060830152611b758184611908565b905095945050505050565b6000602082019050611b9560008301846118f9565b92915050565b60006020820190508181036000830152611bb58184611941565b905092915050565b60006020820190508181036000830152611bd6816119ab565b9050919050565b60006020820190508181036000830152611bf6816119ce565b9050919050565b60006020820190508181036000830152611c16816119f1565b9050919050565b60006020820190508181036000830152611c3681611a14565b9050919050565b60006020820190508181036000830152611c5681611a37565b9050919050565b60006020820190508181036000830152611c7681611a5a565b9050919050565b60006020820190508181036000830152611c9681611a7d565b9050919050565b60006020820190508181036000830152611cb681611aa0565b9050919050565b60006020820190508181036000830152611cd681611ac3565b9050919050565b6000602082019050611cf26000830184611ae6565b92915050565b6000611d02611d13565b9050611d0e8282611f03565b919050565b6000604051905090565b600067ffffffffffffffff821115611d3857611d37611fc1565b5b611d4182612004565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611d9c82611e85565b9150611da783611e85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ddc57611ddb611f34565b5b828201905092915050565b6000611df282611e85565b9150611dfd83611e85565b925082821015611e1057611e0f611f34565b5b828203905092915050565b6000611e2682611e65565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611ebc578082015181840152602081019050611ea1565b83811115611ecb576000848401525b50505050565b60006002820490506001821680611ee957607f821691505b60208210811415611efd57611efc611f92565b5b50919050565b611f0c82612004565b810181811067ffffffffffffffff82111715611f2b57611f2a611fc1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b61229981611e1b565b81146122a457600080fd5b50565b6122b081611e2d565b81146122bb57600080fd5b50565b6122c781611e39565b81146122d257600080fd5b50565b6122de81611e85565b81146122e957600080fd5b5056fea2646970667358221220d8ee7fada685f0b32f66df66d6451cea01150b5c19624f410f83018282edc5bb64736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1863 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x1823 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x1B19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x16A0 JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x1CDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x17E3 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x18BD JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x1B9B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x16CD JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1ED1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1BBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1BFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x1C3D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x1B80 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x1D91 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x1890 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x1BDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x1F63 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DA PUSH2 0x15D5 DUP5 PUSH2 0x1D1D JUMP JUMPDEST PUSH2 0x1CF8 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x15F6 JUMPI PUSH2 0x15F5 PUSH2 0x1FF5 JUMP JUMPDEST JUMPDEST PUSH2 0x1601 DUP5 DUP3 DUP6 PUSH2 0x1E8F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1618 DUP2 PUSH2 0x2290 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x22A7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1642 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1657 DUP2 PUSH2 0x22BE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1672 JUMPI PUSH2 0x1671 PUSH2 0x1FF0 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1682 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x15C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x169A DUP2 PUSH2 0x22D5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x16B5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16C4 DUP5 DUP3 DUP6 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16E4 JUMPI PUSH2 0x16E3 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16F2 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1703 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1726 JUMPI PUSH2 0x1725 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1734 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1745 DUP7 DUP3 DUP8 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1756 DUP7 DUP3 DUP8 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x177A JUMPI PUSH2 0x1779 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1788 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1799 DUP8 DUP3 DUP9 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x17AA DUP8 DUP3 DUP9 ADD PUSH2 0x168B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17CB JUMPI PUSH2 0x17CA PUSH2 0x1FFA JUMP JUMPDEST JUMPDEST PUSH2 0x17D7 DUP8 DUP3 DUP9 ADD PUSH2 0x165D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17FA JUMPI PUSH2 0x17F9 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1808 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1819 DUP6 DUP3 DUP7 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x183A JUMPI PUSH2 0x1839 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1848 DUP6 DUP3 DUP7 ADD PUSH2 0x1609 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1859 DUP6 DUP3 DUP7 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1879 JUMPI PUSH2 0x1878 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1887 DUP5 DUP3 DUP6 ADD PUSH2 0x1633 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18A6 JUMPI PUSH2 0x18A5 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18B4 DUP5 DUP3 DUP6 ADD PUSH2 0x1648 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18D3 JUMPI PUSH2 0x18D2 PUSH2 0x1FFF JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18E1 DUP5 DUP3 DUP6 ADD PUSH2 0x168B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18F3 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1902 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1913 DUP3 PUSH2 0x1D4E JUMP JUMPDEST PUSH2 0x191D DUP2 DUP6 PUSH2 0x1D64 JUMP JUMPDEST SWAP4 POP PUSH2 0x192D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x1936 DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x194C DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x1956 DUP2 DUP6 PUSH2 0x1D75 JUMP JUMPDEST SWAP4 POP PUSH2 0x1966 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST PUSH2 0x196F DUP2 PUSH2 0x2004 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1985 DUP3 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0x198F DUP2 DUP6 PUSH2 0x1D86 JUMP JUMPDEST SWAP4 POP PUSH2 0x199F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E9E JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B8 PUSH1 0x2D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19C3 DUP3 PUSH2 0x2015 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DB PUSH1 0x32 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x19E6 DUP3 PUSH2 0x2064 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19FE PUSH1 0x25 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A09 DUP3 PUSH2 0x20B3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A21 PUSH1 0x24 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2C DUP3 PUSH2 0x2102 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A44 PUSH1 0x19 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A4F DUP3 PUSH2 0x2151 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A67 PUSH1 0x29 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A72 DUP3 PUSH2 0x217A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8A PUSH1 0x18 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A95 DUP3 PUSH2 0x21C9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AAD PUSH1 0x21 DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AB8 DUP3 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AD0 PUSH1 0x3D DUP4 PUSH2 0x1D75 JUMP JUMPDEST SWAP2 POP PUSH2 0x1ADB DUP3 PUSH2 0x2241 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AEF DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B01 DUP3 DUP6 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0D DUP3 DUP5 PUSH2 0x197A JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1B49 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B56 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x18EA JUMP JUMPDEST PUSH2 0x1B63 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1AE6 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1B75 DUP2 DUP5 PUSH2 0x1908 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B95 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18F9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BB5 DUP2 DUP5 PUSH2 0x1941 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BD6 DUP2 PUSH2 0x19AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BF6 DUP2 PUSH2 0x19CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C16 DUP2 PUSH2 0x19F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C36 DUP2 PUSH2 0x1A14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C56 DUP2 PUSH2 0x1A37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1A5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C96 DUP2 PUSH2 0x1A7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CB6 DUP2 PUSH2 0x1AA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CD6 DUP2 PUSH2 0x1AC3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1CF2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AE6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D02 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D0E DUP3 DUP3 PUSH2 0x1F03 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1D38 JUMPI PUSH2 0x1D37 PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST PUSH2 0x1D41 DUP3 PUSH2 0x2004 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9C DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DA7 DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1DDC JUMPI PUSH2 0x1DDB PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DF2 DUP3 PUSH2 0x1E85 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DFD DUP4 PUSH2 0x1E85 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1E10 JUMPI PUSH2 0x1E0F PUSH2 0x1F34 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E26 DUP3 PUSH2 0x1E65 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EBC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1EA1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1EE9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1EFD JUMPI PUSH2 0x1EFC PUSH2 0x1F92 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1F0C DUP3 PUSH2 0x2004 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F2B JUMPI PUSH2 0x1F2A PUSH2 0x1FC1 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x2299 DUP2 PUSH2 0x1E1B JUMP JUMPDEST DUP2 EQ PUSH2 0x22A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22B0 DUP2 PUSH2 0x1E2D JUMP JUMPDEST DUP2 EQ PUSH2 0x22BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22C7 DUP2 PUSH2 0x1E39 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x22DE DUP2 PUSH2 0x1E85 JUMP JUMPDEST DUP2 EQ PUSH2 0x22E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xEE PUSH32 0xADA685F0B32F66DF66D6451CEA01150B5C19624F410F83018282EDC5BB64736F PUSH13 0x63430008070033000000000000 ","sourceMap":"628:16327:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:11:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:3:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:9:-;693:7;719:10;712:17;;640:96;:::o;12768:171:3:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:10:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:3:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:13:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:8:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:410:15:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:112;;;280:79;;:::i;:::-;249:112;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;7:410;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;423:139;;;;:::o;568:133::-;611:5;649:6;636:20;627:29;;665:30;689:5;665:30;:::i;:::-;568:133;;;;:::o;707:137::-;752:5;790:6;777:20;768:29;;806:32;832:5;806:32;:::i;:::-;707:137;;;;:::o;850:141::-;906:5;937:6;931:13;922:22;;953:32;979:5;953:32;:::i;:::-;850:141;;;;:::o;1010:338::-;1065:5;1114:3;1107:4;1099:6;1095:17;1091:27;1081:122;;1122:79;;:::i;:::-;1081:122;1239:6;1226:20;1264:78;1338:3;1330:6;1323:4;1315:6;1311:17;1264:78;:::i;:::-;1255:87;;1071:277;1010:338;;;;:::o;1354:139::-;1400:5;1438:6;1425:20;1416:29;;1454:33;1481:5;1454:33;:::i;:::-;1354:139;;;;:::o;1499:329::-;1558:6;1607:2;1595:9;1586:7;1582:23;1578:32;1575:119;;;1613:79;;:::i;:::-;1575:119;1733:1;1758:53;1803:7;1794:6;1783:9;1779:22;1758:53;:::i;:::-;1748:63;;1704:117;1499:329;;;;:::o;1834:474::-;1902:6;1910;1959:2;1947:9;1938:7;1934:23;1930:32;1927:119;;;1965:79;;:::i;:::-;1927:119;2085:1;2110:53;2155:7;2146:6;2135:9;2131:22;2110:53;:::i;:::-;2100:63;;2056:117;2212:2;2238:53;2283:7;2274:6;2263:9;2259:22;2238:53;:::i;:::-;2228:63;;2183:118;1834:474;;;;;:::o;2314:619::-;2391:6;2399;2407;2456:2;2444:9;2435:7;2431:23;2427:32;2424:119;;;2462:79;;:::i;:::-;2424:119;2582:1;2607:53;2652:7;2643:6;2632:9;2628:22;2607:53;:::i;:::-;2597:63;;2553:117;2709:2;2735:53;2780:7;2771:6;2760:9;2756:22;2735:53;:::i;:::-;2725:63;;2680:118;2837:2;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2808:118;2314:619;;;;;:::o;2939:943::-;3034:6;3042;3050;3058;3107:3;3095:9;3086:7;3082:23;3078:33;3075:120;;;3114:79;;:::i;:::-;3075:120;3234:1;3259:53;3304:7;3295:6;3284:9;3280:22;3259:53;:::i;:::-;3249:63;;3205:117;3361:2;3387:53;3432:7;3423:6;3412:9;3408:22;3387:53;:::i;:::-;3377:63;;3332:118;3489:2;3515:53;3560:7;3551:6;3540:9;3536:22;3515:53;:::i;:::-;3505:63;;3460:118;3645:2;3634:9;3630:18;3617:32;3676:18;3668:6;3665:30;3662:117;;;3698:79;;:::i;:::-;3662:117;3803:62;3857:7;3848:6;3837:9;3833:22;3803:62;:::i;:::-;3793:72;;3588:287;2939:943;;;;;;;:::o;3888:468::-;3953:6;3961;4010:2;3998:9;3989:7;3985:23;3981:32;3978:119;;;4016:79;;:::i;:::-;3978:119;4136:1;4161:53;4206:7;4197:6;4186:9;4182:22;4161:53;:::i;:::-;4151:63;;4107:117;4263:2;4289:50;4331:7;4322:6;4311:9;4307:22;4289:50;:::i;:::-;4279:60;;4234:115;3888:468;;;;;:::o;4362:474::-;4430:6;4438;4487:2;4475:9;4466:7;4462:23;4458:32;4455:119;;;4493:79;;:::i;:::-;4455:119;4613:1;4638:53;4683:7;4674:6;4663:9;4659:22;4638:53;:::i;:::-;4628:63;;4584:117;4740:2;4766:53;4811:7;4802:6;4791:9;4787:22;4766:53;:::i;:::-;4756:63;;4711:118;4362:474;;;;;:::o;4842:327::-;4900:6;4949:2;4937:9;4928:7;4924:23;4920:32;4917:119;;;4955:79;;:::i;:::-;4917:119;5075:1;5100:52;5144:7;5135:6;5124:9;5120:22;5100:52;:::i;:::-;5090:62;;5046:116;4842:327;;;;:::o;5175:349::-;5244:6;5293:2;5281:9;5272:7;5268:23;5264:32;5261:119;;;5299:79;;:::i;:::-;5261:119;5419:1;5444:63;5499:7;5490:6;5479:9;5475:22;5444:63;:::i;:::-;5434:73;;5390:127;5175:349;;;;:::o;5530:329::-;5589:6;5638:2;5626:9;5617:7;5613:23;5609:32;5606:119;;;5644:79;;:::i;:::-;5606:119;5764:1;5789:53;5834:7;5825:6;5814:9;5810:22;5789:53;:::i;:::-;5779:63;;5735:117;5530:329;;;;:::o;5865:118::-;5952:24;5970:5;5952:24;:::i;:::-;5947:3;5940:37;5865:118;;:::o;5989:109::-;6070:21;6085:5;6070:21;:::i;:::-;6065:3;6058:34;5989:109;;:::o;6104:360::-;6190:3;6218:38;6250:5;6218:38;:::i;:::-;6272:70;6335:6;6330:3;6272:70;:::i;:::-;6265:77;;6351:52;6396:6;6391:3;6384:4;6377:5;6373:16;6351:52;:::i;:::-;6428:29;6450:6;6428:29;:::i;:::-;6423:3;6419:39;6412:46;;6194:270;6104:360;;;;:::o;6470:364::-;6558:3;6586:39;6619:5;6586:39;:::i;:::-;6641:71;6705:6;6700:3;6641:71;:::i;:::-;6634:78;;6721:52;6766:6;6761:3;6754:4;6747:5;6743:16;6721:52;:::i;:::-;6798:29;6820:6;6798:29;:::i;:::-;6793:3;6789:39;6782:46;;6562:272;6470:364;;;;:::o;6840:377::-;6946:3;6974:39;7007:5;6974:39;:::i;:::-;7029:89;7111:6;7106:3;7029:89;:::i;:::-;7022:96;;7127:52;7172:6;7167:3;7160:4;7153:5;7149:16;7127:52;:::i;:::-;7204:6;7199:3;7195:16;7188:23;;6950:267;6840:377;;;;:::o;7223:366::-;7365:3;7386:67;7450:2;7445:3;7386:67;:::i;:::-;7379:74;;7462:93;7551:3;7462:93;:::i;:::-;7580:2;7575:3;7571:12;7564:19;;7223:366;;;:::o;7595:::-;7737:3;7758:67;7822:2;7817:3;7758:67;:::i;:::-;7751:74;;7834:93;7923:3;7834:93;:::i;:::-;7952:2;7947:3;7943:12;7936:19;;7595:366;;;:::o;7967:::-;8109:3;8130:67;8194:2;8189:3;8130:67;:::i;:::-;8123:74;;8206:93;8295:3;8206:93;:::i;:::-;8324:2;8319:3;8315:12;8308:19;;7967:366;;;:::o;8339:::-;8481:3;8502:67;8566:2;8561:3;8502:67;:::i;:::-;8495:74;;8578:93;8667:3;8578:93;:::i;:::-;8696:2;8691:3;8687:12;8680:19;;8339:366;;;:::o;8711:::-;8853:3;8874:67;8938:2;8933:3;8874:67;:::i;:::-;8867:74;;8950:93;9039:3;8950:93;:::i;:::-;9068:2;9063:3;9059:12;9052:19;;8711:366;;;:::o;9083:::-;9225:3;9246:67;9310:2;9305:3;9246:67;:::i;:::-;9239:74;;9322:93;9411:3;9322:93;:::i;:::-;9440:2;9435:3;9431:12;9424:19;;9083:366;;;:::o;9455:::-;9597:3;9618:67;9682:2;9677:3;9618:67;:::i;:::-;9611:74;;9694:93;9783:3;9694:93;:::i;:::-;9812:2;9807:3;9803:12;9796:19;;9455:366;;;:::o;9827:::-;9969:3;9990:67;10054:2;10049:3;9990:67;:::i;:::-;9983:74;;10066:93;10155:3;10066:93;:::i;:::-;10184:2;10179:3;10175:12;10168:19;;9827:366;;;:::o;10199:::-;10341:3;10362:67;10426:2;10421:3;10362:67;:::i;:::-;10355:74;;10438:93;10527:3;10438:93;:::i;:::-;10556:2;10551:3;10547:12;10540:19;;10199:366;;;:::o;10571:118::-;10658:24;10676:5;10658:24;:::i;:::-;10653:3;10646:37;10571:118;;:::o;10695:435::-;10875:3;10897:95;10988:3;10979:6;10897:95;:::i;:::-;10890:102;;11009:95;11100:3;11091:6;11009:95;:::i;:::-;11002:102;;11121:3;11114:10;;10695:435;;;;;:::o;11136:222::-;11229:4;11267:2;11256:9;11252:18;11244:26;;11280:71;11348:1;11337:9;11333:17;11324:6;11280:71;:::i;:::-;11136:222;;;;:::o;11364:640::-;11559:4;11597:3;11586:9;11582:19;11574:27;;11611:71;11679:1;11668:9;11664:17;11655:6;11611:71;:::i;:::-;11692:72;11760:2;11749:9;11745:18;11736:6;11692:72;:::i;:::-;11774;11842:2;11831:9;11827:18;11818:6;11774:72;:::i;:::-;11893:9;11887:4;11883:20;11878:2;11867:9;11863:18;11856:48;11921:76;11992:4;11983:6;11921:76;:::i;:::-;11913:84;;11364:640;;;;;;;:::o;12010:210::-;12097:4;12135:2;12124:9;12120:18;12112:26;;12148:65;12210:1;12199:9;12195:17;12186:6;12148:65;:::i;:::-;12010:210;;;;:::o;12226:313::-;12339:4;12377:2;12366:9;12362:18;12354:26;;12426:9;12420:4;12416:20;12412:1;12401:9;12397:17;12390:47;12454:78;12527:4;12518:6;12454:78;:::i;:::-;12446:86;;12226:313;;;;:::o;12545:419::-;12711:4;12749:2;12738:9;12734:18;12726:26;;12798:9;12792:4;12788:20;12784:1;12773:9;12769:17;12762:47;12826:131;12952:4;12826:131;:::i;:::-;12818:139;;12545:419;;;:::o;12970:::-;13136:4;13174:2;13163:9;13159:18;13151:26;;13223:9;13217:4;13213:20;13209:1;13198:9;13194:17;13187:47;13251:131;13377:4;13251:131;:::i;:::-;13243:139;;12970:419;;;:::o;13395:::-;13561:4;13599:2;13588:9;13584:18;13576:26;;13648:9;13642:4;13638:20;13634:1;13623:9;13619:17;13612:47;13676:131;13802:4;13676:131;:::i;:::-;13668:139;;13395:419;;;:::o;13820:::-;13986:4;14024:2;14013:9;14009:18;14001:26;;14073:9;14067:4;14063:20;14059:1;14048:9;14044:17;14037:47;14101:131;14227:4;14101:131;:::i;:::-;14093:139;;13820:419;;;:::o;14245:::-;14411:4;14449:2;14438:9;14434:18;14426:26;;14498:9;14492:4;14488:20;14484:1;14473:9;14469:17;14462:47;14526:131;14652:4;14526:131;:::i;:::-;14518:139;;14245:419;;;:::o;14670:::-;14836:4;14874:2;14863:9;14859:18;14851:26;;14923:9;14917:4;14913:20;14909:1;14898:9;14894:17;14887:47;14951:131;15077:4;14951:131;:::i;:::-;14943:139;;14670:419;;;:::o;15095:::-;15261:4;15299:2;15288:9;15284:18;15276:26;;15348:9;15342:4;15338:20;15334:1;15323:9;15319:17;15312:47;15376:131;15502:4;15376:131;:::i;:::-;15368:139;;15095:419;;;:::o;15520:::-;15686:4;15724:2;15713:9;15709:18;15701:26;;15773:9;15767:4;15763:20;15759:1;15748:9;15744:17;15737:47;15801:131;15927:4;15801:131;:::i;:::-;15793:139;;15520:419;;;:::o;15945:::-;16111:4;16149:2;16138:9;16134:18;16126:26;;16198:9;16192:4;16188:20;16184:1;16173:9;16169:17;16162:47;16226:131;16352:4;16226:131;:::i;:::-;16218:139;;15945:419;;;:::o;16370:222::-;16463:4;16501:2;16490:9;16486:18;16478:26;;16514:71;16582:1;16571:9;16567:17;16558:6;16514:71;:::i;:::-;16370:222;;;;:::o;16598:129::-;16632:6;16659:20;;:::i;:::-;16649:30;;16688:33;16716:4;16708:6;16688:33;:::i;:::-;16598:129;;;:::o;16733:75::-;16766:6;16799:2;16793:9;16783:19;;16733:75;:::o;16814:307::-;16875:4;16965:18;16957:6;16954:30;16951:56;;;16987:18;;:::i;:::-;16951:56;17025:29;17047:6;17025:29;:::i;:::-;17017:37;;17109:4;17103;17099:15;17091:23;;16814:307;;;:::o;17127:98::-;17178:6;17212:5;17206:12;17196:22;;17127:98;;;:::o;17231:99::-;17283:6;17317:5;17311:12;17301:22;;17231:99;;;:::o;17336:168::-;17419:11;17453:6;17448:3;17441:19;17493:4;17488:3;17484:14;17469:29;;17336:168;;;;:::o;17510:169::-;17594:11;17628:6;17623:3;17616:19;17668:4;17663:3;17659:14;17644:29;;17510:169;;;;:::o;17685:148::-;17787:11;17824:3;17809:18;;17685:148;;;;:::o;17839:305::-;17879:3;17898:20;17916:1;17898:20;:::i;:::-;17893:25;;17932:20;17950:1;17932:20;:::i;:::-;17927:25;;18086:1;18018:66;18014:74;18011:1;18008:81;18005:107;;;18092:18;;:::i;:::-;18005:107;18136:1;18133;18129:9;18122:16;;17839:305;;;;:::o;18150:191::-;18190:4;18210:20;18228:1;18210:20;:::i;:::-;18205:25;;18244:20;18262:1;18244:20;:::i;:::-;18239:25;;18283:1;18280;18277:8;18274:34;;;18288:18;;:::i;:::-;18274:34;18333:1;18330;18326:9;18318:17;;18150:191;;;;:::o;18347:96::-;18384:7;18413:24;18431:5;18413:24;:::i;:::-;18402:35;;18347:96;;;:::o;18449:90::-;18483:7;18526:5;18519:13;18512:21;18501:32;;18449:90;;;:::o;18545:149::-;18581:7;18621:66;18614:5;18610:78;18599:89;;18545:149;;;:::o;18700:126::-;18737:7;18777:42;18770:5;18766:54;18755:65;;18700:126;;;:::o;18832:77::-;18869:7;18898:5;18887:16;;18832:77;;;:::o;18915:154::-;18999:6;18994:3;18989;18976:30;19061:1;19052:6;19047:3;19043:16;19036:27;18915:154;;;:::o;19075:307::-;19143:1;19153:113;19167:6;19164:1;19161:13;19153:113;;;19252:1;19247:3;19243:11;19237:18;19233:1;19228:3;19224:11;19217:39;19189:2;19186:1;19182:10;19177:15;;19153:113;;;19284:6;19281:1;19278:13;19275:101;;;19364:1;19355:6;19350:3;19346:16;19339:27;19275:101;19124:258;19075:307;;;:::o;19388:320::-;19432:6;19469:1;19463:4;19459:12;19449:22;;19516:1;19510:4;19506:12;19537:18;19527:81;;19593:4;19585:6;19581:17;19571:27;;19527:81;19655:2;19647:6;19644:14;19624:18;19621:38;19618:84;;;19674:18;;:::i;:::-;19618:84;19439:269;19388:320;;;:::o;19714:281::-;19797:27;19819:4;19797:27;:::i;:::-;19789:6;19785:40;19927:6;19915:10;19912:22;19891:18;19879:10;19876:34;19873:62;19870:88;;;19938:18;;:::i;:::-;19870:88;19978:10;19974:2;19967:22;19757:238;19714:281;;:::o;20001:180::-;20049:77;20046:1;20039:88;20146:4;20143:1;20136:15;20170:4;20167:1;20160:15;20187:180;20235:77;20232:1;20225:88;20332:4;20329:1;20322:15;20356:4;20353:1;20346:15;20373:180;20421:77;20418:1;20411:88;20518:4;20515:1;20508:15;20542:4;20539:1;20532:15;20559:180;20607:77;20604:1;20597:88;20704:4;20701:1;20694:15;20728:4;20725:1;20718:15;20745:117;20854:1;20851;20844:12;20868:117;20977:1;20974;20967:12;20991:117;21100:1;21097;21090:12;21114:117;21223:1;21220;21213:12;21237:102;21278:6;21329:2;21325:7;21320:2;21313:5;21309:14;21305:28;21295:38;;21237:102;;;:::o;21345:232::-;21485:34;21481:1;21473:6;21469:14;21462:58;21554:15;21549:2;21541:6;21537:15;21530:40;21345:232;:::o;21583:237::-;21723:34;21719:1;21711:6;21707:14;21700:58;21792:20;21787:2;21779:6;21775:15;21768:45;21583:237;:::o;21826:224::-;21966:34;21962:1;21954:6;21950:14;21943:58;22035:7;22030:2;22022:6;22018:15;22011:32;21826:224;:::o;22056:223::-;22196:34;22192:1;22184:6;22180:14;22173:58;22265:6;22260:2;22252:6;22248:15;22241:31;22056:223;:::o;22285:175::-;22425:27;22421:1;22413:6;22409:14;22402:51;22285:175;:::o;22466:228::-;22606:34;22602:1;22594:6;22590:14;22583:58;22675:11;22670:2;22662:6;22658:15;22651:36;22466:228;:::o;22700:174::-;22840:26;22836:1;22828:6;22824:14;22817:50;22700:174;:::o;22880:220::-;23020:34;23016:1;23008:6;23004:14;22997:58;23089:3;23084:2;23076:6;23072:15;23065:28;22880:220;:::o;23106:248::-;23246:34;23242:1;23234:6;23230:14;23223:58;23315:31;23310:2;23302:6;23298:15;23291:56;23106:248;:::o;23360:122::-;23433:24;23451:5;23433:24;:::i;:::-;23426:5;23423:35;23413:63;;23472:1;23469;23462:12;23413:63;23360:122;:::o;23488:116::-;23558:21;23573:5;23558:21;:::i;:::-;23551:5;23548:32;23538:60;;23594:1;23591;23584:12;23538:60;23488:116;:::o;23610:120::-;23682:23;23699:5;23682:23;:::i;:::-;23675:5;23672:34;23662:62;;23720:1;23717;23710:12;23662:62;23610:120;:::o;23736:122::-;23809:24;23827:5;23809:24;:::i;:::-;23802:5;23799:35;23789:63;;23848:1;23845;23838:12;23789:63;23736:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1798800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2924","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3025","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3467","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":292,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":294,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":298,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":302,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":306,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":312,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":292,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":294,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":298,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":302,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":306,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":312,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1358,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122080fee02d62f18fb661f56930df7c1f126654f6b3a78ce5cc32cdcb32151203fd64736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 INVALID 0xE0 0x2D PUSH3 0xF18FB6 PUSH2 0xF569 ADDRESS 0xDF PUSH29 0x1F126654F6B3A78CE5CC32CDCB32151203FD64736F6C63430008070033 ","sourceMap":"194:8964:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122080fee02d62f18fb661f56930df7c1f126654f6b3a78ce5cc32cdcb32151203fd64736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP1 INVALID 0xE0 0x2D PUSH3 0xF18FB6 PUSH2 0xF569 ADDRESS 0xDF PUSH29 0x1F126654F6B3A78CE5CC32CDCB32151203FD64736F6C63430008070033 ","sourceMap":"194:8964:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204e54bbe508058abc16ba9ab18b15d60304dcfbec11b06791a21ce393f6c77ed564736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E SLOAD 0xBB 0xE5 ADDMOD SDIV DUP11 0xBC AND 0xBA SWAP11 0xB1 DUP12 ISZERO 0xD6 SUB DIV 0xDC 0xFB 0xEC GT 0xB0 PUSH8 0x91A21CE393F6C77E 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"188:2065:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204e54bbe508058abc16ba9ab18b15d60304dcfbec11b06791a21ce393f6c77ed564736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E SLOAD 0xBB 0xE5 ADDMOD SDIV DUP11 0xBC AND 0xBA SWAP11 0xB1 DUP12 ISZERO 0xD6 SUB DIV 0xDC 0xFB 0xEC GT 0xB0 PUSH8 0x91A21CE393F6C77E 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"188:2065:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220adc8bca8ac6496ed9b3beb6b4c3a022305dad7b59bb328b83de1bdab7925719c64736f6c63430008070033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD 0xC8 0xBC 0xA8 0xAC PUSH5 0x96ED9B3BEB PUSH12 0x4C3A022305DAD7B59BB328B8 RETURNDATASIZE 0xE1 0xBD 0xAB PUSH26 0x25719C64736F6C63430008070033000000000000000000000000 ","sourceMap":"202:12302:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220adc8bca8ac6496ed9b3beb6b4c3a022305dad7b59bb328b83de1bdab7925719c64736f6c63430008070033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD 0xC8 0xBC 0xA8 0xAC PUSH5 0x96ED9B3BEB PUSH12 0x4C3A022305DAD7B59BB328B8 RETURNDATASIZE 0xE1 0xBD 0xAB PUSH26 0x25719C64736F6C63430008070033000000000000000000000000 ","sourceMap":"202:12302:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/RandomIpfsNft.sol":{"RandomIpfsNft":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"string[3]","name":"dogTokenUris","type":"string[3]"},{"internalType":"uint256","name":"mintFee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"RandomIpfsNft__NeedMoreETHSent","type":"error"},{"inputs":[],"name":"RandomIpfsNft__RangeOutOfBounds","type":"error"},{"inputs":[],"name":"RandomIpfsNft__TranferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum RandomIpfsNft.Breed","name":"dogBreed","type":"uint8"},{"indexed":false,"internalType":"address","name":"minter","type":"address"}],"name":"NftMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"address","name":"requester","type":"address"}],"name":"NftRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"moddedRng","type":"uint256"}],"name":"getBreedFromModdedRng","outputs":[{"internalType":"enum RandomIpfsNft.Breed","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getCallbackGasLimit","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChanceArray","outputs":[{"internalType":"uint256[3]","name":"","type":"uint256[3]"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getDogTokenUris","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getGasLane","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMintFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"getSenderFromRequestId","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSubscriptionId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestNft","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"s_tokenCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_177":{"entryPoint":null,"id":177,"parameterSlots":0,"returnSlots":0},"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_3041":{"entryPoint":null,"id":3041,"parameterSlots":6,"returnSlots":0},"@_329":{"entryPoint":null,"id":329,"parameterSlots":2,"returnSlots":0},"@_msgSender_1839":{"entryPoint":473,"id":1839,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_265":{"entryPoint":481,"id":265,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory":{"entryPoint":1068,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":1215,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":1290,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory":{"entryPoint":1313,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":1361,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":1384,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":1435,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":1458,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":1481,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32t_array$_t_string_memory_ptr_$3_memory_ptrt_uint256_fromMemory":{"entryPoint":1504,"id":null,"parameterSlots":2,"returnSlots":6},"allocate_memory":{"entryPoint":1691,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1722,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr":{"entryPoint":1732,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":1773,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_address":{"entryPoint":1827,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":1847,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1857,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1889,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":1899,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":1915,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":1935,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1989,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":2043,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":2097,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2144,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2191,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2196,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":2201,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":2206,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2211,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2216,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_address":{"entryPoint":2233,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2259,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2285,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":2311,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":2337,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8292:15","statements":[{"body":{"nodeType":"YulBlock","src":"145:784:15","statements":[{"nodeType":"YulAssignment","src":"155:98:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"245:6:15"}],"functionName":{"name":"array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr","nodeType":"YulIdentifier","src":"180:64:15"},"nodeType":"YulFunctionCall","src":"180:72:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"164:15:15"},"nodeType":"YulFunctionCall","src":"164:89:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"155:5:15"}]},{"nodeType":"YulVariableDeclaration","src":"262:16:15","value":{"name":"array","nodeType":"YulIdentifier","src":"273:5:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"266:3:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"288:17:15","value":{"name":"offset","nodeType":"YulIdentifier","src":"299:6:15"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"292:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"354:103:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"368:77:15"},"nodeType":"YulFunctionCall","src":"368:79:15"},"nodeType":"YulExpressionStatement","src":"368:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"324:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"333:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"341:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"329:3:15"},"nodeType":"YulFunctionCall","src":"329:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"320:3:15"},"nodeType":"YulFunctionCall","src":"320:27:15"},{"name":"end","nodeType":"YulIdentifier","src":"349:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"317:2:15"},"nodeType":"YulFunctionCall","src":"317:36:15"},"nodeType":"YulIf","src":"314:143:15"},{"body":{"nodeType":"YulBlock","src":"526:397:15","statements":[{"nodeType":"YulVariableDeclaration","src":"541:29:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"566:3:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"560:5:15"},"nodeType":"YulFunctionCall","src":"560:10:15"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"545:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"622:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"624:77:15"},"nodeType":"YulFunctionCall","src":"624:79:15"},"nodeType":"YulExpressionStatement","src":"624:79:15"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"589:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"602:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"586:2:15"},"nodeType":"YulFunctionCall","src":"586:35:15"},"nodeType":"YulIf","src":"583:122:15"},{"nodeType":"YulVariableDeclaration","src":"718:42:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"740:6:15"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"748:11:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"736:3:15"},"nodeType":"YulFunctionCall","src":"736:24:15"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"722:10:15","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"781:3:15"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"828:10:15"},{"name":"end","nodeType":"YulIdentifier","src":"840:3:15"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"786:41:15"},"nodeType":"YulFunctionCall","src":"786:58:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"774:6:15"},"nodeType":"YulFunctionCall","src":"774:71:15"},"nodeType":"YulExpressionStatement","src":"774:71:15"},{"nodeType":"YulAssignment","src":"858:21:15","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"869:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"874:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"865:3:15"},"nodeType":"YulFunctionCall","src":"865:14:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"858:3:15"}]},{"nodeType":"YulAssignment","src":"892:21:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"903:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"908:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"899:3:15"},"nodeType":"YulFunctionCall","src":"899:14:15"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"892:3:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"488:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"491:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"485:2:15"},"nodeType":"YulFunctionCall","src":"485:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"499:18:15","statements":[{"nodeType":"YulAssignment","src":"501:14:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"510:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"513:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"506:3:15"},"nodeType":"YulFunctionCall","src":"506:9:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"501:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"470:14:15","statements":[{"nodeType":"YulVariableDeclaration","src":"472:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"481:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"476:1:15","type":""}]}]},"src":"466:457:15"}]},"name":"abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"115:6:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"123:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"131:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"139:5:15","type":""}],"src":"24:905:15"},{"body":{"nodeType":"YulBlock","src":"1030:326:15","statements":[{"nodeType":"YulAssignment","src":"1040:75:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1107:6:15"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1065:41:15"},"nodeType":"YulFunctionCall","src":"1065:49:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1049:15:15"},"nodeType":"YulFunctionCall","src":"1049:66:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1040:5:15"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1131:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"1138:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1124:6:15"},"nodeType":"YulFunctionCall","src":"1124:21:15"},"nodeType":"YulExpressionStatement","src":"1124:21:15"},{"nodeType":"YulVariableDeclaration","src":"1154:27:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"1169:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"1176:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1165:3:15"},"nodeType":"YulFunctionCall","src":"1165:16:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1158:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1219:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"1221:77:15"},"nodeType":"YulFunctionCall","src":"1221:79:15"},"nodeType":"YulExpressionStatement","src":"1221:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1200:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1205:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1196:3:15"},"nodeType":"YulFunctionCall","src":"1196:16:15"},{"name":"end","nodeType":"YulIdentifier","src":"1214:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1193:2:15"},"nodeType":"YulFunctionCall","src":"1193:25:15"},"nodeType":"YulIf","src":"1190:112:15"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1333:3:15"},{"name":"dst","nodeType":"YulIdentifier","src":"1338:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1343:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"1311:21:15"},"nodeType":"YulFunctionCall","src":"1311:39:15"},"nodeType":"YulExpressionStatement","src":"1311:39:15"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1003:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"1008:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1016:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1024:5:15","type":""}],"src":"935:421:15"},{"body":{"nodeType":"YulBlock","src":"1425:80:15","statements":[{"nodeType":"YulAssignment","src":"1435:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1450:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1444:5:15"},"nodeType":"YulFunctionCall","src":"1444:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1435:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1493:5:15"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1466:26:15"},"nodeType":"YulFunctionCall","src":"1466:33:15"},"nodeType":"YulExpressionStatement","src":"1466:33:15"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1403:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1411:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1419:5:15","type":""}],"src":"1362:143:15"},{"body":{"nodeType":"YulBlock","src":"1624:285:15","statements":[{"body":{"nodeType":"YulBlock","src":"1673:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1675:77:15"},"nodeType":"YulFunctionCall","src":"1675:79:15"},"nodeType":"YulExpressionStatement","src":"1675:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1652:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1660:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1648:3:15"},"nodeType":"YulFunctionCall","src":"1648:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"1667:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1644:3:15"},"nodeType":"YulFunctionCall","src":"1644:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1637:6:15"},"nodeType":"YulFunctionCall","src":"1637:35:15"},"nodeType":"YulIf","src":"1634:122:15"},{"nodeType":"YulVariableDeclaration","src":"1765:18:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1779:4:15","type":"","value":"0x03"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1769:6:15","type":""}]},{"nodeType":"YulAssignment","src":"1792:111:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1883:6:15"},{"name":"length","nodeType":"YulIdentifier","src":"1891:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"1899:3:15"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"1801:81:15"},"nodeType":"YulFunctionCall","src":"1801:102:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1792:5:15"}]}]},"name":"abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1602:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1610:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1618:5:15","type":""}],"src":"1528:381:15"},{"body":{"nodeType":"YulBlock","src":"1978:80:15","statements":[{"nodeType":"YulAssignment","src":"1988:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2003:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1997:5:15"},"nodeType":"YulFunctionCall","src":"1997:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1988:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2046:5:15"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"2019:26:15"},"nodeType":"YulFunctionCall","src":"2019:33:15"},"nodeType":"YulExpressionStatement","src":"2019:33:15"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1956:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1964:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1972:5:15","type":""}],"src":"1915:143:15"},{"body":{"nodeType":"YulBlock","src":"2151:282:15","statements":[{"body":{"nodeType":"YulBlock","src":"2200:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2202:77:15"},"nodeType":"YulFunctionCall","src":"2202:79:15"},"nodeType":"YulExpressionStatement","src":"2202:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2179:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2187:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2175:3:15"},"nodeType":"YulFunctionCall","src":"2175:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"2194:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2171:3:15"},"nodeType":"YulFunctionCall","src":"2171:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2164:6:15"},"nodeType":"YulFunctionCall","src":"2164:35:15"},"nodeType":"YulIf","src":"2161:122:15"},{"nodeType":"YulVariableDeclaration","src":"2292:27:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2312:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2306:5:15"},"nodeType":"YulFunctionCall","src":"2306:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2296:6:15","type":""}]},{"nodeType":"YulAssignment","src":"2328:99:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2400:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2408:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2396:3:15"},"nodeType":"YulFunctionCall","src":"2396:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"2415:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"2423:3:15"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2337:58:15"},"nodeType":"YulFunctionCall","src":"2337:90:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2328:5:15"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2129:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2137:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2145:5:15","type":""}],"src":"2078:355:15"},{"body":{"nodeType":"YulBlock","src":"2502:80:15","statements":[{"nodeType":"YulAssignment","src":"2512:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2527:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2521:5:15"},"nodeType":"YulFunctionCall","src":"2521:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2512:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2570:5:15"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2543:26:15"},"nodeType":"YulFunctionCall","src":"2543:33:15"},"nodeType":"YulExpressionStatement","src":"2543:33:15"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2480:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2488:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2496:5:15","type":""}],"src":"2439:143:15"},{"body":{"nodeType":"YulBlock","src":"2650:79:15","statements":[{"nodeType":"YulAssignment","src":"2660:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2675:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2669:5:15"},"nodeType":"YulFunctionCall","src":"2669:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2660:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2717:5:15"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"2691:25:15"},"nodeType":"YulFunctionCall","src":"2691:32:15"},"nodeType":"YulExpressionStatement","src":"2691:32:15"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2628:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2636:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2644:5:15","type":""}],"src":"2588:141:15"},{"body":{"nodeType":"YulBlock","src":"2797:79:15","statements":[{"nodeType":"YulAssignment","src":"2807:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2822:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2816:5:15"},"nodeType":"YulFunctionCall","src":"2816:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2807:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2864:5:15"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"2838:25:15"},"nodeType":"YulFunctionCall","src":"2838:32:15"},"nodeType":"YulExpressionStatement","src":"2838:32:15"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2775:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2783:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2791:5:15","type":""}],"src":"2735:141:15"},{"body":{"nodeType":"YulBlock","src":"3075:1156:15","statements":[{"body":{"nodeType":"YulBlock","src":"3122:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3124:77:15"},"nodeType":"YulFunctionCall","src":"3124:79:15"},"nodeType":"YulExpressionStatement","src":"3124:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3096:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3105:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3092:3:15"},"nodeType":"YulFunctionCall","src":"3092:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3117:3:15","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3088:3:15"},"nodeType":"YulFunctionCall","src":"3088:33:15"},"nodeType":"YulIf","src":"3085:120:15"},{"nodeType":"YulBlock","src":"3215:128:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3230:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3244:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3234:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3259:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3305:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3316:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3301:3:15"},"nodeType":"YulFunctionCall","src":"3301:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3325:7:15"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"3269:31:15"},"nodeType":"YulFunctionCall","src":"3269:64:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3259:6:15"}]}]},{"nodeType":"YulBlock","src":"3353:128:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3368:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3382:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3372:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3398:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3443:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3454:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3439:3:15"},"nodeType":"YulFunctionCall","src":"3439:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3463:7:15"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"3408:30:15"},"nodeType":"YulFunctionCall","src":"3408:63:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3398:6:15"}]}]},{"nodeType":"YulBlock","src":"3491:129:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3506:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3520:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3510:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3536:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3582:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3593:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3578:3:15"},"nodeType":"YulFunctionCall","src":"3578:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3602:7:15"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"3546:31:15"},"nodeType":"YulFunctionCall","src":"3546:64:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3536:6:15"}]}]},{"nodeType":"YulBlock","src":"3630:128:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3645:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3659:2:15","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3649:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3675:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3720:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3731:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3716:3:15"},"nodeType":"YulFunctionCall","src":"3716:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3740:7:15"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"3685:30:15"},"nodeType":"YulFunctionCall","src":"3685:63:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3675:6:15"}]}]},{"nodeType":"YulBlock","src":"3768:316:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3783:40:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3807:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3818:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3803:3:15"},"nodeType":"YulFunctionCall","src":"3803:19:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3797:5:15"},"nodeType":"YulFunctionCall","src":"3797:26:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3787:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3870:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3872:77:15"},"nodeType":"YulFunctionCall","src":"3872:79:15"},"nodeType":"YulExpressionStatement","src":"3872:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3842:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"3850:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3839:2:15"},"nodeType":"YulFunctionCall","src":"3839:30:15"},"nodeType":"YulIf","src":"3836:117:15"},{"nodeType":"YulAssignment","src":"3967:107:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4046:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4057:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4042:3:15"},"nodeType":"YulFunctionCall","src":"4042:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4066:7:15"}],"functionName":{"name":"abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3977:64:15"},"nodeType":"YulFunctionCall","src":"3977:97:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3967:6:15"}]}]},{"nodeType":"YulBlock","src":"4094:130:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4109:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4123:3:15","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4113:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4140:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4186:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4197:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4182:3:15"},"nodeType":"YulFunctionCall","src":"4182:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4206:7:15"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"4150:31:15"},"nodeType":"YulFunctionCall","src":"4150:64:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4140:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32t_array$_t_string_memory_ptr_$3_memory_ptrt_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3005:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3016:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3028:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3036:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3044:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3052:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3060:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3068:6:15","type":""}],"src":"2882:1349:15"},{"body":{"nodeType":"YulBlock","src":"4278:88:15","statements":[{"nodeType":"YulAssignment","src":"4288:30:15","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"4298:18:15"},"nodeType":"YulFunctionCall","src":"4298:20:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4288:6:15"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4347:6:15"},{"name":"size","nodeType":"YulIdentifier","src":"4355:4:15"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4327:19:15"},"nodeType":"YulFunctionCall","src":"4327:33:15"},"nodeType":"YulExpressionStatement","src":"4327:33:15"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"4262:4:15","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4271:6:15","type":""}],"src":"4237:129:15"},{"body":{"nodeType":"YulBlock","src":"4412:35:15","statements":[{"nodeType":"YulAssignment","src":"4422:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4438:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4432:5:15"},"nodeType":"YulFunctionCall","src":"4432:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4422:6:15"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4405:6:15","type":""}],"src":"4372:75:15"},{"body":{"nodeType":"YulBlock","src":"4543:169:15","statements":[{"body":{"nodeType":"YulBlock","src":"4648:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4650:16:15"},"nodeType":"YulFunctionCall","src":"4650:18:15"},"nodeType":"YulExpressionStatement","src":"4650:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4620:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4628:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4617:2:15"},"nodeType":"YulFunctionCall","src":"4617:30:15"},"nodeType":"YulIf","src":"4614:56:15"},{"nodeType":"YulAssignment","src":"4680:25:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4692:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4700:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4688:3:15"},"nodeType":"YulFunctionCall","src":"4688:17:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4680:4:15"}]}]},"name":"array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"4527:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"4538:4:15","type":""}],"src":"4453:259:15"},{"body":{"nodeType":"YulBlock","src":"4785:241:15","statements":[{"body":{"nodeType":"YulBlock","src":"4890:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4892:16:15"},"nodeType":"YulFunctionCall","src":"4892:18:15"},"nodeType":"YulExpressionStatement","src":"4892:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4862:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4870:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4859:2:15"},"nodeType":"YulFunctionCall","src":"4859:30:15"},"nodeType":"YulIf","src":"4856:56:15"},{"nodeType":"YulAssignment","src":"4922:37:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4952:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"4930:21:15"},"nodeType":"YulFunctionCall","src":"4930:29:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4922:4:15"}]},{"nodeType":"YulAssignment","src":"4996:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5008:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"5014:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5004:3:15"},"nodeType":"YulFunctionCall","src":"5004:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4996:4:15"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"4769:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"4780:4:15","type":""}],"src":"4718:308:15"},{"body":{"nodeType":"YulBlock","src":"5077:51:15","statements":[{"nodeType":"YulAssignment","src":"5087:35:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5116:5:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5098:17:15"},"nodeType":"YulFunctionCall","src":"5098:24:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5087:7:15"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5059:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5069:7:15","type":""}],"src":"5032:96:15"},{"body":{"nodeType":"YulBlock","src":"5179:32:15","statements":[{"nodeType":"YulAssignment","src":"5189:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"5200:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5189:7:15"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5161:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5171:7:15","type":""}],"src":"5134:77:15"},{"body":{"nodeType":"YulBlock","src":"5262:81:15","statements":[{"nodeType":"YulAssignment","src":"5272:65:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5287:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"5294:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5283:3:15"},"nodeType":"YulFunctionCall","src":"5283:54:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5272:7:15"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5244:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5254:7:15","type":""}],"src":"5217:126:15"},{"body":{"nodeType":"YulBlock","src":"5394:32:15","statements":[{"nodeType":"YulAssignment","src":"5404:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"5415:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5404:7:15"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5376:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5386:7:15","type":""}],"src":"5349:77:15"},{"body":{"nodeType":"YulBlock","src":"5476:49:15","statements":[{"nodeType":"YulAssignment","src":"5486:33:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5501:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"5508:10:15","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5497:3:15"},"nodeType":"YulFunctionCall","src":"5497:22:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5486:7:15"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5458:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5468:7:15","type":""}],"src":"5432:93:15"},{"body":{"nodeType":"YulBlock","src":"5575:57:15","statements":[{"nodeType":"YulAssignment","src":"5585:41:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5600:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"5607:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5596:3:15"},"nodeType":"YulFunctionCall","src":"5596:30:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5585:7:15"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5557:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5567:7:15","type":""}],"src":"5531:101:15"},{"body":{"nodeType":"YulBlock","src":"5687:258:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5697:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5706:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5701:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"5766:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5791:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"5796:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5787:3:15"},"nodeType":"YulFunctionCall","src":"5787:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5810:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"5815:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5806:3:15"},"nodeType":"YulFunctionCall","src":"5806:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5800:5:15"},"nodeType":"YulFunctionCall","src":"5800:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5780:6:15"},"nodeType":"YulFunctionCall","src":"5780:39:15"},"nodeType":"YulExpressionStatement","src":"5780:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5727:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"5730:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5724:2:15"},"nodeType":"YulFunctionCall","src":"5724:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5738:19:15","statements":[{"nodeType":"YulAssignment","src":"5740:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5749:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"5752:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5745:3:15"},"nodeType":"YulFunctionCall","src":"5745:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5740:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"5720:3:15","statements":[]},"src":"5716:113:15"},{"body":{"nodeType":"YulBlock","src":"5863:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5913:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"5918:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5909:3:15"},"nodeType":"YulFunctionCall","src":"5909:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"5927:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5902:6:15"},"nodeType":"YulFunctionCall","src":"5902:27:15"},"nodeType":"YulExpressionStatement","src":"5902:27:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5844:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"5847:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5841:2:15"},"nodeType":"YulFunctionCall","src":"5841:13:15"},"nodeType":"YulIf","src":"5838:101:15"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"5669:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"5674:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"5679:6:15","type":""}],"src":"5638:307:15"},{"body":{"nodeType":"YulBlock","src":"6002:269:15","statements":[{"nodeType":"YulAssignment","src":"6012:22:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6026:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"6032:1:15","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6022:3:15"},"nodeType":"YulFunctionCall","src":"6022:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6012:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"6043:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6073:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"6079:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6069:3:15"},"nodeType":"YulFunctionCall","src":"6069:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6047:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"6120:51:15","statements":[{"nodeType":"YulAssignment","src":"6134:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6148:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"6156:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6144:3:15"},"nodeType":"YulFunctionCall","src":"6144:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6134:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6100:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6093:6:15"},"nodeType":"YulFunctionCall","src":"6093:26:15"},"nodeType":"YulIf","src":"6090:81:15"},{"body":{"nodeType":"YulBlock","src":"6223:42:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6237:16:15"},"nodeType":"YulFunctionCall","src":"6237:18:15"},"nodeType":"YulExpressionStatement","src":"6237:18:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6187:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6210:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"6218:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6207:2:15"},"nodeType":"YulFunctionCall","src":"6207:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6184:2:15"},"nodeType":"YulFunctionCall","src":"6184:38:15"},"nodeType":"YulIf","src":"6181:84:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5986:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5995:6:15","type":""}],"src":"5951:320:15"},{"body":{"nodeType":"YulBlock","src":"6320:238:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6330:58:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6352:6:15"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6382:4:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"6360:21:15"},"nodeType":"YulFunctionCall","src":"6360:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6348:3:15"},"nodeType":"YulFunctionCall","src":"6348:40:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"6334:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"6499:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6501:16:15"},"nodeType":"YulFunctionCall","src":"6501:18:15"},"nodeType":"YulExpressionStatement","src":"6501:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6442:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"6454:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6439:2:15"},"nodeType":"YulFunctionCall","src":"6439:34:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6478:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"6490:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6475:2:15"},"nodeType":"YulFunctionCall","src":"6475:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6436:2:15"},"nodeType":"YulFunctionCall","src":"6436:62:15"},"nodeType":"YulIf","src":"6433:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6537:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"6541:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6530:6:15"},"nodeType":"YulFunctionCall","src":"6530:22:15"},"nodeType":"YulExpressionStatement","src":"6530:22:15"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6306:6:15","type":""},{"name":"size","nodeType":"YulTypedName","src":"6314:4:15","type":""}],"src":"6277:281:15"},{"body":{"nodeType":"YulBlock","src":"6592:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6609:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6612:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6602:6:15"},"nodeType":"YulFunctionCall","src":"6602:88:15"},"nodeType":"YulExpressionStatement","src":"6602:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6706:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6709:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6699:6:15"},"nodeType":"YulFunctionCall","src":"6699:15:15"},"nodeType":"YulExpressionStatement","src":"6699:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6730:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6733:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6723:6:15"},"nodeType":"YulFunctionCall","src":"6723:15:15"},"nodeType":"YulExpressionStatement","src":"6723:15:15"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"6564:180:15"},{"body":{"nodeType":"YulBlock","src":"6778:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6795:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6798:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6788:6:15"},"nodeType":"YulFunctionCall","src":"6788:88:15"},"nodeType":"YulExpressionStatement","src":"6788:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6892:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6895:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6885:6:15"},"nodeType":"YulFunctionCall","src":"6885:15:15"},"nodeType":"YulExpressionStatement","src":"6885:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6916:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6919:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6909:6:15"},"nodeType":"YulFunctionCall","src":"6909:15:15"},"nodeType":"YulExpressionStatement","src":"6909:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"6750:180:15"},{"body":{"nodeType":"YulBlock","src":"7025:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7042:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7045:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7035:6:15"},"nodeType":"YulFunctionCall","src":"7035:12:15"},"nodeType":"YulExpressionStatement","src":"7035:12:15"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6936:117:15"},{"body":{"nodeType":"YulBlock","src":"7148:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7165:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7168:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7158:6:15"},"nodeType":"YulFunctionCall","src":"7158:12:15"},"nodeType":"YulExpressionStatement","src":"7158:12:15"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"7059:117:15"},{"body":{"nodeType":"YulBlock","src":"7271:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7288:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7291:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7281:6:15"},"nodeType":"YulFunctionCall","src":"7281:12:15"},"nodeType":"YulExpressionStatement","src":"7281:12:15"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7182:117:15"},{"body":{"nodeType":"YulBlock","src":"7394:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7411:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7414:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7404:6:15"},"nodeType":"YulFunctionCall","src":"7404:12:15"},"nodeType":"YulExpressionStatement","src":"7404:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"7305:117:15"},{"body":{"nodeType":"YulBlock","src":"7517:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7534:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7537:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7527:6:15"},"nodeType":"YulFunctionCall","src":"7527:12:15"},"nodeType":"YulExpressionStatement","src":"7527:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"7428:117:15"},{"body":{"nodeType":"YulBlock","src":"7599:54:15","statements":[{"nodeType":"YulAssignment","src":"7609:38:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7627:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"7634:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7623:3:15"},"nodeType":"YulFunctionCall","src":"7623:14:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7643:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7639:3:15"},"nodeType":"YulFunctionCall","src":"7639:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7619:3:15"},"nodeType":"YulFunctionCall","src":"7619:28:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"7609:6:15"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7582:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"7592:6:15","type":""}],"src":"7551:102:15"},{"body":{"nodeType":"YulBlock","src":"7702:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"7759:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7768:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7771:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7761:6:15"},"nodeType":"YulFunctionCall","src":"7761:12:15"},"nodeType":"YulExpressionStatement","src":"7761:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7725:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7750:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"7732:17:15"},"nodeType":"YulFunctionCall","src":"7732:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7722:2:15"},"nodeType":"YulFunctionCall","src":"7722:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7715:6:15"},"nodeType":"YulFunctionCall","src":"7715:43:15"},"nodeType":"YulIf","src":"7712:63:15"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7695:5:15","type":""}],"src":"7659:122:15"},{"body":{"nodeType":"YulBlock","src":"7830:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"7887:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7896:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7899:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7889:6:15"},"nodeType":"YulFunctionCall","src":"7889:12:15"},"nodeType":"YulExpressionStatement","src":"7889:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7853:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7878:5:15"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"7860:17:15"},"nodeType":"YulFunctionCall","src":"7860:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7850:2:15"},"nodeType":"YulFunctionCall","src":"7850:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7843:6:15"},"nodeType":"YulFunctionCall","src":"7843:43:15"},"nodeType":"YulIf","src":"7840:63:15"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7823:5:15","type":""}],"src":"7787:122:15"},{"body":{"nodeType":"YulBlock","src":"7958:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"8015:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8024:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8027:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8017:6:15"},"nodeType":"YulFunctionCall","src":"8017:12:15"},"nodeType":"YulExpressionStatement","src":"8017:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7981:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8006:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7988:17:15"},"nodeType":"YulFunctionCall","src":"7988:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7978:2:15"},"nodeType":"YulFunctionCall","src":"7978:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7971:6:15"},"nodeType":"YulFunctionCall","src":"7971:43:15"},"nodeType":"YulIf","src":"7968:63:15"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7951:5:15","type":""}],"src":"7915:122:15"},{"body":{"nodeType":"YulBlock","src":"8085:78:15","statements":[{"body":{"nodeType":"YulBlock","src":"8141:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8150:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8153:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8143:6:15"},"nodeType":"YulFunctionCall","src":"8143:12:15"},"nodeType":"YulExpressionStatement","src":"8143:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8108:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8132:5:15"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"8115:16:15"},"nodeType":"YulFunctionCall","src":"8115:23:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8105:2:15"},"nodeType":"YulFunctionCall","src":"8105:34:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8098:6:15"},"nodeType":"YulFunctionCall","src":"8098:42:15"},"nodeType":"YulIf","src":"8095:62:15"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8078:5:15","type":""}],"src":"8043:120:15"},{"body":{"nodeType":"YulBlock","src":"8211:78:15","statements":[{"body":{"nodeType":"YulBlock","src":"8267:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8276:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8279:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8269:6:15"},"nodeType":"YulFunctionCall","src":"8269:12:15"},"nodeType":"YulExpressionStatement","src":"8269:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8234:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8258:5:15"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"8241:16:15"},"nodeType":"YulFunctionCall","src":"8241:23:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8231:2:15"},"nodeType":"YulFunctionCall","src":"8231:34:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8224:6:15"},"nodeType":"YulFunctionCall","src":"8224:42:15"},"nodeType":"YulIf","src":"8221:62:15"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8204:5:15","type":""}],"src":"8169:120:15"}]},"contents":"{\n\n    // string[3]\n    function abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr(length))\n        let dst := array\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let innerOffset := mload(src)\n            if gt(innerOffset, 0xffffffffffffffff) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n            let elementPos := add(offset, innerOffset)\n\n            mstore(dst, abi_decode_t_string_memory_ptr_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // string[3]\n    function abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := 0x03\n        array := abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory(offset, length, end)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32t_array$_t_string_memory_ptr_$3_memory_ptrt_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4 := abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE PUSH1 0x3C PUSH2 0x140 SWAP1 DUP2 MSTORE POP CALLVALUE DUP1 ISZERO PUSH3 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x47D1 CODESIZE SUB DUP1 PUSH3 0x47D1 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x41 SWAP2 SWAP1 PUSH3 0x5E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x52616E646F6D2049504653204E46540000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x52494E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP8 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xFE SWAP3 SWAP2 SWAP1 PUSH3 0x2A7 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x117 SWAP3 SWAP2 SWAP1 PUSH3 0x2A7 JUMP JUMPDEST POP POP POP PUSH3 0x13A PUSH3 0x12E PUSH3 0x1D9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1E1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP4 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP3 PUSH4 0xFFFFFFFF AND PUSH2 0x100 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP DUP2 PUSH1 0xA SWAP1 PUSH1 0x3 PUSH3 0x1C3 SWAP3 SWAP2 SWAP1 PUSH3 0x338 JUMP JUMPDEST POP DUP1 PUSH2 0x120 DUP2 DUP2 MSTORE POP POP POP POP POP POP POP POP PUSH3 0x93B JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x2B5 SWAP1 PUSH3 0x7C5 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x2D9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x325 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x2F4 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x325 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x325 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x324 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x307 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x334 SWAP2 SWAP1 PUSH3 0x39F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x38C JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x38B JUMPI DUP3 MLOAD DUP3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x37A SWAP3 SWAP2 SWAP1 PUSH3 0x2A7 JUMP JUMPDEST POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x359 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x39B SWAP2 SWAP1 PUSH3 0x3BE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3BA JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x3A0 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3E2 JUMPI PUSH1 0x0 DUP2 DUP2 PUSH3 0x3D8 SWAP2 SWAP1 PUSH3 0x3E6 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH3 0x3BF JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH3 0x3F4 SWAP1 PUSH3 0x7C5 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH3 0x408 JUMPI POP PUSH3 0x429 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH3 0x428 SWAP2 SWAP1 PUSH3 0x39F JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x443 PUSH3 0x43D DUP5 PUSH3 0x6C4 JUMP JUMPDEST PUSH3 0x69B JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH3 0x460 JUMPI PUSH3 0x45F PUSH3 0x894 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH3 0x4B5 JUMPI DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x48A JUMPI PUSH3 0x489 PUSH3 0x88F JUMP JUMPDEST JUMPDEST DUP1 DUP7 ADD PUSH3 0x499 DUP10 DUP3 PUSH3 0x568 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP5 ADD SWAP4 POP POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x463 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4D6 PUSH3 0x4D0 DUP5 PUSH3 0x6ED JUMP JUMPDEST PUSH3 0x69B JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x4F5 JUMPI PUSH3 0x4F4 PUSH3 0x899 JUMP JUMPDEST JUMPDEST PUSH3 0x502 DUP5 DUP3 DUP6 PUSH3 0x78F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x51B DUP2 PUSH3 0x8B9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x539 JUMPI PUSH3 0x538 PUSH3 0x88F JUMP JUMPDEST JUMPDEST PUSH1 0x3 PUSH3 0x548 DUP5 DUP3 DUP6 PUSH3 0x42C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x562 DUP2 PUSH3 0x8D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x580 JUMPI PUSH3 0x57F PUSH3 0x88F JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x592 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x4BF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x5AC DUP2 PUSH3 0x8ED JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x5C3 DUP2 PUSH3 0x907 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x5DA DUP2 PUSH3 0x921 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x600 JUMPI PUSH3 0x5FF PUSH3 0x8A3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x610 DUP10 DUP3 DUP11 ADD PUSH3 0x50A JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x623 DUP10 DUP3 DUP11 ADD PUSH3 0x5C9 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x636 DUP10 DUP3 DUP11 ADD PUSH3 0x551 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x649 DUP10 DUP3 DUP11 ADD PUSH3 0x5B2 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x66D JUMPI PUSH3 0x66C PUSH3 0x89E JUMP JUMPDEST JUMPDEST PUSH3 0x67B DUP10 DUP3 DUP11 ADD PUSH3 0x521 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x68E DUP10 DUP3 DUP11 ADD PUSH3 0x59B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6A7 PUSH3 0x6BA JUMP JUMPDEST SWAP1 POP PUSH3 0x6B5 DUP3 DUP3 PUSH3 0x7FB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x6E2 JUMPI PUSH3 0x6E1 PUSH3 0x860 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x70B JUMPI PUSH3 0x70A PUSH3 0x860 JUMP JUMPDEST JUMPDEST PUSH3 0x716 DUP3 PUSH3 0x8A8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x730 DUP3 PUSH3 0x741 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x7AF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x792 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x7BF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x7DE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x7F5 JUMPI PUSH3 0x7F4 PUSH3 0x831 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x806 DUP3 PUSH3 0x8A8 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x828 JUMPI PUSH3 0x827 PUSH3 0x860 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x8C4 DUP2 PUSH3 0x723 JUMP JUMPDEST DUP2 EQ PUSH3 0x8D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x8DE DUP2 PUSH3 0x737 JUMP JUMPDEST DUP2 EQ PUSH3 0x8EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x8F8 DUP2 PUSH3 0x761 JUMP JUMPDEST DUP2 EQ PUSH3 0x904 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x912 DUP2 PUSH3 0x76B JUMP JUMPDEST DUP2 EQ PUSH3 0x91E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x92C DUP2 PUSH3 0x77B JUMP JUMPDEST DUP2 EQ PUSH3 0x938 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xC0 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xE0 SHR PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x3E05 PUSH3 0x9CC PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0xCA4 ADD MSTORE PUSH2 0x1713 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0xE2C ADD MSTORE PUSH2 0x1045 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x111F ADD MSTORE PUSH2 0x1414 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x10DB ADD MSTORE PUSH2 0x12A7 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x10FC ADD MSTORE PUSH2 0x13E2 ADD MSTORE PUSH1 0x0 PUSH2 0x109F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x9DF ADD MSTORE PUSH2 0xA33 ADD MSTORE PUSH2 0x3E05 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xAA152491 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDE3D9FB7 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDE3D9FB7 EQ PUSH2 0x649 JUMPI DUP1 PUSH4 0xDE8BE8E7 EQ PUSH2 0x674 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x69F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6DC JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0xAA152491 EQ PUSH2 0x59A JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0xC19DD76B EQ PUSH2 0x5E1 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x60C JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x509 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x534 JUMPI DUP1 PUSH4 0xA51CCCF3 EQ PUSH2 0x55D JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0x7A5CAAB3 EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0x83762616 EQ PUSH2 0x4A1 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x3AF25975 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x5DACF5F4 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x5DACF5F4 EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x3BA JUMPI DUP1 PUSH4 0x6E02007D EQ PUSH2 0x3F7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x422 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x3AF25975 EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x366 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xB21A83B EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2E9 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x22F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x2C8A JUMP JUMPDEST PUSH2 0x705 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x3224 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x219 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x32F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x256 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0x879 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x263 SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28E SWAP2 SWAP1 PUSH2 0x2C4A JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AA PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B7 SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E2 SWAP2 SWAP1 PUSH2 0x2D3E JUMP JUMPDEST PUSH2 0x9DD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x2B34 JUMP JUMPDEST PUSH2 0xA9D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x339 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x32F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0xBAD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x2B34 JUMP JUMPDEST PUSH2 0xC61 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A4 PUSH2 0xC81 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DC SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0xCCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EE SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40C PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x419 SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x449 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x444 SWAP2 SWAP1 PUSH2 0x2AC7 JUMP JUMPDEST PUSH2 0xD5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x456 SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x474 PUSH2 0xE14 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x48B PUSH2 0xE28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x498 SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C3 SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0xE50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D5 SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F3 PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x500 SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51E PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x52B SWAP2 SWAP1 PUSH2 0x32F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x2C0A JUMP JUMPDEST PUSH2 0xF49 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x584 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x57F SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0xF5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x591 SWAP2 SWAP1 PUSH2 0x32AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5A2 PUSH2 0x1041 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5AF SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5DA SWAP2 SWAP1 PUSH2 0x2B87 JUMP JUMPDEST PUSH2 0x1241 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F6 PUSH2 0x12A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x603 SWAP2 SWAP1 PUSH2 0x323F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x633 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x62E SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0x12CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x640 SWAP2 SWAP1 PUSH2 0x32F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65E PUSH2 0x13DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66B SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x689 PUSH2 0x1410 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x696 SWAP2 SWAP1 PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6C1 SWAP2 SWAP1 PUSH2 0x2AF4 JUMP JUMPDEST PUSH2 0x1438 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6D3 SWAP2 SWAP1 PUSH2 0x3224 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x703 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6FE SWAP2 SWAP1 PUSH2 0x2AC7 JUMP JUMPDEST PUSH2 0x14CC JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x7D0 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x7E0 JUMPI POP PUSH2 0x7DF DUP3 PUSH2 0x1550 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x7F6 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x822 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x86F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x844 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x86F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x852 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x884 DUP3 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CA DUP3 PUSH2 0xCCB JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x93B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x932 SWAP1 PUSH2 0x3493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x95A PUSH2 0x1605 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x989 JUMPI POP PUSH2 0x988 DUP2 PUSH2 0x983 PUSH2 0x1605 JUMP JUMPDEST PUSH2 0x1438 JUMP JUMPDEST JUMPDEST PUSH2 0x9C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BF SWAP1 PUSH2 0x34B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9D2 DUP4 DUP4 PUSH2 0x160D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA8F JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA86 SWAP3 SWAP2 SWAP1 PUSH2 0x3194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA99 DUP3 DUP3 PUSH2 0x16C6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xAA8 PUSH2 0x1605 JUMP JUMPDEST DUP3 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0xAED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE4 SWAP1 PUSH2 0x3313 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAF8 DUP4 DUP4 DUP4 PUSH2 0x1956 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xB13 JUMPI PUSH2 0xB12 PUSH2 0x3940 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0xB28 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB54 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBA1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB76 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBA1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB84 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBB5 PUSH2 0x1C50 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0xBE0 SWAP1 PUSH2 0x3164 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC1D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xC5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B55CCE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC7C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1241 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xC89 PUSH2 0x2876 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCD7 DUP4 PUSH2 0x1CCE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD49 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD40 SWAP1 PUSH2 0x3473 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xDCD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC4 SWAP1 PUSH2 0x33F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE1C PUSH2 0x1C50 JUMP JUMPDEST PUSH2 0xE26 PUSH1 0x0 PUSH2 0x1D0B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xEC6 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xEF2 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF3F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF14 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF3F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF22 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF5B PUSH2 0xF54 PUSH2 0x1605 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1DD1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xF70 PUSH2 0xC81 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1009 JUMPI DUP3 DUP6 LT ISZERO DUP1 ISZERO PUSH2 0xFAF JUMPI POP DUP2 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xF9C JUMPI PUSH2 0xF9B PUSH2 0x3940 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0xFAC SWAP2 SWAP1 PUSH2 0x3606 JUMP JUMPDEST DUP6 LT JUMPDEST ISZERO PUSH2 0xFD1 JUMPI DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xFC7 JUMPI PUSH2 0xFC6 PUSH2 0x38E2 JUMP JUMPDEST JUMPDEST SWAP4 POP POP POP POP PUSH2 0x103C JUMP JUMPDEST DUP2 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xFE4 JUMPI PUSH2 0xFE3 PUSH2 0x3940 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0xFF4 SWAP2 SWAP1 PUSH2 0x3606 JUMP JUMPDEST SWAP3 POP DUP1 DUP1 PUSH2 0x1001 SWAP1 PUSH2 0x380A JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF75 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x12806C9D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x109D JUMPI PUSH1 0x40 MLOAD PUSH32 0xB90F491000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1160 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x325A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x117A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x118E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11B2 SWAP2 SWAP1 PUSH2 0x2D11 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x8 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH32 0xF873236E6CC0ECC5BE1A9A35C95EE5B8D1AC4CC7BFEF0CC5060391D6CC98E26B CALLER PUSH1 0x40 MLOAD PUSH2 0x1236 SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP1 JUMP JUMPDEST PUSH2 0x1252 PUSH2 0x124C PUSH2 0x1605 JUMP JUMPDEST DUP4 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x1291 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1288 SWAP1 PUSH2 0x3313 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x129D DUP5 DUP5 DUP5 DUP5 PUSH2 0x1F3E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x12D6 DUP3 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x12F6 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1322 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x136F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1344 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x136F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1352 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1380 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1396 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x13D9 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x13CB JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13B3 SWAP3 SWAP2 SWAP1 PUSH2 0x3140 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x13D9 JUMP JUMPDEST PUSH2 0x13D4 DUP5 PUSH2 0x1FB1 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x14D4 PUSH2 0x1C50 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1544 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x153B SWAP1 PUSH2 0x3353 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x154D DUP2 PUSH2 0x1D0B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15C3 DUP2 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x1602 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15F9 SWAP1 PUSH2 0x3473 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1680 DUP4 PUSH2 0xCCB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x9 SLOAD SWAP1 POP PUSH2 0x170F DUP3 DUP3 PUSH2 0x205A JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1746 JUMPI PUSH2 0x1745 PUSH2 0x3940 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1758 SWAP2 SWAP1 PUSH2 0x3853 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1765 DUP3 PUSH2 0xF5F JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x177A SWAP2 SWAP1 PUSH2 0x3606 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x17BE PUSH1 0x8 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1880 DUP4 PUSH1 0xA DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x17D7 JUMPI PUSH2 0x17D6 PUSH2 0x38E2 JUMP JUMPDEST JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x17E8 JUMPI PUSH2 0x17E7 PUSH2 0x3940 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x17FD SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1829 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1876 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x184B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1876 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1859 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x2078 JUMP JUMPDEST PUSH32 0x8A269F26B688E110E9CBD887D163DAB35CAE678FA353A0292DE532C0CAC1ECDC DUP2 DUP6 PUSH1 0x40 MLOAD PUSH2 0x18B1 SWAP3 SWAP2 SWAP1 PUSH2 0x32C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18CD DUP4 PUSH2 0xCCB JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x190F JUMPI POP PUSH2 0x190E DUP2 DUP6 PUSH2 0x1438 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x194D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1935 DUP5 PUSH2 0x879 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1976 DUP3 PUSH2 0xCCB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19C3 SWAP1 PUSH2 0x3373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1A3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A33 SWAP1 PUSH2 0x33B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A49 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x20EC JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1A69 DUP3 PUSH2 0xCCB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1ABF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AB6 SWAP1 PUSH2 0x3373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1C4B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2212 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C58 PUSH2 0x1605 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C76 PUSH2 0xE8D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1CCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CC3 SWAP1 PUSH2 0x3453 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1E40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E37 SWAP1 PUSH2 0x33D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1F31 SWAP2 SWAP1 PUSH2 0x3224 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1F49 DUP5 DUP5 DUP5 PUSH2 0x1956 JUMP JUMPDEST PUSH2 0x1F55 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2218 JUMP JUMPDEST PUSH2 0x1F94 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F8B SWAP1 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1FBC DUP3 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC6 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1FE6 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2011 JUMP JUMPDEST DUP1 PUSH2 0x1FF0 DUP5 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2001 SWAP3 SWAP2 SWAP1 PUSH2 0x3140 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x203B DUP4 PUSH2 0x1CCE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2074 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2487 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2081 DUP3 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x20C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20B7 SWAP1 PUSH2 0x3413 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x20E7 SWAP3 SWAP2 SWAP1 PUSH2 0x2898 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x220C JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2180 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2178 SWAP2 SWAP1 PUSH2 0x365C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x220B JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2203 SWAP2 SWAP1 PUSH2 0x3606 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2239 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x24E2 JUMP JUMPDEST ISZERO PUSH2 0x23A2 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x2262 PUSH2 0x1605 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2284 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31BD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x229E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x22CF JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22CC SWAP2 SWAP1 PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2352 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x22FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2304 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x234A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2341 SWAP1 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x23BE DUP5 PUSH2 0x2505 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23DD JUMPI PUSH2 0x23DC PUSH2 0x396F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x240F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x247C JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2466 JUMPI PUSH2 0x2465 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x2477 JUMPI PUSH2 0x247C JUMP JUMPDEST PUSH2 0x241D JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2491 DUP4 DUP4 PUSH2 0x2658 JUMP JUMPDEST PUSH2 0x249E PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x2218 JUMP JUMPDEST PUSH2 0x24DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24D4 SWAP1 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2563 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2559 JUMPI PUSH2 0x2558 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x25A0 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2596 JUMPI PUSH2 0x2595 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x25CF JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x25C5 JUMPI PUSH2 0x25C4 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x25F8 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x25EE JUMPI PUSH2 0x25ED PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x261D JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2613 JUMPI PUSH2 0x2612 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2640 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2636 JUMPI PUSH2 0x2635 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x264F JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x26C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26BF SWAP1 PUSH2 0x3433 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x26D1 DUP2 PUSH2 0x2019 JUMP JUMPDEST ISZERO PUSH2 0x2711 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2708 SWAP1 PUSH2 0x3393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x271F PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x20EC JUMP JUMPDEST PUSH2 0x2728 DUP2 PUSH2 0x2019 JUMP JUMPDEST ISZERO PUSH2 0x2768 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x275F SWAP1 PUSH2 0x3393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2872 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2212 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x28A4 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x28C6 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x290D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x28DF JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x290D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x290D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x290C JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x28F1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x291A SWAP2 SWAP1 PUSH2 0x291E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2937 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x291F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294E PUSH2 0x2949 DUP5 PUSH2 0x352E JUMP JUMPDEST PUSH2 0x3509 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x2971 JUMPI PUSH2 0x2970 PUSH2 0x39A3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x29A1 JUMPI DUP2 PUSH2 0x2987 DUP9 DUP3 PUSH2 0x2A9D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2974 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BE PUSH2 0x29B9 DUP5 PUSH2 0x355A JUMP JUMPDEST PUSH2 0x3509 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x29DA JUMPI PUSH2 0x29D9 PUSH2 0x39A8 JUMP JUMPDEST JUMPDEST PUSH2 0x29E5 DUP5 DUP3 DUP6 PUSH2 0x3765 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x29FC DUP2 PUSH2 0x3D73 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A17 JUMPI PUSH2 0x2A16 PUSH2 0x399E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A27 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x293B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2A3F DUP2 PUSH2 0x3D8A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2A54 DUP2 PUSH2 0x3DA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2A69 DUP2 PUSH2 0x3DA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A84 JUMPI PUSH2 0x2A83 PUSH2 0x399E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A94 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x29AB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2AAC DUP2 PUSH2 0x3DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2AC1 DUP2 PUSH2 0x3DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2ADD JUMPI PUSH2 0x2ADC PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AEB DUP5 DUP3 DUP6 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B0B JUMPI PUSH2 0x2B0A PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B19 DUP6 DUP3 DUP7 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2B2A DUP6 DUP3 DUP7 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B4D JUMPI PUSH2 0x2B4C PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B5B DUP7 DUP3 DUP8 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2B6C DUP7 DUP3 DUP8 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2B7D DUP7 DUP3 DUP8 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2BA1 JUMPI PUSH2 0x2BA0 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BAF DUP8 DUP3 DUP9 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2BC0 DUP8 DUP3 DUP9 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2BD1 DUP8 DUP3 DUP9 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BF2 JUMPI PUSH2 0x2BF1 PUSH2 0x39AD JUMP JUMPDEST JUMPDEST PUSH2 0x2BFE DUP8 DUP3 DUP9 ADD PUSH2 0x2A6F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C21 JUMPI PUSH2 0x2C20 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C2F DUP6 DUP3 DUP7 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2C40 DUP6 DUP3 DUP7 ADD PUSH2 0x2A30 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C61 JUMPI PUSH2 0x2C60 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C6F DUP6 DUP3 DUP7 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2C80 DUP6 DUP3 DUP7 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CA0 JUMPI PUSH2 0x2C9F PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CAE DUP5 DUP3 DUP6 ADD PUSH2 0x2A45 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CCD JUMPI PUSH2 0x2CCC PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CDB DUP5 DUP3 DUP6 ADD PUSH2 0x2A5A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CFA JUMPI PUSH2 0x2CF9 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D08 DUP5 DUP3 DUP6 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D27 JUMPI PUSH2 0x2D26 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D35 DUP5 DUP3 DUP6 ADD PUSH2 0x2AB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D55 JUMPI PUSH2 0x2D54 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D63 DUP6 DUP3 DUP7 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D84 JUMPI PUSH2 0x2D83 PUSH2 0x39AD JUMP JUMPDEST JUMPDEST PUSH2 0x2D90 DUP6 DUP3 DUP7 ADD PUSH2 0x2A02 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DA6 DUP4 DUP4 PUSH2 0x3104 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DBB DUP2 PUSH2 0x3690 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2DCA DUP2 PUSH2 0x3595 JUMP JUMPDEST PUSH2 0x2DD4 DUP2 DUP5 PUSH2 0x35C3 JUMP JUMPDEST SWAP3 POP PUSH2 0x2DDF DUP3 PUSH2 0x358B JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E10 JUMPI DUP2 MLOAD PUSH2 0x2DF7 DUP8 DUP3 PUSH2 0x2D9A JUMP JUMPDEST SWAP7 POP PUSH2 0x2E02 DUP4 PUSH2 0x35B6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2DE3 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2E21 DUP2 PUSH2 0x36A2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2E30 DUP2 PUSH2 0x36AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E41 DUP3 PUSH2 0x35A0 JUMP JUMPDEST PUSH2 0x2E4B DUP2 DUP6 PUSH2 0x35CE JUMP JUMPDEST SWAP4 POP PUSH2 0x2E5B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3774 JUMP JUMPDEST PUSH2 0x2E64 DUP2 PUSH2 0x39B7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2E78 DUP2 PUSH2 0x3753 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E89 DUP3 PUSH2 0x35AB JUMP JUMPDEST PUSH2 0x2E93 DUP2 DUP6 PUSH2 0x35EA JUMP JUMPDEST SWAP4 POP PUSH2 0x2EA3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3774 JUMP JUMPDEST PUSH2 0x2EAC DUP2 PUSH2 0x39B7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EC2 DUP3 PUSH2 0x35AB JUMP JUMPDEST PUSH2 0x2ECC DUP2 DUP6 PUSH2 0x35FB JUMP JUMPDEST SWAP4 POP PUSH2 0x2EDC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3774 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF5 PUSH1 0x2D DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F00 DUP3 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F18 PUSH1 0x32 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F23 DUP3 PUSH2 0x3A17 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F3B PUSH1 0x26 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F46 DUP3 PUSH2 0x3A66 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F5E PUSH1 0x25 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F69 DUP3 PUSH2 0x3AB5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F81 PUSH1 0x1C DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F8C DUP3 PUSH2 0x3B04 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FA4 PUSH1 0x24 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2FAF DUP3 PUSH2 0x3B2D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC7 PUSH1 0x19 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2FD2 DUP3 PUSH2 0x3B7C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FEA PUSH1 0x29 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2FF5 DUP3 PUSH2 0x3BA5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x300D PUSH1 0x2E DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3018 DUP3 PUSH2 0x3BF4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3030 PUSH1 0x20 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x303B DUP3 PUSH2 0x3C43 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3053 PUSH1 0x20 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x305E DUP3 PUSH2 0x3C6C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3076 PUSH1 0x18 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3081 DUP3 PUSH2 0x3C95 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3099 PUSH1 0x21 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x30A4 DUP3 PUSH2 0x3CBE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30BC PUSH1 0x0 DUP4 PUSH2 0x35DF JUMP JUMPDEST SWAP2 POP PUSH2 0x30C7 DUP3 PUSH2 0x3D0D JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30DF PUSH1 0x3D DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x30EA DUP3 PUSH2 0x3D10 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x30FE DUP2 PUSH2 0x36F7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x310D DUP2 PUSH2 0x3725 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x311C DUP2 PUSH2 0x3725 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x312B DUP2 PUSH2 0x372F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x313A DUP2 PUSH2 0x373F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x314C DUP3 DUP6 PUSH2 0x2EB7 JUMP JUMPDEST SWAP2 POP PUSH2 0x3158 DUP3 DUP5 PUSH2 0x2EB7 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x316F DUP3 PUSH2 0x30AF JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x318E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x31A9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2DB2 JUMP JUMPDEST PUSH2 0x31B6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2DB2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x31D2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2DB2 JUMP JUMPDEST PUSH2 0x31DF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2DB2 JUMP JUMPDEST PUSH2 0x31EC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3113 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x31FE DUP2 DUP5 PUSH2 0x2E36 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x321E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DC1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3239 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E18 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3254 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E27 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x326F PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2E27 JUMP JUMPDEST PUSH2 0x327C PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3131 JUMP JUMPDEST PUSH2 0x3289 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x30F5 JUMP JUMPDEST PUSH2 0x3296 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x3122 JUMP JUMPDEST PUSH2 0x32A3 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3122 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E6F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x32DD PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2E6F JUMP JUMPDEST PUSH2 0x32EA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2DB2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x330B DUP2 DUP5 PUSH2 0x2E7E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x332C DUP2 PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x334C DUP2 PUSH2 0x2F0B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x336C DUP2 PUSH2 0x2F2E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x338C DUP2 PUSH2 0x2F51 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33AC DUP2 PUSH2 0x2F74 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33CC DUP2 PUSH2 0x2F97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33EC DUP2 PUSH2 0x2FBA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x340C DUP2 PUSH2 0x2FDD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x342C DUP2 PUSH2 0x3000 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x344C DUP2 PUSH2 0x3023 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x346C DUP2 PUSH2 0x3046 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x348C DUP2 PUSH2 0x3069 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34AC DUP2 PUSH2 0x308C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34CC DUP2 PUSH2 0x30D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x34E8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3113 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3503 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3122 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3513 PUSH2 0x3524 JUMP JUMPDEST SWAP1 POP PUSH2 0x351F DUP3 DUP3 PUSH2 0x37D9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3549 JUMPI PUSH2 0x3548 PUSH2 0x396F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3575 JUMPI PUSH2 0x3574 PUSH2 0x396F JUMP JUMPDEST JUMPDEST PUSH2 0x357E DUP3 PUSH2 0x39B7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3611 DUP3 PUSH2 0x3725 JUMP JUMPDEST SWAP2 POP PUSH2 0x361C DUP4 PUSH2 0x3725 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x3651 JUMPI PUSH2 0x3650 PUSH2 0x3884 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3667 DUP3 PUSH2 0x3725 JUMP JUMPDEST SWAP2 POP PUSH2 0x3672 DUP4 PUSH2 0x3725 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x3685 JUMPI PUSH2 0x3684 PUSH2 0x3884 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x369B DUP3 PUSH2 0x3705 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x36F2 DUP3 PUSH2 0x3D5F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x375E DUP3 PUSH2 0x36E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3792 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3777 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x37A1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x37BF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x37D3 JUMPI PUSH2 0x37D2 PUSH2 0x3911 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x37E2 DUP3 PUSH2 0x39B7 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3801 JUMPI PUSH2 0x3800 PUSH2 0x396F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3815 DUP3 PUSH2 0x3725 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x3848 JUMPI PUSH2 0x3847 PUSH2 0x3884 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x385E DUP3 PUSH2 0x3725 JUMP JUMPDEST SWAP2 POP PUSH2 0x3869 DUP4 PUSH2 0x3725 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3879 JUMPI PUSH2 0x3878 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x3D70 JUMPI PUSH2 0x3D6F PUSH2 0x38E2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x3D7C DUP2 PUSH2 0x3690 JUMP JUMPDEST DUP2 EQ PUSH2 0x3D87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3D93 DUP2 PUSH2 0x36A2 JUMP JUMPDEST DUP2 EQ PUSH2 0x3D9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3DAA DUP2 PUSH2 0x36B8 JUMP JUMPDEST DUP2 EQ PUSH2 0x3DB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3DC1 DUP2 PUSH2 0x3725 JUMP JUMPDEST DUP2 EQ PUSH2 0x3DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 PUSH17 0xDDD3A2C66F6C4EDE94B810C4624FF3DA98 PUSH5 0x69EF5D038C 0xE9 SHR 0x4F 0xDC PUSH27 0x849964736F6C634300080700330000000000000000000000000000 ","sourceMap":"513:4194:14:-:0;;;1184:2;1138:48;;;;;1370:540;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:113:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1593:16:14;5616:15:0;5599:32;;;;;;;;;;;;5556:80;1464:5:3;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;936:32:2;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;1699:16:14::2;1654:62;;;;;;;;;;::::0;::::2;1738:7;1726:19;;;;::::0;::::2;1776:16;1755:37;;;;;;;;;;::::0;::::2;1821:14;1802:33;;;;;;;;;;::::0;::::2;1862:12;1845:14;:29;;;;;;;:::i;:::-;;1896:7;1884:19;;;;::::0;::::2;1370:540:::0;;;;;;513:4194;;640:96:9;693:7;719:10;712:17;;640:96;:::o;2433:187:2:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;513:4194:14:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;24:905:15:-;139:5;164:89;180:72;245:6;180:72;:::i;:::-;164:89;:::i;:::-;155:98;;273:5;299:6;349:3;341:4;333:6;329:17;324:3;320:27;317:36;314:143;;;368:79;;:::i;:::-;314:143;481:1;466:457;491:6;488:1;485:13;466:457;;;566:3;560:10;602:18;589:11;586:35;583:122;;;624:79;;:::i;:::-;583:122;748:11;740:6;736:24;786:58;840:3;828:10;786:58;:::i;:::-;781:3;774:71;874:4;869:3;865:14;858:21;;908:4;903:3;899:14;892:21;;526:397;;513:1;510;506:9;501:14;;466:457;;;470:14;145:784;;24:905;;;;;:::o;935:421::-;1024:5;1049:66;1065:49;1107:6;1065:49;:::i;:::-;1049:66;:::i;:::-;1040:75;;1138:6;1131:5;1124:21;1176:4;1169:5;1165:16;1214:3;1205:6;1200:3;1196:16;1193:25;1190:112;;;1221:79;;:::i;:::-;1190:112;1311:39;1343:6;1338:3;1333;1311:39;:::i;:::-;1030:326;935:421;;;;;:::o;1362:143::-;1419:5;1450:6;1444:13;1435:22;;1466:33;1493:5;1466:33;:::i;:::-;1362:143;;;;:::o;1528:381::-;1618:5;1667:3;1660:4;1652:6;1648:17;1644:27;1634:122;;1675:79;;:::i;:::-;1634:122;1779:4;1801:102;1899:3;1891:6;1883;1801:102;:::i;:::-;1792:111;;1624:285;1528:381;;;;:::o;1915:143::-;1972:5;2003:6;1997:13;1988:22;;2019:33;2046:5;2019:33;:::i;:::-;1915:143;;;;:::o;2078:355::-;2145:5;2194:3;2187:4;2179:6;2175:17;2171:27;2161:122;;2202:79;;:::i;:::-;2161:122;2312:6;2306:13;2337:90;2423:3;2415:6;2408:4;2400:6;2396:17;2337:90;:::i;:::-;2328:99;;2151:282;2078:355;;;;:::o;2439:143::-;2496:5;2527:6;2521:13;2512:22;;2543:33;2570:5;2543:33;:::i;:::-;2439:143;;;;:::o;2588:141::-;2644:5;2675:6;2669:13;2660:22;;2691:32;2717:5;2691:32;:::i;:::-;2588:141;;;;:::o;2735:::-;2791:5;2822:6;2816:13;2807:22;;2838:32;2864:5;2838:32;:::i;:::-;2735:141;;;;:::o;2882:1349::-;3028:6;3036;3044;3052;3060;3068;3117:3;3105:9;3096:7;3092:23;3088:33;3085:120;;;3124:79;;:::i;:::-;3085:120;3244:1;3269:64;3325:7;3316:6;3305:9;3301:22;3269:64;:::i;:::-;3259:74;;3215:128;3382:2;3408:63;3463:7;3454:6;3443:9;3439:22;3408:63;:::i;:::-;3398:73;;3353:128;3520:2;3546:64;3602:7;3593:6;3582:9;3578:22;3546:64;:::i;:::-;3536:74;;3491:129;3659:2;3685:63;3740:7;3731:6;3720:9;3716:22;3685:63;:::i;:::-;3675:73;;3630:128;3818:3;3807:9;3803:19;3797:26;3850:18;3842:6;3839:30;3836:117;;;3872:79;;:::i;:::-;3836:117;3977:97;4066:7;4057:6;4046:9;4042:22;3977:97;:::i;:::-;3967:107;;3768:316;4123:3;4150:64;4206:7;4197:6;4186:9;4182:22;4150:64;:::i;:::-;4140:74;;4094:130;2882:1349;;;;;;;;:::o;4237:129::-;4271:6;4298:20;;:::i;:::-;4288:30;;4327:33;4355:4;4347:6;4327:33;:::i;:::-;4237:129;;;:::o;4372:75::-;4405:6;4438:2;4432:9;4422:19;;4372:75;:::o;4453:259::-;4538:4;4628:18;4620:6;4617:30;4614:56;;;4650:18;;:::i;:::-;4614:56;4700:4;4692:6;4688:17;4680:25;;4453:259;;;:::o;4718:308::-;4780:4;4870:18;4862:6;4859:30;4856:56;;;4892:18;;:::i;:::-;4856:56;4930:29;4952:6;4930:29;:::i;:::-;4922:37;;5014:4;5008;5004:15;4996:23;;4718:308;;;:::o;5032:96::-;5069:7;5098:24;5116:5;5098:24;:::i;:::-;5087:35;;5032:96;;;:::o;5134:77::-;5171:7;5200:5;5189:16;;5134:77;;;:::o;5217:126::-;5254:7;5294:42;5287:5;5283:54;5272:65;;5217:126;;;:::o;5349:77::-;5386:7;5415:5;5404:16;;5349:77;;;:::o;5432:93::-;5468:7;5508:10;5501:5;5497:22;5486:33;;5432:93;;;:::o;5531:101::-;5567:7;5607:18;5600:5;5596:30;5585:41;;5531:101;;;:::o;5638:307::-;5706:1;5716:113;5730:6;5727:1;5724:13;5716:113;;;5815:1;5810:3;5806:11;5800:18;5796:1;5791:3;5787:11;5780:39;5752:2;5749:1;5745:10;5740:15;;5716:113;;;5847:6;5844:1;5841:13;5838:101;;;5927:1;5918:6;5913:3;5909:16;5902:27;5838:101;5687:258;5638:307;;;:::o;5951:320::-;5995:6;6032:1;6026:4;6022:12;6012:22;;6079:1;6073:4;6069:12;6100:18;6090:81;;6156:4;6148:6;6144:17;6134:27;;6090:81;6218:2;6210:6;6207:14;6187:18;6184:38;6181:84;;;6237:18;;:::i;:::-;6181:84;6002:269;5951:320;;;:::o;6277:281::-;6360:27;6382:4;6360:27;:::i;:::-;6352:6;6348:40;6490:6;6478:10;6475:22;6454:18;6442:10;6439:34;6436:62;6433:88;;;6501:18;;:::i;:::-;6433:88;6541:10;6537:2;6530:22;6320:238;6277:281;;:::o;6564:180::-;6612:77;6609:1;6602:88;6709:4;6706:1;6699:15;6733:4;6730:1;6723:15;6750:180;6798:77;6795:1;6788:88;6895:4;6892:1;6885:15;6919:4;6916:1;6909:15;6936:117;7045:1;7042;7035:12;7059:117;7168:1;7165;7158:12;7182:117;7291:1;7288;7281:12;7305:117;7414:1;7411;7404:12;7428:117;7537:1;7534;7527:12;7551:102;7592:6;7643:2;7639:7;7634:2;7627:5;7623:14;7619:28;7609:38;;7551:102;;;:::o;7659:122::-;7732:24;7750:5;7732:24;:::i;:::-;7725:5;7722:35;7712:63;;7771:1;7768;7761:12;7712:63;7659:122;:::o;7787:::-;7860:24;7878:5;7860:24;:::i;:::-;7853:5;7850:35;7840:63;;7899:1;7896;7889:12;7840:63;7787:122;:::o;7915:::-;7988:24;8006:5;7988:24;:::i;:::-;7981:5;7978:35;7968:63;;8027:1;8024;8017:12;7968:63;7915:122;:::o;8043:120::-;8115:23;8132:5;8115:23;:::i;:::-;8108:5;8105:34;8095:62;;8153:1;8150;8143:12;8095:62;8043:120;:::o;8169:::-;8241:23;8258:5;8241:23;:::i;:::-;8234:5;8231:34;8221:62;;8279:1;8276;8269:12;8221:62;8169:120;:::o;513:4194:14:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1210":{"entryPoint":8722,"id":1210,"parameterSlots":4,"returnSlots":0},"@_approve_1043":{"entryPoint":5645,"id":1043,"parameterSlots":2,"returnSlots":0},"@_baseURI_480":{"entryPoint":8090,"id":480,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1197":{"entryPoint":8428,"id":1197,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1151":{"entryPoint":8728,"id":1151,"parameterSlots":4,"returnSlots":1},"@_checkOwner_208":{"entryPoint":7248,"id":208,"parameterSlots":0,"returnSlots":0},"@_exists_712":{"entryPoint":8217,"id":712,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_746":{"entryPoint":6337,"id":746,"parameterSlots":2,"returnSlots":1},"@_mint_867":{"entryPoint":9816,"id":867,"parameterSlots":2,"returnSlots":0},"@_msgSender_1839":{"entryPoint":5637,"id":1839,"parameterSlots":0,"returnSlots":1},"@_ownerOf_694":{"entryPoint":7374,"id":694,"parameterSlots":1,"returnSlots":1},"@_requireMinted_1089":{"entryPoint":5562,"id":1089,"parameterSlots":1,"returnSlots":0},"@_safeMint_761":{"entryPoint":8282,"id":761,"parameterSlots":2,"returnSlots":0},"@_safeMint_790":{"entryPoint":9351,"id":790,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_681":{"entryPoint":7998,"id":681,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1075":{"entryPoint":7633,"id":1075,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_1439":{"entryPoint":8312,"id":1439,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_265":{"entryPoint":7435,"id":265,"parameterSlots":1,"returnSlots":0},"@_transfer_1019":{"entryPoint":6486,"id":1019,"parameterSlots":3,"returnSlots":0},"@approve_523":{"entryPoint":2239,"id":523,"parameterSlots":2,"returnSlots":0},"@balanceOf_384":{"entryPoint":3420,"id":384,"parameterSlots":1,"returnSlots":1},"@fulfillRandomWords_3180":{"entryPoint":5830,"id":3180,"parameterSlots":2,"returnSlots":0},"@getApproved_541":{"entryPoint":2169,"id":541,"parameterSlots":1,"returnSlots":1},"@getBreedFromModdedRng_3241":{"entryPoint":3935,"id":3241,"parameterSlots":1,"returnSlots":1},"@getCallbackGasLimit_3269":{"entryPoint":5136,"id":3269,"parameterSlots":0,"returnSlots":1},"@getChanceArray_3290":{"entryPoint":3201,"id":3290,"parameterSlots":0,"returnSlots":1},"@getDogTokenUris_3310":{"entryPoint":2813,"id":3310,"parameterSlots":1,"returnSlots":1},"@getGasLane_3277":{"entryPoint":4771,"id":3277,"parameterSlots":0,"returnSlots":1},"@getMintFee_3298":{"entryPoint":3624,"id":3298,"parameterSlots":0,"returnSlots":1},"@getSenderFromRequestId_3261":{"entryPoint":3664,"id":3261,"parameterSlots":1,"returnSlots":1},"@getSubscriptionId_3249":{"entryPoint":5086,"id":3249,"parameterSlots":0,"returnSlots":1},"@getTokenCounter_3318":{"entryPoint":3410,"id":3318,"parameterSlots":0,"returnSlots":1},"@isApprovedForAll_576":{"entryPoint":5176,"id":576,"parameterSlots":2,"returnSlots":1},"@isContract_1515":{"entryPoint":9442,"id":1515,"parameterSlots":1,"returnSlots":1},"@log10_2762":{"entryPoint":9477,"id":2762,"parameterSlots":1,"returnSlots":1},"@name_422":{"entryPoint":2023,"id":422,"parameterSlots":0,"returnSlots":1},"@ownerOf_412":{"entryPoint":3275,"id":412,"parameterSlots":1,"returnSlots":1},"@owner_194":{"entryPoint":3725,"id":194,"parameterSlots":0,"returnSlots":1},"@rawFulfillRandomWords_56":{"entryPoint":2525,"id":56,"parameterSlots":2,"returnSlots":0},"@renounceOwnership_222":{"entryPoint":3604,"id":222,"parameterSlots":0,"returnSlots":0},"@requestNft_3080":{"entryPoint":4161,"id":3080,"parameterSlots":0,"returnSlots":1},"@s_tokenCounter_2971":{"entryPoint":2519,"id":2971,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_622":{"entryPoint":3169,"id":622,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_652":{"entryPoint":4673,"id":652,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_558":{"entryPoint":3913,"id":558,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2047":{"entryPoint":5456,"id":2047,"parameterSlots":1,"returnSlots":1},"@supportsInterface_360":{"entryPoint":1797,"id":360,"parameterSlots":1,"returnSlots":1},"@symbol_432":{"entryPoint":3767,"id":432,"parameterSlots":0,"returnSlots":1},"@toString_1907":{"entryPoint":9135,"id":1907,"parameterSlots":1,"returnSlots":1},"@tokenURI_1417":{"entryPoint":4811,"id":1417,"parameterSlots":1,"returnSlots":1},"@tokenURI_471":{"entryPoint":8113,"id":471,"parameterSlots":1,"returnSlots":1},"@transferFrom_603":{"entryPoint":2717,"id":603,"parameterSlots":3,"returnSlots":0},"@transferOwnership_245":{"entryPoint":5324,"id":245,"parameterSlots":1,"returnSlots":0},"@withdraw_3114":{"entryPoint":2989,"id":3114,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":10555,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":10667,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":10733,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":10754,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":10800,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":10821,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":10842,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":10863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":10909,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":10930,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10951,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":10996,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":11060,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":11143,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":11274,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":11338,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":11402,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":11447,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":11492,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":11537,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":11582,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":11674,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":11698,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack":{"entryPoint":11713,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11800,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":11815,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":11830,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_Breed_$2948_to_t_uint8_fromStack":{"entryPoint":11887,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":11902,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11959,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":12008,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":12043,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":12078,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":12113,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":12148,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":12183,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":12218,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":12253,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack":{"entryPoint":12288,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":12323,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":12358,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":12393,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":12428,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12463,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":12498,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":12533,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":12548,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":12563,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":12578,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":12593,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12608,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12644,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":12665,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":12692,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":12733,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed":{"entryPoint":12809,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":12836,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":12863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":12890,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_enum$_Breed_$2948__to_t_uint8__fromStack_reversed":{"entryPoint":12973,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_Breed_$2948_t_address__to_t_uint8_t_address__fromStack_reversed":{"entryPoint":13000,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13041,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13075,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13107,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13139,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13171,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13203,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13235,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13267,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13299,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13331,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13363,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13395,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13427,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13459,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13491,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13523,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed":{"entryPoint":13550,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":13577,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":13604,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13614,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":13658,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":13707,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":13717,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":13728,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":13739,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":13750,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack":{"entryPoint":13763,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":13774,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13791,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":13802,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13819,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":13830,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":13916,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":13968,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":13986,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":13998,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":14008,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_Breed_$2948":{"entryPoint":14052,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":14071,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":14085,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":14117,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":14127,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":14143,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_Breed_$2948_to_t_uint8":{"entryPoint":14163,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":14181,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":14196,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":14247,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":14297,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":14346,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":14419,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":14468,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":14515,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":14562,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":14609,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":14656,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":14703,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":14750,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":14755,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":14760,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":14765,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":14770,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":14775,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":14792,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":14871,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":14950,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":15029,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":15108,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":15149,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":15228,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":15269,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4":{"entryPoint":15348,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":15427,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":15468,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":15509,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":15550,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":15629,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":15632,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_Breed_$2948":{"entryPoint":15711,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":15731,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":15754,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":15777,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":15800,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:38797:15","statements":[{"body":{"nodeType":"YulBlock","src":"126:620:15","statements":[{"nodeType":"YulAssignment","src":"136:90:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:15"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:15"},"nodeType":"YulFunctionCall","src":"161:64:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:15"},"nodeType":"YulFunctionCall","src":"145:81:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:15"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:15","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:15","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:15"},"nodeType":"YulFunctionCall","src":"261:21:15"},"nodeType":"YulExpressionStatement","src":"261:21:15"},{"nodeType":"YulAssignment","src":"291:23:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:15"},"nodeType":"YulFunctionCall","src":"298:16:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:15","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:15"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:103:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"404:77:15"},"nodeType":"YulFunctionCall","src":"404:79:15"},"nodeType":"YulExpressionStatement","src":"404:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:15"},"nodeType":"YulFunctionCall","src":"365:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:15"},"nodeType":"YulFunctionCall","src":"356:27:15"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:15"},"nodeType":"YulFunctionCall","src":"353:36:15"},"nodeType":"YulIf","src":"350:143:15"},{"body":{"nodeType":"YulBlock","src":"562:178:15","statements":[{"nodeType":"YulVariableDeclaration","src":"577:21:15","value":{"name":"src","nodeType":"YulIdentifier","src":"595:3:15"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"581:10:15","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:15"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"645:10:15"},{"name":"end","nodeType":"YulIdentifier","src":"657:3:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"624:20:15"},"nodeType":"YulFunctionCall","src":"624:37:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:15"},"nodeType":"YulFunctionCall","src":"612:50:15"},"nodeType":"YulExpressionStatement","src":"612:50:15"},{"nodeType":"YulAssignment","src":"675:21:15","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"686:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"691:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:15"},"nodeType":"YulFunctionCall","src":"682:14:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"675:3:15"}]},{"nodeType":"YulAssignment","src":"709:21:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"720:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"725:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:15"},"nodeType":"YulFunctionCall","src":"716:14:15"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"709:3:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"524:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"527:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"521:2:15"},"nodeType":"YulFunctionCall","src":"521:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"535:18:15","statements":[{"nodeType":"YulAssignment","src":"537:14:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"546:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"549:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:15"},"nodeType":"YulFunctionCall","src":"542:9:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"537:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"506:14:15","statements":[{"nodeType":"YulVariableDeclaration","src":"508:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"517:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"512:1:15","type":""}]}]},"src":"502:238:15"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:15","type":""}],"src":"24:722:15"},{"body":{"nodeType":"YulBlock","src":"835:327:15","statements":[{"nodeType":"YulAssignment","src":"845:74:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"911:6:15"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"870:40:15"},"nodeType":"YulFunctionCall","src":"870:48:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"854:15:15"},"nodeType":"YulFunctionCall","src":"854:65:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"845:5:15"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"935:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"942:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"928:6:15"},"nodeType":"YulFunctionCall","src":"928:21:15"},"nodeType":"YulExpressionStatement","src":"928:21:15"},{"nodeType":"YulVariableDeclaration","src":"958:27:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"973:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"980:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"969:3:15"},"nodeType":"YulFunctionCall","src":"969:16:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"962:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1023:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"1025:77:15"},"nodeType":"YulFunctionCall","src":"1025:79:15"},"nodeType":"YulExpressionStatement","src":"1025:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1004:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1009:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:15"},"nodeType":"YulFunctionCall","src":"1000:16:15"},{"name":"end","nodeType":"YulIdentifier","src":"1018:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"997:2:15"},"nodeType":"YulFunctionCall","src":"997:25:15"},"nodeType":"YulIf","src":"994:112:15"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1139:3:15"},{"name":"dst","nodeType":"YulIdentifier","src":"1144:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1149:6:15"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"1115:23:15"},"nodeType":"YulFunctionCall","src":"1115:41:15"},"nodeType":"YulExpressionStatement","src":"1115:41:15"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"808:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"813:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"821:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"829:5:15","type":""}],"src":"752:410:15"},{"body":{"nodeType":"YulBlock","src":"1220:87:15","statements":[{"nodeType":"YulAssignment","src":"1230:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1252:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1239:12:15"},"nodeType":"YulFunctionCall","src":"1239:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1230:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1295:5:15"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1268:26:15"},"nodeType":"YulFunctionCall","src":"1268:33:15"},"nodeType":"YulExpressionStatement","src":"1268:33:15"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1198:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1206:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1214:5:15","type":""}],"src":"1168:139:15"},{"body":{"nodeType":"YulBlock","src":"1407:293:15","statements":[{"body":{"nodeType":"YulBlock","src":"1456:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1458:77:15"},"nodeType":"YulFunctionCall","src":"1458:79:15"},"nodeType":"YulExpressionStatement","src":"1458:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1435:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1443:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1431:3:15"},"nodeType":"YulFunctionCall","src":"1431:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"1450:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1427:3:15"},"nodeType":"YulFunctionCall","src":"1427:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1420:6:15"},"nodeType":"YulFunctionCall","src":"1420:35:15"},"nodeType":"YulIf","src":"1417:122:15"},{"nodeType":"YulVariableDeclaration","src":"1548:34:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1575:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1562:12:15"},"nodeType":"YulFunctionCall","src":"1562:20:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1552:6:15","type":""}]},{"nodeType":"YulAssignment","src":"1591:103:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1667:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1675:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1663:3:15"},"nodeType":"YulFunctionCall","src":"1663:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"1682:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"1690:3:15"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1600:62:15"},"nodeType":"YulFunctionCall","src":"1600:94:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1591:5:15"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1385:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1393:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1401:5:15","type":""}],"src":"1330:370:15"},{"body":{"nodeType":"YulBlock","src":"1755:84:15","statements":[{"nodeType":"YulAssignment","src":"1765:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1787:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1774:12:15"},"nodeType":"YulFunctionCall","src":"1774:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1765:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1827:5:15"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"1803:23:15"},"nodeType":"YulFunctionCall","src":"1803:30:15"},"nodeType":"YulExpressionStatement","src":"1803:30:15"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1733:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1741:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1749:5:15","type":""}],"src":"1706:133:15"},{"body":{"nodeType":"YulBlock","src":"1896:86:15","statements":[{"nodeType":"YulAssignment","src":"1906:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1928:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1915:12:15"},"nodeType":"YulFunctionCall","src":"1915:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1906:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1970:5:15"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"1944:25:15"},"nodeType":"YulFunctionCall","src":"1944:32:15"},"nodeType":"YulExpressionStatement","src":"1944:32:15"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1874:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1882:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1890:5:15","type":""}],"src":"1845:137:15"},{"body":{"nodeType":"YulBlock","src":"2050:79:15","statements":[{"nodeType":"YulAssignment","src":"2060:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2075:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2069:5:15"},"nodeType":"YulFunctionCall","src":"2069:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2060:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2117:5:15"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"2091:25:15"},"nodeType":"YulFunctionCall","src":"2091:32:15"},"nodeType":"YulExpressionStatement","src":"2091:32:15"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2028:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2036:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2044:5:15","type":""}],"src":"1988:141:15"},{"body":{"nodeType":"YulBlock","src":"2209:277:15","statements":[{"body":{"nodeType":"YulBlock","src":"2258:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2260:77:15"},"nodeType":"YulFunctionCall","src":"2260:79:15"},"nodeType":"YulExpressionStatement","src":"2260:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2237:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2245:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2233:3:15"},"nodeType":"YulFunctionCall","src":"2233:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"2252:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2229:3:15"},"nodeType":"YulFunctionCall","src":"2229:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2222:6:15"},"nodeType":"YulFunctionCall","src":"2222:35:15"},"nodeType":"YulIf","src":"2219:122:15"},{"nodeType":"YulVariableDeclaration","src":"2350:34:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2377:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2364:12:15"},"nodeType":"YulFunctionCall","src":"2364:20:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2354:6:15","type":""}]},{"nodeType":"YulAssignment","src":"2393:87:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2453:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2461:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2449:3:15"},"nodeType":"YulFunctionCall","src":"2449:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"2468:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"2476:3:15"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"2402:46:15"},"nodeType":"YulFunctionCall","src":"2402:78:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2393:5:15"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2187:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2195:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2203:5:15","type":""}],"src":"2148:338:15"},{"body":{"nodeType":"YulBlock","src":"2544:87:15","statements":[{"nodeType":"YulAssignment","src":"2554:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2576:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2563:12:15"},"nodeType":"YulFunctionCall","src":"2563:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2554:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2619:5:15"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2592:26:15"},"nodeType":"YulFunctionCall","src":"2592:33:15"},"nodeType":"YulExpressionStatement","src":"2592:33:15"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2522:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2530:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2538:5:15","type":""}],"src":"2492:139:15"},{"body":{"nodeType":"YulBlock","src":"2700:80:15","statements":[{"nodeType":"YulAssignment","src":"2710:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2725:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2719:5:15"},"nodeType":"YulFunctionCall","src":"2719:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2710:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2768:5:15"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2741:26:15"},"nodeType":"YulFunctionCall","src":"2741:33:15"},"nodeType":"YulExpressionStatement","src":"2741:33:15"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2678:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2686:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2694:5:15","type":""}],"src":"2637:143:15"},{"body":{"nodeType":"YulBlock","src":"2852:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"2898:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2900:77:15"},"nodeType":"YulFunctionCall","src":"2900:79:15"},"nodeType":"YulExpressionStatement","src":"2900:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2873:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2882:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2869:3:15"},"nodeType":"YulFunctionCall","src":"2869:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"2894:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2865:3:15"},"nodeType":"YulFunctionCall","src":"2865:32:15"},"nodeType":"YulIf","src":"2862:119:15"},{"nodeType":"YulBlock","src":"2991:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3006:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3020:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3010:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3035:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3070:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3081:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3066:3:15"},"nodeType":"YulFunctionCall","src":"3066:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3090:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3045:20:15"},"nodeType":"YulFunctionCall","src":"3045:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3035:6:15"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2822:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2833:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2845:6:15","type":""}],"src":"2786:329:15"},{"body":{"nodeType":"YulBlock","src":"3204:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"3250:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3252:77:15"},"nodeType":"YulFunctionCall","src":"3252:79:15"},"nodeType":"YulExpressionStatement","src":"3252:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3225:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3234:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3221:3:15"},"nodeType":"YulFunctionCall","src":"3221:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3246:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3217:3:15"},"nodeType":"YulFunctionCall","src":"3217:32:15"},"nodeType":"YulIf","src":"3214:119:15"},{"nodeType":"YulBlock","src":"3343:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3358:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3372:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3362:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3387:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3422:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3433:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3418:3:15"},"nodeType":"YulFunctionCall","src":"3418:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3442:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3397:20:15"},"nodeType":"YulFunctionCall","src":"3397:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3387:6:15"}]}]},{"nodeType":"YulBlock","src":"3470:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3485:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3499:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3489:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3515:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3550:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3561:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3546:3:15"},"nodeType":"YulFunctionCall","src":"3546:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3570:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3525:20:15"},"nodeType":"YulFunctionCall","src":"3525:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3515:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3166:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3177:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3189:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3197:6:15","type":""}],"src":"3121:474:15"},{"body":{"nodeType":"YulBlock","src":"3701:519:15","statements":[{"body":{"nodeType":"YulBlock","src":"3747:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3749:77:15"},"nodeType":"YulFunctionCall","src":"3749:79:15"},"nodeType":"YulExpressionStatement","src":"3749:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3722:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3731:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3718:3:15"},"nodeType":"YulFunctionCall","src":"3718:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3743:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3714:3:15"},"nodeType":"YulFunctionCall","src":"3714:32:15"},"nodeType":"YulIf","src":"3711:119:15"},{"nodeType":"YulBlock","src":"3840:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3855:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3869:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3859:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3884:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3919:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"3930:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3915:3:15"},"nodeType":"YulFunctionCall","src":"3915:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3939:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3894:20:15"},"nodeType":"YulFunctionCall","src":"3894:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3884:6:15"}]}]},{"nodeType":"YulBlock","src":"3967:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3982:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3996:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3986:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4012:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4047:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4058:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4043:3:15"},"nodeType":"YulFunctionCall","src":"4043:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4067:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4022:20:15"},"nodeType":"YulFunctionCall","src":"4022:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4012:6:15"}]}]},{"nodeType":"YulBlock","src":"4095:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4110:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4124:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4114:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4140:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4175:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4186:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4171:3:15"},"nodeType":"YulFunctionCall","src":"4171:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4195:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4150:20:15"},"nodeType":"YulFunctionCall","src":"4150:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4140:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3655:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3666:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3678:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3686:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3694:6:15","type":""}],"src":"3601:619:15"},{"body":{"nodeType":"YulBlock","src":"4352:817:15","statements":[{"body":{"nodeType":"YulBlock","src":"4399:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4401:77:15"},"nodeType":"YulFunctionCall","src":"4401:79:15"},"nodeType":"YulExpressionStatement","src":"4401:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4373:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4382:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4369:3:15"},"nodeType":"YulFunctionCall","src":"4369:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4394:3:15","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4365:3:15"},"nodeType":"YulFunctionCall","src":"4365:33:15"},"nodeType":"YulIf","src":"4362:120:15"},{"nodeType":"YulBlock","src":"4492:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4507:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4521:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4511:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4536:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4582:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4567:3:15"},"nodeType":"YulFunctionCall","src":"4567:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4591:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4546:20:15"},"nodeType":"YulFunctionCall","src":"4546:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4536:6:15"}]}]},{"nodeType":"YulBlock","src":"4619:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4634:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4648:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4638:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4664:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4699:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4710:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4695:3:15"},"nodeType":"YulFunctionCall","src":"4695:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4719:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4674:20:15"},"nodeType":"YulFunctionCall","src":"4674:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4664:6:15"}]}]},{"nodeType":"YulBlock","src":"4747:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4762:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4776:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4766:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4792:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4827:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4838:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4823:3:15"},"nodeType":"YulFunctionCall","src":"4823:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4847:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4802:20:15"},"nodeType":"YulFunctionCall","src":"4802:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4792:6:15"}]}]},{"nodeType":"YulBlock","src":"4875:287:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4890:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4921:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4932:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4917:3:15"},"nodeType":"YulFunctionCall","src":"4917:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4904:12:15"},"nodeType":"YulFunctionCall","src":"4904:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4894:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4983:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4985:77:15"},"nodeType":"YulFunctionCall","src":"4985:79:15"},"nodeType":"YulExpressionStatement","src":"4985:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4955:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4963:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4952:2:15"},"nodeType":"YulFunctionCall","src":"4952:30:15"},"nodeType":"YulIf","src":"4949:117:15"},{"nodeType":"YulAssignment","src":"5080:72:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5124:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5135:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5120:3:15"},"nodeType":"YulFunctionCall","src":"5120:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5144:7:15"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5090:29:15"},"nodeType":"YulFunctionCall","src":"5090:62:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5080:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4298:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4309:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4321:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4329:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4337:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4345:6:15","type":""}],"src":"4226:943:15"},{"body":{"nodeType":"YulBlock","src":"5255:388:15","statements":[{"body":{"nodeType":"YulBlock","src":"5301:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5303:77:15"},"nodeType":"YulFunctionCall","src":"5303:79:15"},"nodeType":"YulExpressionStatement","src":"5303:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5276:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"5285:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5272:3:15"},"nodeType":"YulFunctionCall","src":"5272:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"5297:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5268:3:15"},"nodeType":"YulFunctionCall","src":"5268:32:15"},"nodeType":"YulIf","src":"5265:119:15"},{"nodeType":"YulBlock","src":"5394:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5409:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5423:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5413:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5438:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5473:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5484:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5469:3:15"},"nodeType":"YulFunctionCall","src":"5469:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5493:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5448:20:15"},"nodeType":"YulFunctionCall","src":"5448:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5438:6:15"}]}]},{"nodeType":"YulBlock","src":"5521:115:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5536:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5550:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5540:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5566:60:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5598:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5609:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5594:3:15"},"nodeType":"YulFunctionCall","src":"5594:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5618:7:15"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"5576:17:15"},"nodeType":"YulFunctionCall","src":"5576:50:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5566:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5217:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5228:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5240:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5248:6:15","type":""}],"src":"5175:468:15"},{"body":{"nodeType":"YulBlock","src":"5732:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"5778:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5780:77:15"},"nodeType":"YulFunctionCall","src":"5780:79:15"},"nodeType":"YulExpressionStatement","src":"5780:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5753:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"5762:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5749:3:15"},"nodeType":"YulFunctionCall","src":"5749:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"5774:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5745:3:15"},"nodeType":"YulFunctionCall","src":"5745:32:15"},"nodeType":"YulIf","src":"5742:119:15"},{"nodeType":"YulBlock","src":"5871:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5886:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5900:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5890:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5915:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5950:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5961:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5946:3:15"},"nodeType":"YulFunctionCall","src":"5946:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5970:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5925:20:15"},"nodeType":"YulFunctionCall","src":"5925:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5915:6:15"}]}]},{"nodeType":"YulBlock","src":"5998:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6013:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6027:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6017:6:15","type":""}]},{"nodeType":"YulAssignment","src":"6043:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6078:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"6089:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6074:3:15"},"nodeType":"YulFunctionCall","src":"6074:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6098:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6053:20:15"},"nodeType":"YulFunctionCall","src":"6053:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6043:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5694:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5705:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5717:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5725:6:15","type":""}],"src":"5649:474:15"},{"body":{"nodeType":"YulBlock","src":"6194:262:15","statements":[{"body":{"nodeType":"YulBlock","src":"6240:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6242:77:15"},"nodeType":"YulFunctionCall","src":"6242:79:15"},"nodeType":"YulExpressionStatement","src":"6242:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6215:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"6224:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6211:3:15"},"nodeType":"YulFunctionCall","src":"6211:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"6236:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6207:3:15"},"nodeType":"YulFunctionCall","src":"6207:32:15"},"nodeType":"YulIf","src":"6204:119:15"},{"nodeType":"YulBlock","src":"6333:116:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6348:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6362:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6352:6:15","type":""}]},{"nodeType":"YulAssignment","src":"6377:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6411:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"6422:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6407:3:15"},"nodeType":"YulFunctionCall","src":"6407:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6431:7:15"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"6387:19:15"},"nodeType":"YulFunctionCall","src":"6387:52:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6377:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6164:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6175:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6187:6:15","type":""}],"src":"6129:327:15"},{"body":{"nodeType":"YulBlock","src":"6538:273:15","statements":[{"body":{"nodeType":"YulBlock","src":"6584:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6586:77:15"},"nodeType":"YulFunctionCall","src":"6586:79:15"},"nodeType":"YulExpressionStatement","src":"6586:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6559:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"6568:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6555:3:15"},"nodeType":"YulFunctionCall","src":"6555:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"6580:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6551:3:15"},"nodeType":"YulFunctionCall","src":"6551:32:15"},"nodeType":"YulIf","src":"6548:119:15"},{"nodeType":"YulBlock","src":"6677:127:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6692:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6706:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6696:6:15","type":""}]},{"nodeType":"YulAssignment","src":"6721:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6766:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"6777:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6762:3:15"},"nodeType":"YulFunctionCall","src":"6762:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6786:7:15"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"6731:30:15"},"nodeType":"YulFunctionCall","src":"6731:63:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6721:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6508:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6519:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6531:6:15","type":""}],"src":"6462:349:15"},{"body":{"nodeType":"YulBlock","src":"6883:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"6929:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6931:77:15"},"nodeType":"YulFunctionCall","src":"6931:79:15"},"nodeType":"YulExpressionStatement","src":"6931:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6904:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"6913:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6900:3:15"},"nodeType":"YulFunctionCall","src":"6900:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"6925:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6896:3:15"},"nodeType":"YulFunctionCall","src":"6896:32:15"},"nodeType":"YulIf","src":"6893:119:15"},{"nodeType":"YulBlock","src":"7022:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7037:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7051:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7041:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7066:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7101:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7112:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7097:3:15"},"nodeType":"YulFunctionCall","src":"7097:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7121:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7076:20:15"},"nodeType":"YulFunctionCall","src":"7076:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7066:6:15"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6853:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6864:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6876:6:15","type":""}],"src":"6817:329:15"},{"body":{"nodeType":"YulBlock","src":"7229:274:15","statements":[{"body":{"nodeType":"YulBlock","src":"7275:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7277:77:15"},"nodeType":"YulFunctionCall","src":"7277:79:15"},"nodeType":"YulExpressionStatement","src":"7277:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7250:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"7259:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7246:3:15"},"nodeType":"YulFunctionCall","src":"7246:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"7271:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7242:3:15"},"nodeType":"YulFunctionCall","src":"7242:32:15"},"nodeType":"YulIf","src":"7239:119:15"},{"nodeType":"YulBlock","src":"7368:128:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7383:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7397:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7387:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7412:74:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7458:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7469:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7454:3:15"},"nodeType":"YulFunctionCall","src":"7454:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7478:7:15"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"7422:31:15"},"nodeType":"YulFunctionCall","src":"7422:64:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7412:6:15"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7199:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7210:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7222:6:15","type":""}],"src":"7152:351:15"},{"body":{"nodeType":"YulBlock","src":"7617:576:15","statements":[{"body":{"nodeType":"YulBlock","src":"7663:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7665:77:15"},"nodeType":"YulFunctionCall","src":"7665:79:15"},"nodeType":"YulExpressionStatement","src":"7665:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7638:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"7647:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7634:3:15"},"nodeType":"YulFunctionCall","src":"7634:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"7659:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7630:3:15"},"nodeType":"YulFunctionCall","src":"7630:32:15"},"nodeType":"YulIf","src":"7627:119:15"},{"nodeType":"YulBlock","src":"7756:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7771:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7785:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7775:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7800:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7835:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7846:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7831:3:15"},"nodeType":"YulFunctionCall","src":"7831:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7855:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7810:20:15"},"nodeType":"YulFunctionCall","src":"7810:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7800:6:15"}]}]},{"nodeType":"YulBlock","src":"7883:303:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7898:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7929:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7940:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7925:3:15"},"nodeType":"YulFunctionCall","src":"7925:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7912:12:15"},"nodeType":"YulFunctionCall","src":"7912:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7902:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"7991:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7993:77:15"},"nodeType":"YulFunctionCall","src":"7993:79:15"},"nodeType":"YulExpressionStatement","src":"7993:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7963:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"7971:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7960:2:15"},"nodeType":"YulFunctionCall","src":"7960:30:15"},"nodeType":"YulIf","src":"7957:117:15"},{"nodeType":"YulAssignment","src":"8088:88:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8148:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"8159:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8144:3:15"},"nodeType":"YulFunctionCall","src":"8144:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8168:7:15"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8098:45:15"},"nodeType":"YulFunctionCall","src":"8098:78:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8088:6:15"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7579:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7590:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7602:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7610:6:15","type":""}],"src":"7509:684:15"},{"body":{"nodeType":"YulBlock","src":"8279:99:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8323:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"8331:3:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"8289:33:15"},"nodeType":"YulFunctionCall","src":"8289:46:15"},"nodeType":"YulExpressionStatement","src":"8289:46:15"},{"nodeType":"YulAssignment","src":"8344:28:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8362:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"8367:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8358:3:15"},"nodeType":"YulFunctionCall","src":"8358:14:15"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"8344:10:15"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"8252:6:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8260:3:15","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"8268:10:15","type":""}],"src":"8199:179:15"},{"body":{"nodeType":"YulBlock","src":"8449:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8466:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8489:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"8471:17:15"},"nodeType":"YulFunctionCall","src":"8471:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8459:6:15"},"nodeType":"YulFunctionCall","src":"8459:37:15"},"nodeType":"YulExpressionStatement","src":"8459:37:15"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8437:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8444:3:15","type":""}],"src":"8384:118:15"},{"body":{"nodeType":"YulBlock","src":"8652:582:15","statements":[{"nodeType":"YulVariableDeclaration","src":"8662:66:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8722:5:15"}],"functionName":{"name":"array_length_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"8676:45:15"},"nodeType":"YulFunctionCall","src":"8676:52:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8666:6:15","type":""}]},{"nodeType":"YulAssignment","src":"8737:91:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8816:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"8821:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8744:71:15"},"nodeType":"YulFunctionCall","src":"8744:84:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8737:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"8837:69:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8900:5:15"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"8852:47:15"},"nodeType":"YulFunctionCall","src":"8852:54:15"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"8841:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8915:21:15","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"8929:7:15"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"8919:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"9005:222:15","statements":[{"nodeType":"YulVariableDeclaration","src":"9019:34:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9046:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9040:5:15"},"nodeType":"YulFunctionCall","src":"9040:13:15"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"9023:13:15","type":""}]},{"nodeType":"YulAssignment","src":"9066:70:15","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"9117:13:15"},{"name":"pos","nodeType":"YulIdentifier","src":"9132:3:15"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"9073:43:15"},"nodeType":"YulFunctionCall","src":"9073:63:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9066:3:15"}]},{"nodeType":"YulAssignment","src":"9149:68:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9210:6:15"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"9159:50:15"},"nodeType":"YulFunctionCall","src":"9159:58:15"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"9149:6:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8967:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"8970:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8964:2:15"},"nodeType":"YulFunctionCall","src":"8964:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8978:18:15","statements":[{"nodeType":"YulAssignment","src":"8980:14:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8989:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"8992:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8985:3:15"},"nodeType":"YulFunctionCall","src":"8985:9:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8980:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"8949:14:15","statements":[{"nodeType":"YulVariableDeclaration","src":"8951:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"8960:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8955:1:15","type":""}]}]},"src":"8945:282:15"}]},"name":"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8639:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8646:3:15","type":""}],"src":"8540:694:15"},{"body":{"nodeType":"YulBlock","src":"9299:50:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9316:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9336:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9321:14:15"},"nodeType":"YulFunctionCall","src":"9321:21:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9309:6:15"},"nodeType":"YulFunctionCall","src":"9309:34:15"},"nodeType":"YulExpressionStatement","src":"9309:34:15"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9287:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9294:3:15","type":""}],"src":"9240:109:15"},{"body":{"nodeType":"YulBlock","src":"9420:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9437:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9460:5:15"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"9442:17:15"},"nodeType":"YulFunctionCall","src":"9442:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9430:6:15"},"nodeType":"YulFunctionCall","src":"9430:37:15"},"nodeType":"YulExpressionStatement","src":"9430:37:15"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9408:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9415:3:15","type":""}],"src":"9355:118:15"},{"body":{"nodeType":"YulBlock","src":"9569:270:15","statements":[{"nodeType":"YulVariableDeclaration","src":"9579:52:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9625:5:15"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9593:31:15"},"nodeType":"YulFunctionCall","src":"9593:38:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9583:6:15","type":""}]},{"nodeType":"YulAssignment","src":"9640:77:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9705:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"9710:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9647:57:15"},"nodeType":"YulFunctionCall","src":"9647:70:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9640:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9752:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"9759:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9748:3:15"},"nodeType":"YulFunctionCall","src":"9748:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"9766:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"9771:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9726:21:15"},"nodeType":"YulFunctionCall","src":"9726:52:15"},"nodeType":"YulExpressionStatement","src":"9726:52:15"},{"nodeType":"YulAssignment","src":"9787:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9798:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9825:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9803:21:15"},"nodeType":"YulFunctionCall","src":"9803:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9794:3:15"},"nodeType":"YulFunctionCall","src":"9794:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9787:3:15"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9550:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9557:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9565:3:15","type":""}],"src":"9479:360:15"},{"body":{"nodeType":"YulBlock","src":"9918:74:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9935:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9979:5:15"}],"functionName":{"name":"convert_t_enum$_Breed_$2948_to_t_uint8","nodeType":"YulIdentifier","src":"9940:38:15"},"nodeType":"YulFunctionCall","src":"9940:45:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9928:6:15"},"nodeType":"YulFunctionCall","src":"9928:58:15"},"nodeType":"YulExpressionStatement","src":"9928:58:15"}]},"name":"abi_encode_t_enum$_Breed_$2948_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9906:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9913:3:15","type":""}],"src":"9845:147:15"},{"body":{"nodeType":"YulBlock","src":"10090:272:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10100:53:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10147:5:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"10114:32:15"},"nodeType":"YulFunctionCall","src":"10114:39:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10104:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10162:78:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10228:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"10233:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10169:58:15"},"nodeType":"YulFunctionCall","src":"10169:71:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10162:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10275:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"10282:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10271:3:15"},"nodeType":"YulFunctionCall","src":"10271:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"10289:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"10294:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"10249:21:15"},"nodeType":"YulFunctionCall","src":"10249:52:15"},"nodeType":"YulExpressionStatement","src":"10249:52:15"},{"nodeType":"YulAssignment","src":"10310:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10321:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10348:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"10326:21:15"},"nodeType":"YulFunctionCall","src":"10326:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10317:3:15"},"nodeType":"YulFunctionCall","src":"10317:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10310:3:15"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10071:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10078:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10086:3:15","type":""}],"src":"9998:364:15"},{"body":{"nodeType":"YulBlock","src":"10478:267:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10488:53:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10535:5:15"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"10502:32:15"},"nodeType":"YulFunctionCall","src":"10502:39:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10492:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10550:96:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10634:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"10639:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"10557:76:15"},"nodeType":"YulFunctionCall","src":"10557:89:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10550:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10681:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"10688:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10677:3:15"},"nodeType":"YulFunctionCall","src":"10677:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"10695:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"10700:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"10655:21:15"},"nodeType":"YulFunctionCall","src":"10655:52:15"},"nodeType":"YulExpressionStatement","src":"10655:52:15"},{"nodeType":"YulAssignment","src":"10716:23:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10727:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"10732:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10723:3:15"},"nodeType":"YulFunctionCall","src":"10723:16:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10716:3:15"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10459:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10466:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10474:3:15","type":""}],"src":"10368:377:15"},{"body":{"nodeType":"YulBlock","src":"10897:220:15","statements":[{"nodeType":"YulAssignment","src":"10907:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10973:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10978:2:15","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10914:58:15"},"nodeType":"YulFunctionCall","src":"10914:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10907:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11079:3:15"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"10990:88:15"},"nodeType":"YulFunctionCall","src":"10990:93:15"},"nodeType":"YulExpressionStatement","src":"10990:93:15"},{"nodeType":"YulAssignment","src":"11092:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11103:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11108:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11099:3:15"},"nodeType":"YulFunctionCall","src":"11099:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11092:3:15"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10885:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10893:3:15","type":""}],"src":"10751:366:15"},{"body":{"nodeType":"YulBlock","src":"11269:220:15","statements":[{"nodeType":"YulAssignment","src":"11279:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11345:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11350:2:15","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11286:58:15"},"nodeType":"YulFunctionCall","src":"11286:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11279:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11451:3:15"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"11362:88:15"},"nodeType":"YulFunctionCall","src":"11362:93:15"},"nodeType":"YulExpressionStatement","src":"11362:93:15"},{"nodeType":"YulAssignment","src":"11464:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11475:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11480:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11471:3:15"},"nodeType":"YulFunctionCall","src":"11471:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11464:3:15"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11257:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11265:3:15","type":""}],"src":"11123:366:15"},{"body":{"nodeType":"YulBlock","src":"11641:220:15","statements":[{"nodeType":"YulAssignment","src":"11651:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11717:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11722:2:15","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11658:58:15"},"nodeType":"YulFunctionCall","src":"11658:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11651:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11823:3:15"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"11734:88:15"},"nodeType":"YulFunctionCall","src":"11734:93:15"},"nodeType":"YulExpressionStatement","src":"11734:93:15"},{"nodeType":"YulAssignment","src":"11836:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11847:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11852:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11843:3:15"},"nodeType":"YulFunctionCall","src":"11843:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11836:3:15"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11629:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11637:3:15","type":""}],"src":"11495:366:15"},{"body":{"nodeType":"YulBlock","src":"12013:220:15","statements":[{"nodeType":"YulAssignment","src":"12023:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12089:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"12094:2:15","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12030:58:15"},"nodeType":"YulFunctionCall","src":"12030:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12023:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12195:3:15"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"12106:88:15"},"nodeType":"YulFunctionCall","src":"12106:93:15"},"nodeType":"YulExpressionStatement","src":"12106:93:15"},{"nodeType":"YulAssignment","src":"12208:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12219:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"12224:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12215:3:15"},"nodeType":"YulFunctionCall","src":"12215:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12208:3:15"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12001:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12009:3:15","type":""}],"src":"11867:366:15"},{"body":{"nodeType":"YulBlock","src":"12385:220:15","statements":[{"nodeType":"YulAssignment","src":"12395:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12461:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"12466:2:15","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12402:58:15"},"nodeType":"YulFunctionCall","src":"12402:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12395:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12567:3:15"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"12478:88:15"},"nodeType":"YulFunctionCall","src":"12478:93:15"},"nodeType":"YulExpressionStatement","src":"12478:93:15"},{"nodeType":"YulAssignment","src":"12580:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12591:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"12596:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12587:3:15"},"nodeType":"YulFunctionCall","src":"12587:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12580:3:15"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12373:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12381:3:15","type":""}],"src":"12239:366:15"},{"body":{"nodeType":"YulBlock","src":"12757:220:15","statements":[{"nodeType":"YulAssignment","src":"12767:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12833:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"12838:2:15","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12774:58:15"},"nodeType":"YulFunctionCall","src":"12774:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12767:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12939:3:15"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"12850:88:15"},"nodeType":"YulFunctionCall","src":"12850:93:15"},"nodeType":"YulExpressionStatement","src":"12850:93:15"},{"nodeType":"YulAssignment","src":"12952:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12963:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"12968:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12959:3:15"},"nodeType":"YulFunctionCall","src":"12959:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12952:3:15"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12745:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12753:3:15","type":""}],"src":"12611:366:15"},{"body":{"nodeType":"YulBlock","src":"13129:220:15","statements":[{"nodeType":"YulAssignment","src":"13139:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13205:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"13210:2:15","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13146:58:15"},"nodeType":"YulFunctionCall","src":"13146:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13139:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13311:3:15"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"13222:88:15"},"nodeType":"YulFunctionCall","src":"13222:93:15"},"nodeType":"YulExpressionStatement","src":"13222:93:15"},{"nodeType":"YulAssignment","src":"13324:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13335:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"13340:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13331:3:15"},"nodeType":"YulFunctionCall","src":"13331:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13324:3:15"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13117:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13125:3:15","type":""}],"src":"12983:366:15"},{"body":{"nodeType":"YulBlock","src":"13501:220:15","statements":[{"nodeType":"YulAssignment","src":"13511:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13577:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"13582:2:15","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13518:58:15"},"nodeType":"YulFunctionCall","src":"13518:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13511:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13683:3:15"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"13594:88:15"},"nodeType":"YulFunctionCall","src":"13594:93:15"},"nodeType":"YulExpressionStatement","src":"13594:93:15"},{"nodeType":"YulAssignment","src":"13696:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13707:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"13712:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13703:3:15"},"nodeType":"YulFunctionCall","src":"13703:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13696:3:15"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13489:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13497:3:15","type":""}],"src":"13355:366:15"},{"body":{"nodeType":"YulBlock","src":"13873:220:15","statements":[{"nodeType":"YulAssignment","src":"13883:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13949:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"13954:2:15","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13890:58:15"},"nodeType":"YulFunctionCall","src":"13890:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13883:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14055:3:15"}],"functionName":{"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulIdentifier","src":"13966:88:15"},"nodeType":"YulFunctionCall","src":"13966:93:15"},"nodeType":"YulExpressionStatement","src":"13966:93:15"},{"nodeType":"YulAssignment","src":"14068:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14079:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14084:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14075:3:15"},"nodeType":"YulFunctionCall","src":"14075:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14068:3:15"}]}]},"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13861:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13869:3:15","type":""}],"src":"13727:366:15"},{"body":{"nodeType":"YulBlock","src":"14245:220:15","statements":[{"nodeType":"YulAssignment","src":"14255:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14321:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14326:2:15","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14262:58:15"},"nodeType":"YulFunctionCall","src":"14262:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14255:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14427:3:15"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"14338:88:15"},"nodeType":"YulFunctionCall","src":"14338:93:15"},"nodeType":"YulExpressionStatement","src":"14338:93:15"},{"nodeType":"YulAssignment","src":"14440:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14451:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14456:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14447:3:15"},"nodeType":"YulFunctionCall","src":"14447:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14440:3:15"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14233:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14241:3:15","type":""}],"src":"14099:366:15"},{"body":{"nodeType":"YulBlock","src":"14617:220:15","statements":[{"nodeType":"YulAssignment","src":"14627:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14693:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14698:2:15","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14634:58:15"},"nodeType":"YulFunctionCall","src":"14634:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14627:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14799:3:15"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"14710:88:15"},"nodeType":"YulFunctionCall","src":"14710:93:15"},"nodeType":"YulExpressionStatement","src":"14710:93:15"},{"nodeType":"YulAssignment","src":"14812:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14823:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14828:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14819:3:15"},"nodeType":"YulFunctionCall","src":"14819:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14812:3:15"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14605:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14613:3:15","type":""}],"src":"14471:366:15"},{"body":{"nodeType":"YulBlock","src":"14989:220:15","statements":[{"nodeType":"YulAssignment","src":"14999:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15065:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"15070:2:15","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15006:58:15"},"nodeType":"YulFunctionCall","src":"15006:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14999:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15171:3:15"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"15082:88:15"},"nodeType":"YulFunctionCall","src":"15082:93:15"},"nodeType":"YulExpressionStatement","src":"15082:93:15"},{"nodeType":"YulAssignment","src":"15184:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15195:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"15200:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15191:3:15"},"nodeType":"YulFunctionCall","src":"15191:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15184:3:15"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14977:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14985:3:15","type":""}],"src":"14843:366:15"},{"body":{"nodeType":"YulBlock","src":"15361:220:15","statements":[{"nodeType":"YulAssignment","src":"15371:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15437:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"15442:2:15","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15378:58:15"},"nodeType":"YulFunctionCall","src":"15378:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15371:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15543:3:15"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"15454:88:15"},"nodeType":"YulFunctionCall","src":"15454:93:15"},"nodeType":"YulExpressionStatement","src":"15454:93:15"},{"nodeType":"YulAssignment","src":"15556:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15567:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"15572:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15563:3:15"},"nodeType":"YulFunctionCall","src":"15563:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15556:3:15"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15349:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15357:3:15","type":""}],"src":"15215:366:15"},{"body":{"nodeType":"YulBlock","src":"15750:235:15","statements":[{"nodeType":"YulAssignment","src":"15760:90:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15843:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"15848:1:15","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15767:75:15"},"nodeType":"YulFunctionCall","src":"15767:83:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15760:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15948:3:15"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"15859:88:15"},"nodeType":"YulFunctionCall","src":"15859:93:15"},"nodeType":"YulExpressionStatement","src":"15859:93:15"},{"nodeType":"YulAssignment","src":"15961:18:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15972:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"15977:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15968:3:15"},"nodeType":"YulFunctionCall","src":"15968:11:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15961:3:15"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15738:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15746:3:15","type":""}],"src":"15587:398:15"},{"body":{"nodeType":"YulBlock","src":"16137:220:15","statements":[{"nodeType":"YulAssignment","src":"16147:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16213:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"16218:2:15","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16154:58:15"},"nodeType":"YulFunctionCall","src":"16154:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16147:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16319:3:15"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"16230:88:15"},"nodeType":"YulFunctionCall","src":"16230:93:15"},"nodeType":"YulExpressionStatement","src":"16230:93:15"},{"nodeType":"YulAssignment","src":"16332:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16343:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"16348:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16339:3:15"},"nodeType":"YulFunctionCall","src":"16339:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16332:3:15"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16125:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16133:3:15","type":""}],"src":"15991:366:15"},{"body":{"nodeType":"YulBlock","src":"16426:52:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16443:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16465:5:15"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"16448:16:15"},"nodeType":"YulFunctionCall","src":"16448:23:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16436:6:15"},"nodeType":"YulFunctionCall","src":"16436:36:15"},"nodeType":"YulExpressionStatement","src":"16436:36:15"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16414:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16421:3:15","type":""}],"src":"16363:115:15"},{"body":{"nodeType":"YulBlock","src":"16539:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16556:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16579:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16561:17:15"},"nodeType":"YulFunctionCall","src":"16561:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16549:6:15"},"nodeType":"YulFunctionCall","src":"16549:37:15"},"nodeType":"YulExpressionStatement","src":"16549:37:15"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16527:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16534:3:15","type":""}],"src":"16484:108:15"},{"body":{"nodeType":"YulBlock","src":"16663:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16680:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16703:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16685:17:15"},"nodeType":"YulFunctionCall","src":"16685:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16673:6:15"},"nodeType":"YulFunctionCall","src":"16673:37:15"},"nodeType":"YulExpressionStatement","src":"16673:37:15"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16651:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16658:3:15","type":""}],"src":"16598:118:15"},{"body":{"nodeType":"YulBlock","src":"16785:52:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16802:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16824:5:15"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"16807:16:15"},"nodeType":"YulFunctionCall","src":"16807:23:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16795:6:15"},"nodeType":"YulFunctionCall","src":"16795:36:15"},"nodeType":"YulExpressionStatement","src":"16795:36:15"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16773:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16780:3:15","type":""}],"src":"16722:115:15"},{"body":{"nodeType":"YulBlock","src":"16906:52:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16923:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16945:5:15"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"16928:16:15"},"nodeType":"YulFunctionCall","src":"16928:23:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16916:6:15"},"nodeType":"YulFunctionCall","src":"16916:36:15"},"nodeType":"YulExpressionStatement","src":"16916:36:15"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16894:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16901:3:15","type":""}],"src":"16843:115:15"},{"body":{"nodeType":"YulBlock","src":"17148:251:15","statements":[{"nodeType":"YulAssignment","src":"17159:102:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17248:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"17257:3:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"17166:81:15"},"nodeType":"YulFunctionCall","src":"17166:95:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17159:3:15"}]},{"nodeType":"YulAssignment","src":"17271:102:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17360:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"17369:3:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"17278:81:15"},"nodeType":"YulFunctionCall","src":"17278:95:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17271:3:15"}]},{"nodeType":"YulAssignment","src":"17383:10:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"17390:3:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17383:3:15"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17119:3:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17125:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17133:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17144:3:15","type":""}],"src":"16964:435:15"},{"body":{"nodeType":"YulBlock","src":"17593:191:15","statements":[{"nodeType":"YulAssignment","src":"17604:154:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17754:3:15"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"17611:141:15"},"nodeType":"YulFunctionCall","src":"17611:147:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17604:3:15"}]},{"nodeType":"YulAssignment","src":"17768:10:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"17775:3:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17768:3:15"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17580:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17589:3:15","type":""}],"src":"17405:379:15"},{"body":{"nodeType":"YulBlock","src":"17888:124:15","statements":[{"nodeType":"YulAssignment","src":"17898:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17910:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17921:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17906:3:15"},"nodeType":"YulFunctionCall","src":"17906:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17898:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17978:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17991:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18002:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17987:3:15"},"nodeType":"YulFunctionCall","src":"17987:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"17934:43:15"},"nodeType":"YulFunctionCall","src":"17934:71:15"},"nodeType":"YulExpressionStatement","src":"17934:71:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17860:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17872:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17883:4:15","type":""}],"src":"17790:222:15"},{"body":{"nodeType":"YulBlock","src":"18144:206:15","statements":[{"nodeType":"YulAssignment","src":"18154:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18166:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18177:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18162:3:15"},"nodeType":"YulFunctionCall","src":"18162:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18154:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18234:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18247:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18258:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18243:3:15"},"nodeType":"YulFunctionCall","src":"18243:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18190:43:15"},"nodeType":"YulFunctionCall","src":"18190:71:15"},"nodeType":"YulExpressionStatement","src":"18190:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18315:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18328:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18339:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18324:3:15"},"nodeType":"YulFunctionCall","src":"18324:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18271:43:15"},"nodeType":"YulFunctionCall","src":"18271:72:15"},"nodeType":"YulExpressionStatement","src":"18271:72:15"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18108:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18120:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18128:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18139:4:15","type":""}],"src":"18018:332:15"},{"body":{"nodeType":"YulBlock","src":"18556:440:15","statements":[{"nodeType":"YulAssignment","src":"18566:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18578:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18589:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18574:3:15"},"nodeType":"YulFunctionCall","src":"18574:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18566:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18647:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18660:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18671:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18656:3:15"},"nodeType":"YulFunctionCall","src":"18656:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18603:43:15"},"nodeType":"YulFunctionCall","src":"18603:71:15"},"nodeType":"YulExpressionStatement","src":"18603:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18728:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18741:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18752:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18737:3:15"},"nodeType":"YulFunctionCall","src":"18737:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18684:43:15"},"nodeType":"YulFunctionCall","src":"18684:72:15"},"nodeType":"YulExpressionStatement","src":"18684:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18810:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18823:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18834:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18819:3:15"},"nodeType":"YulFunctionCall","src":"18819:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18766:43:15"},"nodeType":"YulFunctionCall","src":"18766:72:15"},"nodeType":"YulExpressionStatement","src":"18766:72:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18859:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18870:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18855:3:15"},"nodeType":"YulFunctionCall","src":"18855:18:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18879:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"18885:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18875:3:15"},"nodeType":"YulFunctionCall","src":"18875:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18848:6:15"},"nodeType":"YulFunctionCall","src":"18848:48:15"},"nodeType":"YulExpressionStatement","src":"18848:48:15"},{"nodeType":"YulAssignment","src":"18905:84:15","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"18975:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"18984:4:15"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18913:61:15"},"nodeType":"YulFunctionCall","src":"18913:76:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18905:4:15"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18504:9:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18516:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18524:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18532:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18540:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18551:4:15","type":""}],"src":"18356:640:15"},{"body":{"nodeType":"YulBlock","src":"19146:170:15","statements":[{"nodeType":"YulAssignment","src":"19156:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19168:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19179:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19164:3:15"},"nodeType":"YulFunctionCall","src":"19164:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19156:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19282:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19295:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19306:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19291:3:15"},"nodeType":"YulFunctionCall","src":"19291:17:15"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19192:89:15"},"nodeType":"YulFunctionCall","src":"19192:117:15"},"nodeType":"YulExpressionStatement","src":"19192:117:15"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19118:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19130:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19141:4:15","type":""}],"src":"19002:314:15"},{"body":{"nodeType":"YulBlock","src":"19414:118:15","statements":[{"nodeType":"YulAssignment","src":"19424:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19436:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19447:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19432:3:15"},"nodeType":"YulFunctionCall","src":"19432:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19424:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19498:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19511:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19522:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19507:3:15"},"nodeType":"YulFunctionCall","src":"19507:17:15"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"19460:37:15"},"nodeType":"YulFunctionCall","src":"19460:65:15"},"nodeType":"YulExpressionStatement","src":"19460:65:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19386:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19398:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19409:4:15","type":""}],"src":"19322:210:15"},{"body":{"nodeType":"YulBlock","src":"19636:124:15","statements":[{"nodeType":"YulAssignment","src":"19646:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19658:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19669:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19654:3:15"},"nodeType":"YulFunctionCall","src":"19654:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19646:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19726:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19739:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19750:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19735:3:15"},"nodeType":"YulFunctionCall","src":"19735:17:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"19682:43:15"},"nodeType":"YulFunctionCall","src":"19682:71:15"},"nodeType":"YulExpressionStatement","src":"19682:71:15"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19608:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19620:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19631:4:15","type":""}],"src":"19538:222:15"},{"body":{"nodeType":"YulBlock","src":"19968:446:15","statements":[{"nodeType":"YulAssignment","src":"19978:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19990:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20001:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19986:3:15"},"nodeType":"YulFunctionCall","src":"19986:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19978:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20059:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20072:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20083:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20068:3:15"},"nodeType":"YulFunctionCall","src":"20068:17:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"20015:43:15"},"nodeType":"YulFunctionCall","src":"20015:71:15"},"nodeType":"YulExpressionStatement","src":"20015:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20138:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20151:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20162:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20147:3:15"},"nodeType":"YulFunctionCall","src":"20147:18:15"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"20096:41:15"},"nodeType":"YulFunctionCall","src":"20096:70:15"},"nodeType":"YulExpressionStatement","src":"20096:70:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"20218:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20231:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20242:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20227:3:15"},"nodeType":"YulFunctionCall","src":"20227:18:15"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"20176:41:15"},"nodeType":"YulFunctionCall","src":"20176:70:15"},"nodeType":"YulExpressionStatement","src":"20176:70:15"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"20298:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20311:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20322:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20307:3:15"},"nodeType":"YulFunctionCall","src":"20307:18:15"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"20256:41:15"},"nodeType":"YulFunctionCall","src":"20256:70:15"},"nodeType":"YulExpressionStatement","src":"20256:70:15"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"20378:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20391:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20402:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20387:3:15"},"nodeType":"YulFunctionCall","src":"20387:19:15"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"20336:41:15"},"nodeType":"YulFunctionCall","src":"20336:71:15"},"nodeType":"YulExpressionStatement","src":"20336:71:15"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19908:9:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"19920:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"19928:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19936:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19944:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19952:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19963:4:15","type":""}],"src":"19766:648:15"},{"body":{"nodeType":"YulBlock","src":"20526:132:15","statements":[{"nodeType":"YulAssignment","src":"20536:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20548:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20559:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20544:3:15"},"nodeType":"YulFunctionCall","src":"20544:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20536:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20624:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20637:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20648:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20633:3:15"},"nodeType":"YulFunctionCall","src":"20633:17:15"}],"functionName":{"name":"abi_encode_t_enum$_Breed_$2948_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"20572:51:15"},"nodeType":"YulFunctionCall","src":"20572:79:15"},"nodeType":"YulExpressionStatement","src":"20572:79:15"}]},"name":"abi_encode_tuple_t_enum$_Breed_$2948__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20498:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20510:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20521:4:15","type":""}],"src":"20420:238:15"},{"body":{"nodeType":"YulBlock","src":"20798:214:15","statements":[{"nodeType":"YulAssignment","src":"20808:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20820:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20831:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20816:3:15"},"nodeType":"YulFunctionCall","src":"20816:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20808:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20896:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20909:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20920:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20905:3:15"},"nodeType":"YulFunctionCall","src":"20905:17:15"}],"functionName":{"name":"abi_encode_t_enum$_Breed_$2948_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"20844:51:15"},"nodeType":"YulFunctionCall","src":"20844:79:15"},"nodeType":"YulExpressionStatement","src":"20844:79:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20977:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20990:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21001:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20986:3:15"},"nodeType":"YulFunctionCall","src":"20986:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"20933:43:15"},"nodeType":"YulFunctionCall","src":"20933:72:15"},"nodeType":"YulExpressionStatement","src":"20933:72:15"}]},"name":"abi_encode_tuple_t_enum$_Breed_$2948_t_address__to_t_uint8_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20762:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20774:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20782:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20793:4:15","type":""}],"src":"20664:348:15"},{"body":{"nodeType":"YulBlock","src":"21136:195:15","statements":[{"nodeType":"YulAssignment","src":"21146:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21158:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21169:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21154:3:15"},"nodeType":"YulFunctionCall","src":"21154:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21146:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21193:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21204:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21189:3:15"},"nodeType":"YulFunctionCall","src":"21189:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21212:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"21218:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21208:3:15"},"nodeType":"YulFunctionCall","src":"21208:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21182:6:15"},"nodeType":"YulFunctionCall","src":"21182:47:15"},"nodeType":"YulExpressionStatement","src":"21182:47:15"},{"nodeType":"YulAssignment","src":"21238:86:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21310:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"21319:4:15"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21246:63:15"},"nodeType":"YulFunctionCall","src":"21246:78:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21238:4:15"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21108:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21120:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21131:4:15","type":""}],"src":"21018:313:15"},{"body":{"nodeType":"YulBlock","src":"21508:248:15","statements":[{"nodeType":"YulAssignment","src":"21518:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21530:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21541:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21526:3:15"},"nodeType":"YulFunctionCall","src":"21526:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21518:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21565:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21576:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21561:3:15"},"nodeType":"YulFunctionCall","src":"21561:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21584:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"21590:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21580:3:15"},"nodeType":"YulFunctionCall","src":"21580:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21554:6:15"},"nodeType":"YulFunctionCall","src":"21554:47:15"},"nodeType":"YulExpressionStatement","src":"21554:47:15"},{"nodeType":"YulAssignment","src":"21610:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21744:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21618:124:15"},"nodeType":"YulFunctionCall","src":"21618:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21610:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21488:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21503:4:15","type":""}],"src":"21337:419:15"},{"body":{"nodeType":"YulBlock","src":"21933:248:15","statements":[{"nodeType":"YulAssignment","src":"21943:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21955:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21966:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21951:3:15"},"nodeType":"YulFunctionCall","src":"21951:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21943:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21990:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22001:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21986:3:15"},"nodeType":"YulFunctionCall","src":"21986:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22009:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"22015:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22005:3:15"},"nodeType":"YulFunctionCall","src":"22005:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21979:6:15"},"nodeType":"YulFunctionCall","src":"21979:47:15"},"nodeType":"YulExpressionStatement","src":"21979:47:15"},{"nodeType":"YulAssignment","src":"22035:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22169:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22043:124:15"},"nodeType":"YulFunctionCall","src":"22043:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22035:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21913:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21928:4:15","type":""}],"src":"21762:419:15"},{"body":{"nodeType":"YulBlock","src":"22358:248:15","statements":[{"nodeType":"YulAssignment","src":"22368:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22380:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22391:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22376:3:15"},"nodeType":"YulFunctionCall","src":"22376:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22368:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22415:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22426:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22411:3:15"},"nodeType":"YulFunctionCall","src":"22411:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22434:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"22440:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22430:3:15"},"nodeType":"YulFunctionCall","src":"22430:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22404:6:15"},"nodeType":"YulFunctionCall","src":"22404:47:15"},"nodeType":"YulExpressionStatement","src":"22404:47:15"},{"nodeType":"YulAssignment","src":"22460:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22594:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22468:124:15"},"nodeType":"YulFunctionCall","src":"22468:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22460:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22338:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22353:4:15","type":""}],"src":"22187:419:15"},{"body":{"nodeType":"YulBlock","src":"22783:248:15","statements":[{"nodeType":"YulAssignment","src":"22793:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22805:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22816:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22801:3:15"},"nodeType":"YulFunctionCall","src":"22801:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22793:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22840:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22851:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22836:3:15"},"nodeType":"YulFunctionCall","src":"22836:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22859:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"22865:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22855:3:15"},"nodeType":"YulFunctionCall","src":"22855:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22829:6:15"},"nodeType":"YulFunctionCall","src":"22829:47:15"},"nodeType":"YulExpressionStatement","src":"22829:47:15"},{"nodeType":"YulAssignment","src":"22885:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23019:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22893:124:15"},"nodeType":"YulFunctionCall","src":"22893:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22885:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22763:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22778:4:15","type":""}],"src":"22612:419:15"},{"body":{"nodeType":"YulBlock","src":"23208:248:15","statements":[{"nodeType":"YulAssignment","src":"23218:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23230:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23241:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23226:3:15"},"nodeType":"YulFunctionCall","src":"23226:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23218:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23265:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23276:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23261:3:15"},"nodeType":"YulFunctionCall","src":"23261:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23284:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"23290:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23280:3:15"},"nodeType":"YulFunctionCall","src":"23280:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23254:6:15"},"nodeType":"YulFunctionCall","src":"23254:47:15"},"nodeType":"YulExpressionStatement","src":"23254:47:15"},{"nodeType":"YulAssignment","src":"23310:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23444:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23318:124:15"},"nodeType":"YulFunctionCall","src":"23318:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23310:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23188:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23203:4:15","type":""}],"src":"23037:419:15"},{"body":{"nodeType":"YulBlock","src":"23633:248:15","statements":[{"nodeType":"YulAssignment","src":"23643:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23655:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23666:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23651:3:15"},"nodeType":"YulFunctionCall","src":"23651:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23643:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23690:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23701:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23686:3:15"},"nodeType":"YulFunctionCall","src":"23686:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23709:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"23715:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23705:3:15"},"nodeType":"YulFunctionCall","src":"23705:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23679:6:15"},"nodeType":"YulFunctionCall","src":"23679:47:15"},"nodeType":"YulExpressionStatement","src":"23679:47:15"},{"nodeType":"YulAssignment","src":"23735:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23869:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23743:124:15"},"nodeType":"YulFunctionCall","src":"23743:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23735:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23613:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23628:4:15","type":""}],"src":"23462:419:15"},{"body":{"nodeType":"YulBlock","src":"24058:248:15","statements":[{"nodeType":"YulAssignment","src":"24068:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24080:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24091:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24076:3:15"},"nodeType":"YulFunctionCall","src":"24076:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24068:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24115:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24126:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24111:3:15"},"nodeType":"YulFunctionCall","src":"24111:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24134:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"24140:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24130:3:15"},"nodeType":"YulFunctionCall","src":"24130:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24104:6:15"},"nodeType":"YulFunctionCall","src":"24104:47:15"},"nodeType":"YulExpressionStatement","src":"24104:47:15"},{"nodeType":"YulAssignment","src":"24160:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24294:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24168:124:15"},"nodeType":"YulFunctionCall","src":"24168:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24160:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24038:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24053:4:15","type":""}],"src":"23887:419:15"},{"body":{"nodeType":"YulBlock","src":"24483:248:15","statements":[{"nodeType":"YulAssignment","src":"24493:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24505:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24516:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24501:3:15"},"nodeType":"YulFunctionCall","src":"24501:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24493:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24540:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24551:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24536:3:15"},"nodeType":"YulFunctionCall","src":"24536:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24559:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"24565:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24555:3:15"},"nodeType":"YulFunctionCall","src":"24555:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24529:6:15"},"nodeType":"YulFunctionCall","src":"24529:47:15"},"nodeType":"YulExpressionStatement","src":"24529:47:15"},{"nodeType":"YulAssignment","src":"24585:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24719:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24593:124:15"},"nodeType":"YulFunctionCall","src":"24593:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24585:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24463:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24478:4:15","type":""}],"src":"24312:419:15"},{"body":{"nodeType":"YulBlock","src":"24908:248:15","statements":[{"nodeType":"YulAssignment","src":"24918:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24930:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24941:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24926:3:15"},"nodeType":"YulFunctionCall","src":"24926:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24918:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24965:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24976:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24961:3:15"},"nodeType":"YulFunctionCall","src":"24961:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24984:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"24990:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24980:3:15"},"nodeType":"YulFunctionCall","src":"24980:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24954:6:15"},"nodeType":"YulFunctionCall","src":"24954:47:15"},"nodeType":"YulExpressionStatement","src":"24954:47:15"},{"nodeType":"YulAssignment","src":"25010:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25144:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25018:124:15"},"nodeType":"YulFunctionCall","src":"25018:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25010:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24888:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24903:4:15","type":""}],"src":"24737:419:15"},{"body":{"nodeType":"YulBlock","src":"25333:248:15","statements":[{"nodeType":"YulAssignment","src":"25343:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25355:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25366:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25351:3:15"},"nodeType":"YulFunctionCall","src":"25351:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25343:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25390:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25401:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25386:3:15"},"nodeType":"YulFunctionCall","src":"25386:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25409:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"25415:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25405:3:15"},"nodeType":"YulFunctionCall","src":"25405:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25379:6:15"},"nodeType":"YulFunctionCall","src":"25379:47:15"},"nodeType":"YulExpressionStatement","src":"25379:47:15"},{"nodeType":"YulAssignment","src":"25435:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25569:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25443:124:15"},"nodeType":"YulFunctionCall","src":"25443:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25435:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25313:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25328:4:15","type":""}],"src":"25162:419:15"},{"body":{"nodeType":"YulBlock","src":"25758:248:15","statements":[{"nodeType":"YulAssignment","src":"25768:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25780:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25791:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25776:3:15"},"nodeType":"YulFunctionCall","src":"25776:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25768:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25815:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25826:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25811:3:15"},"nodeType":"YulFunctionCall","src":"25811:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25834:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"25840:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25830:3:15"},"nodeType":"YulFunctionCall","src":"25830:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25804:6:15"},"nodeType":"YulFunctionCall","src":"25804:47:15"},"nodeType":"YulExpressionStatement","src":"25804:47:15"},{"nodeType":"YulAssignment","src":"25860:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25994:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25868:124:15"},"nodeType":"YulFunctionCall","src":"25868:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25860:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25738:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25753:4:15","type":""}],"src":"25587:419:15"},{"body":{"nodeType":"YulBlock","src":"26183:248:15","statements":[{"nodeType":"YulAssignment","src":"26193:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26205:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26216:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26201:3:15"},"nodeType":"YulFunctionCall","src":"26201:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26193:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26240:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26251:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26236:3:15"},"nodeType":"YulFunctionCall","src":"26236:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26259:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"26265:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26255:3:15"},"nodeType":"YulFunctionCall","src":"26255:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26229:6:15"},"nodeType":"YulFunctionCall","src":"26229:47:15"},"nodeType":"YulExpressionStatement","src":"26229:47:15"},{"nodeType":"YulAssignment","src":"26285:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26419:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26293:124:15"},"nodeType":"YulFunctionCall","src":"26293:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26285:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26163:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26178:4:15","type":""}],"src":"26012:419:15"},{"body":{"nodeType":"YulBlock","src":"26608:248:15","statements":[{"nodeType":"YulAssignment","src":"26618:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26630:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26641:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26626:3:15"},"nodeType":"YulFunctionCall","src":"26626:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26618:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26665:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26676:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26661:3:15"},"nodeType":"YulFunctionCall","src":"26661:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26684:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"26690:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26680:3:15"},"nodeType":"YulFunctionCall","src":"26680:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26654:6:15"},"nodeType":"YulFunctionCall","src":"26654:47:15"},"nodeType":"YulExpressionStatement","src":"26654:47:15"},{"nodeType":"YulAssignment","src":"26710:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26844:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26718:124:15"},"nodeType":"YulFunctionCall","src":"26718:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26710:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26588:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26603:4:15","type":""}],"src":"26437:419:15"},{"body":{"nodeType":"YulBlock","src":"27033:248:15","statements":[{"nodeType":"YulAssignment","src":"27043:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27055:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27066:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27051:3:15"},"nodeType":"YulFunctionCall","src":"27051:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27043:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27090:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27101:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27086:3:15"},"nodeType":"YulFunctionCall","src":"27086:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27109:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"27115:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27105:3:15"},"nodeType":"YulFunctionCall","src":"27105:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27079:6:15"},"nodeType":"YulFunctionCall","src":"27079:47:15"},"nodeType":"YulExpressionStatement","src":"27079:47:15"},{"nodeType":"YulAssignment","src":"27135:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27269:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27143:124:15"},"nodeType":"YulFunctionCall","src":"27143:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27135:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27013:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27028:4:15","type":""}],"src":"26862:419:15"},{"body":{"nodeType":"YulBlock","src":"27385:124:15","statements":[{"nodeType":"YulAssignment","src":"27395:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27407:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27418:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27403:3:15"},"nodeType":"YulFunctionCall","src":"27403:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27395:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27475:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27488:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27499:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27484:3:15"},"nodeType":"YulFunctionCall","src":"27484:17:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27431:43:15"},"nodeType":"YulFunctionCall","src":"27431:71:15"},"nodeType":"YulExpressionStatement","src":"27431:71:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27357:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27369:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27380:4:15","type":""}],"src":"27287:222:15"},{"body":{"nodeType":"YulBlock","src":"27611:122:15","statements":[{"nodeType":"YulAssignment","src":"27621:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27633:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27644:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27629:3:15"},"nodeType":"YulFunctionCall","src":"27629:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27621:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27699:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27712:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27723:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27708:3:15"},"nodeType":"YulFunctionCall","src":"27708:17:15"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"27657:41:15"},"nodeType":"YulFunctionCall","src":"27657:69:15"},"nodeType":"YulExpressionStatement","src":"27657:69:15"}]},"name":"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27583:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27595:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27606:4:15","type":""}],"src":"27515:218:15"},{"body":{"nodeType":"YulBlock","src":"27780:88:15","statements":[{"nodeType":"YulAssignment","src":"27790:30:15","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"27800:18:15"},"nodeType":"YulFunctionCall","src":"27800:20:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27790:6:15"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27849:6:15"},{"name":"size","nodeType":"YulIdentifier","src":"27857:4:15"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"27829:19:15"},"nodeType":"YulFunctionCall","src":"27829:33:15"},"nodeType":"YulExpressionStatement","src":"27829:33:15"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"27764:4:15","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"27773:6:15","type":""}],"src":"27739:129:15"},{"body":{"nodeType":"YulBlock","src":"27914:35:15","statements":[{"nodeType":"YulAssignment","src":"27924:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27940:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27934:5:15"},"nodeType":"YulFunctionCall","src":"27934:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27924:6:15"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"27907:6:15","type":""}],"src":"27874:75:15"},{"body":{"nodeType":"YulBlock","src":"28037:229:15","statements":[{"body":{"nodeType":"YulBlock","src":"28142:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"28144:16:15"},"nodeType":"YulFunctionCall","src":"28144:18:15"},"nodeType":"YulExpressionStatement","src":"28144:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28114:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"28122:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28111:2:15"},"nodeType":"YulFunctionCall","src":"28111:30:15"},"nodeType":"YulIf","src":"28108:56:15"},{"nodeType":"YulAssignment","src":"28174:25:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28186:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"28194:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"28182:3:15"},"nodeType":"YulFunctionCall","src":"28182:17:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"28174:4:15"}]},{"nodeType":"YulAssignment","src":"28236:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"28248:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"28254:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28244:3:15"},"nodeType":"YulFunctionCall","src":"28244:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"28236:4:15"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"28021:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"28032:4:15","type":""}],"src":"27955:311:15"},{"body":{"nodeType":"YulBlock","src":"28338:241:15","statements":[{"body":{"nodeType":"YulBlock","src":"28443:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"28445:16:15"},"nodeType":"YulFunctionCall","src":"28445:18:15"},"nodeType":"YulExpressionStatement","src":"28445:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28415:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"28423:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28412:2:15"},"nodeType":"YulFunctionCall","src":"28412:30:15"},"nodeType":"YulIf","src":"28409:56:15"},{"nodeType":"YulAssignment","src":"28475:37:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"28505:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"28483:21:15"},"nodeType":"YulFunctionCall","src":"28483:29:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"28475:4:15"}]},{"nodeType":"YulAssignment","src":"28549:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"28561:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"28567:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28557:3:15"},"nodeType":"YulFunctionCall","src":"28557:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"28549:4:15"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"28322:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"28333:4:15","type":""}],"src":"28272:307:15"},{"body":{"nodeType":"YulBlock","src":"28655:28:15","statements":[{"nodeType":"YulAssignment","src":"28665:11:15","value":{"name":"ptr","nodeType":"YulIdentifier","src":"28673:3:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"28665:4:15"}]}]},"name":"array_dataslot_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"28642:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"28650:4:15","type":""}],"src":"28585:98:15"},{"body":{"nodeType":"YulBlock","src":"28761:32:15","statements":[{"nodeType":"YulAssignment","src":"28772:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"28782:4:15","type":"","value":"0x03"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28772:6:15"}]}]},"name":"array_length_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28744:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28754:6:15","type":""}],"src":"28689:104:15"},{"body":{"nodeType":"YulBlock","src":"28857:40:15","statements":[{"nodeType":"YulAssignment","src":"28868:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28884:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28878:5:15"},"nodeType":"YulFunctionCall","src":"28878:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28868:6:15"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28840:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28850:6:15","type":""}],"src":"28799:98:15"},{"body":{"nodeType":"YulBlock","src":"28962:40:15","statements":[{"nodeType":"YulAssignment","src":"28973:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28989:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28983:5:15"},"nodeType":"YulFunctionCall","src":"28983:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"28973:6:15"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28945:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"28955:6:15","type":""}],"src":"28903:99:15"},{"body":{"nodeType":"YulBlock","src":"29081:38:15","statements":[{"nodeType":"YulAssignment","src":"29091:22:15","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"29103:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"29108:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29099:3:15"},"nodeType":"YulFunctionCall","src":"29099:14:15"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"29091:4:15"}]}]},"name":"array_nextElement_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"29068:3:15","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"29076:4:15","type":""}],"src":"29008:111:15"},{"body":{"nodeType":"YulBlock","src":"29234:34:15","statements":[{"nodeType":"YulAssignment","src":"29244:18:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"29259:3:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29244:11:15"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29206:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"29211:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29222:11:15","type":""}],"src":"29125:143:15"},{"body":{"nodeType":"YulBlock","src":"29369:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29386:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"29391:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29379:6:15"},"nodeType":"YulFunctionCall","src":"29379:19:15"},"nodeType":"YulExpressionStatement","src":"29379:19:15"},{"nodeType":"YulAssignment","src":"29407:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29426:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"29431:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29422:3:15"},"nodeType":"YulFunctionCall","src":"29422:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29407:11:15"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29341:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"29346:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29357:11:15","type":""}],"src":"29274:168:15"},{"body":{"nodeType":"YulBlock","src":"29561:34:15","statements":[{"nodeType":"YulAssignment","src":"29571:18:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"29586:3:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29571:11:15"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29533:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"29538:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29549:11:15","type":""}],"src":"29448:147:15"},{"body":{"nodeType":"YulBlock","src":"29697:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29714:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"29719:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29707:6:15"},"nodeType":"YulFunctionCall","src":"29707:19:15"},"nodeType":"YulExpressionStatement","src":"29707:19:15"},{"nodeType":"YulAssignment","src":"29735:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29754:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"29759:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29750:3:15"},"nodeType":"YulFunctionCall","src":"29750:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29735:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29669:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"29674:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29685:11:15","type":""}],"src":"29601:169:15"},{"body":{"nodeType":"YulBlock","src":"29890:34:15","statements":[{"nodeType":"YulAssignment","src":"29900:18:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"29915:3:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29900:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29862:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"29867:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29878:11:15","type":""}],"src":"29776:148:15"},{"body":{"nodeType":"YulBlock","src":"29974:261:15","statements":[{"nodeType":"YulAssignment","src":"29984:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30007:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29989:17:15"},"nodeType":"YulFunctionCall","src":"29989:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"29984:1:15"}]},{"nodeType":"YulAssignment","src":"30018:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30041:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30023:17:15"},"nodeType":"YulFunctionCall","src":"30023:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"30018:1:15"}]},{"body":{"nodeType":"YulBlock","src":"30181:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30183:16:15"},"nodeType":"YulFunctionCall","src":"30183:18:15"},"nodeType":"YulExpressionStatement","src":"30183:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30102:1:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30109:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"30177:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30105:3:15"},"nodeType":"YulFunctionCall","src":"30105:74:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"30099:2:15"},"nodeType":"YulFunctionCall","src":"30099:81:15"},"nodeType":"YulIf","src":"30096:107:15"},{"nodeType":"YulAssignment","src":"30213:16:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30224:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"30227:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30220:3:15"},"nodeType":"YulFunctionCall","src":"30220:9:15"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"30213:3:15"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"29961:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"29964:1:15","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"29970:3:15","type":""}],"src":"29930:305:15"},{"body":{"nodeType":"YulBlock","src":"30286:146:15","statements":[{"nodeType":"YulAssignment","src":"30296:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30319:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30301:17:15"},"nodeType":"YulFunctionCall","src":"30301:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"30296:1:15"}]},{"nodeType":"YulAssignment","src":"30330:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30353:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30335:17:15"},"nodeType":"YulFunctionCall","src":"30335:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"30330:1:15"}]},{"body":{"nodeType":"YulBlock","src":"30377:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30379:16:15"},"nodeType":"YulFunctionCall","src":"30379:18:15"},"nodeType":"YulExpressionStatement","src":"30379:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30371:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"30374:1:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"30368:2:15"},"nodeType":"YulFunctionCall","src":"30368:8:15"},"nodeType":"YulIf","src":"30365:34:15"},{"nodeType":"YulAssignment","src":"30409:17:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30421:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"30424:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30417:3:15"},"nodeType":"YulFunctionCall","src":"30417:9:15"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"30409:4:15"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"30272:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"30275:1:15","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"30281:4:15","type":""}],"src":"30241:191:15"},{"body":{"nodeType":"YulBlock","src":"30483:51:15","statements":[{"nodeType":"YulAssignment","src":"30493:35:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30522:5:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"30504:17:15"},"nodeType":"YulFunctionCall","src":"30504:24:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30493:7:15"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30465:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30475:7:15","type":""}],"src":"30438:96:15"},{"body":{"nodeType":"YulBlock","src":"30582:48:15","statements":[{"nodeType":"YulAssignment","src":"30592:32:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30617:5:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30610:6:15"},"nodeType":"YulFunctionCall","src":"30610:13:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30603:6:15"},"nodeType":"YulFunctionCall","src":"30603:21:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30592:7:15"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30564:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30574:7:15","type":""}],"src":"30540:90:15"},{"body":{"nodeType":"YulBlock","src":"30681:32:15","statements":[{"nodeType":"YulAssignment","src":"30691:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"30702:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30691:7:15"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30663:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30673:7:15","type":""}],"src":"30636:77:15"},{"body":{"nodeType":"YulBlock","src":"30763:105:15","statements":[{"nodeType":"YulAssignment","src":"30773:89:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30788:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"30795:66:15","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30784:3:15"},"nodeType":"YulFunctionCall","src":"30784:78:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30773:7:15"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30745:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30755:7:15","type":""}],"src":"30719:149:15"},{"body":{"nodeType":"YulBlock","src":"30929:76:15","statements":[{"nodeType":"YulAssignment","src":"30939:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"30950:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"30939:7:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30993:5:15"}],"functionName":{"name":"validator_assert_t_enum$_Breed_$2948","nodeType":"YulIdentifier","src":"30956:36:15"},"nodeType":"YulFunctionCall","src":"30956:43:15"},"nodeType":"YulExpressionStatement","src":"30956:43:15"}]},"name":"cleanup_t_enum$_Breed_$2948","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"30911:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"30921:7:15","type":""}],"src":"30874:131:15"},{"body":{"nodeType":"YulBlock","src":"31055:45:15","statements":[{"nodeType":"YulAssignment","src":"31065:29:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31080:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"31087:6:15","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31076:3:15"},"nodeType":"YulFunctionCall","src":"31076:18:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"31065:7:15"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31037:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"31047:7:15","type":""}],"src":"31011:89:15"},{"body":{"nodeType":"YulBlock","src":"31151:81:15","statements":[{"nodeType":"YulAssignment","src":"31161:65:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31176:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"31183:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31172:3:15"},"nodeType":"YulFunctionCall","src":"31172:54:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"31161:7:15"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31133:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"31143:7:15","type":""}],"src":"31106:126:15"},{"body":{"nodeType":"YulBlock","src":"31283:32:15","statements":[{"nodeType":"YulAssignment","src":"31293:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"31304:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"31293:7:15"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31265:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"31275:7:15","type":""}],"src":"31238:77:15"},{"body":{"nodeType":"YulBlock","src":"31365:49:15","statements":[{"nodeType":"YulAssignment","src":"31375:33:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31390:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"31397:10:15","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31386:3:15"},"nodeType":"YulFunctionCall","src":"31386:22:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"31375:7:15"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31347:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"31357:7:15","type":""}],"src":"31321:93:15"},{"body":{"nodeType":"YulBlock","src":"31464:57:15","statements":[{"nodeType":"YulAssignment","src":"31474:41:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31489:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"31496:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31485:3:15"},"nodeType":"YulFunctionCall","src":"31485:30:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"31474:7:15"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31446:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"31456:7:15","type":""}],"src":"31420:101:15"},{"body":{"nodeType":"YulBlock","src":"31595:63:15","statements":[{"nodeType":"YulAssignment","src":"31605:47:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31646:5:15"}],"functionName":{"name":"cleanup_t_enum$_Breed_$2948","nodeType":"YulIdentifier","src":"31618:27:15"},"nodeType":"YulFunctionCall","src":"31618:34:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"31605:9:15"}]}]},"name":"convert_t_enum$_Breed_$2948_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31575:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"31585:9:15","type":""}],"src":"31527:131:15"},{"body":{"nodeType":"YulBlock","src":"31715:103:15","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"31738:3:15"},{"name":"src","nodeType":"YulIdentifier","src":"31743:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"31748:6:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"31725:12:15"},"nodeType":"YulFunctionCall","src":"31725:30:15"},"nodeType":"YulExpressionStatement","src":"31725:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"31796:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"31801:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31792:3:15"},"nodeType":"YulFunctionCall","src":"31792:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"31810:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31785:6:15"},"nodeType":"YulFunctionCall","src":"31785:27:15"},"nodeType":"YulExpressionStatement","src":"31785:27:15"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"31697:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"31702:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"31707:6:15","type":""}],"src":"31664:154:15"},{"body":{"nodeType":"YulBlock","src":"31873:258:15","statements":[{"nodeType":"YulVariableDeclaration","src":"31883:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"31892:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"31887:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"31952:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"31977:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"31982:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31973:3:15"},"nodeType":"YulFunctionCall","src":"31973:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"31996:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"32001:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31992:3:15"},"nodeType":"YulFunctionCall","src":"31992:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31986:5:15"},"nodeType":"YulFunctionCall","src":"31986:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31966:6:15"},"nodeType":"YulFunctionCall","src":"31966:39:15"},"nodeType":"YulExpressionStatement","src":"31966:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31913:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"31916:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31910:2:15"},"nodeType":"YulFunctionCall","src":"31910:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"31924:19:15","statements":[{"nodeType":"YulAssignment","src":"31926:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31935:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"31938:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31931:3:15"},"nodeType":"YulFunctionCall","src":"31931:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"31926:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"31906:3:15","statements":[]},"src":"31902:113:15"},{"body":{"nodeType":"YulBlock","src":"32049:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"32099:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"32104:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32095:3:15"},"nodeType":"YulFunctionCall","src":"32095:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"32113:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32088:6:15"},"nodeType":"YulFunctionCall","src":"32088:27:15"},"nodeType":"YulExpressionStatement","src":"32088:27:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"32030:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"32033:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"32027:2:15"},"nodeType":"YulFunctionCall","src":"32027:13:15"},"nodeType":"YulIf","src":"32024:101:15"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"31855:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"31860:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"31865:6:15","type":""}],"src":"31824:307:15"},{"body":{"nodeType":"YulBlock","src":"32188:269:15","statements":[{"nodeType":"YulAssignment","src":"32198:22:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"32212:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"32218:1:15","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"32208:3:15"},"nodeType":"YulFunctionCall","src":"32208:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"32198:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"32229:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"32259:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"32265:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32255:3:15"},"nodeType":"YulFunctionCall","src":"32255:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"32233:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"32306:51:15","statements":[{"nodeType":"YulAssignment","src":"32320:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"32334:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"32342:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32330:3:15"},"nodeType":"YulFunctionCall","src":"32330:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"32320:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"32286:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32279:6:15"},"nodeType":"YulFunctionCall","src":"32279:26:15"},"nodeType":"YulIf","src":"32276:81:15"},{"body":{"nodeType":"YulBlock","src":"32409:42:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"32423:16:15"},"nodeType":"YulFunctionCall","src":"32423:18:15"},"nodeType":"YulExpressionStatement","src":"32423:18:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"32373:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"32396:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"32404:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32393:2:15"},"nodeType":"YulFunctionCall","src":"32393:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32370:2:15"},"nodeType":"YulFunctionCall","src":"32370:38:15"},"nodeType":"YulIf","src":"32367:84:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"32172:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"32181:6:15","type":""}],"src":"32137:320:15"},{"body":{"nodeType":"YulBlock","src":"32506:238:15","statements":[{"nodeType":"YulVariableDeclaration","src":"32516:58:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32538:6:15"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"32568:4:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"32546:21:15"},"nodeType":"YulFunctionCall","src":"32546:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32534:3:15"},"nodeType":"YulFunctionCall","src":"32534:40:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"32520:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"32685:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"32687:16:15"},"nodeType":"YulFunctionCall","src":"32687:18:15"},"nodeType":"YulExpressionStatement","src":"32687:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"32628:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"32640:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"32625:2:15"},"nodeType":"YulFunctionCall","src":"32625:34:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"32664:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"32676:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32661:2:15"},"nodeType":"YulFunctionCall","src":"32661:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"32622:2:15"},"nodeType":"YulFunctionCall","src":"32622:62:15"},"nodeType":"YulIf","src":"32619:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32723:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"32727:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32716:6:15"},"nodeType":"YulFunctionCall","src":"32716:22:15"},"nodeType":"YulExpressionStatement","src":"32716:22:15"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32492:6:15","type":""},{"name":"size","nodeType":"YulTypedName","src":"32500:4:15","type":""}],"src":"32463:281:15"},{"body":{"nodeType":"YulBlock","src":"32793:190:15","statements":[{"nodeType":"YulAssignment","src":"32803:33:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32830:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32812:17:15"},"nodeType":"YulFunctionCall","src":"32812:24:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"32803:5:15"}]},{"body":{"nodeType":"YulBlock","src":"32926:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"32928:16:15"},"nodeType":"YulFunctionCall","src":"32928:18:15"},"nodeType":"YulExpressionStatement","src":"32928:18:15"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32851:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"32858:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32848:2:15"},"nodeType":"YulFunctionCall","src":"32848:77:15"},"nodeType":"YulIf","src":"32845:103:15"},{"nodeType":"YulAssignment","src":"32957:20:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32968:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"32975:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32964:3:15"},"nodeType":"YulFunctionCall","src":"32964:13:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32957:3:15"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32779:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"32789:3:15","type":""}],"src":"32750:233:15"},{"body":{"nodeType":"YulBlock","src":"33023:142:15","statements":[{"nodeType":"YulAssignment","src":"33033:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33056:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33038:17:15"},"nodeType":"YulFunctionCall","src":"33038:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"33033:1:15"}]},{"nodeType":"YulAssignment","src":"33067:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"33090:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33072:17:15"},"nodeType":"YulFunctionCall","src":"33072:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"33067:1:15"}]},{"body":{"nodeType":"YulBlock","src":"33114:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"33116:16:15"},"nodeType":"YulFunctionCall","src":"33116:18:15"},"nodeType":"YulExpressionStatement","src":"33116:18:15"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"33111:1:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33104:6:15"},"nodeType":"YulFunctionCall","src":"33104:9:15"},"nodeType":"YulIf","src":"33101:35:15"},{"nodeType":"YulAssignment","src":"33145:14:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33154:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"33157:1:15"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"33150:3:15"},"nodeType":"YulFunctionCall","src":"33150:9:15"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"33145:1:15"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"33012:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"33015:1:15","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"33021:1:15","type":""}],"src":"32989:176:15"},{"body":{"nodeType":"YulBlock","src":"33199:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33216:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33219:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33209:6:15"},"nodeType":"YulFunctionCall","src":"33209:88:15"},"nodeType":"YulExpressionStatement","src":"33209:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33313:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33316:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33306:6:15"},"nodeType":"YulFunctionCall","src":"33306:15:15"},"nodeType":"YulExpressionStatement","src":"33306:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33337:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33340:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33330:6:15"},"nodeType":"YulFunctionCall","src":"33330:15:15"},"nodeType":"YulExpressionStatement","src":"33330:15:15"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"33171:180:15"},{"body":{"nodeType":"YulBlock","src":"33385:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33402:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33405:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33395:6:15"},"nodeType":"YulFunctionCall","src":"33395:88:15"},"nodeType":"YulExpressionStatement","src":"33395:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33499:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33502:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33492:6:15"},"nodeType":"YulFunctionCall","src":"33492:15:15"},"nodeType":"YulExpressionStatement","src":"33492:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33523:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33526:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33516:6:15"},"nodeType":"YulFunctionCall","src":"33516:15:15"},"nodeType":"YulExpressionStatement","src":"33516:15:15"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"33357:180:15"},{"body":{"nodeType":"YulBlock","src":"33571:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33588:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33591:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33581:6:15"},"nodeType":"YulFunctionCall","src":"33581:88:15"},"nodeType":"YulExpressionStatement","src":"33581:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33685:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33688:4:15","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33678:6:15"},"nodeType":"YulFunctionCall","src":"33678:15:15"},"nodeType":"YulExpressionStatement","src":"33678:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33709:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33712:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33702:6:15"},"nodeType":"YulFunctionCall","src":"33702:15:15"},"nodeType":"YulExpressionStatement","src":"33702:15:15"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"33543:180:15"},{"body":{"nodeType":"YulBlock","src":"33757:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33774:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33777:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33767:6:15"},"nodeType":"YulFunctionCall","src":"33767:88:15"},"nodeType":"YulExpressionStatement","src":"33767:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33871:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"33874:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33864:6:15"},"nodeType":"YulFunctionCall","src":"33864:15:15"},"nodeType":"YulExpressionStatement","src":"33864:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33895:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33898:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"33888:6:15"},"nodeType":"YulFunctionCall","src":"33888:15:15"},"nodeType":"YulExpressionStatement","src":"33888:15:15"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"33729:180:15"},{"body":{"nodeType":"YulBlock","src":"33943:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33960:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33963:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33953:6:15"},"nodeType":"YulFunctionCall","src":"33953:88:15"},"nodeType":"YulExpressionStatement","src":"33953:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34057:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"34060:4:15","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34050:6:15"},"nodeType":"YulFunctionCall","src":"34050:15:15"},"nodeType":"YulExpressionStatement","src":"34050:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34081:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34084:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34074:6:15"},"nodeType":"YulFunctionCall","src":"34074:15:15"},"nodeType":"YulExpressionStatement","src":"34074:15:15"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"33915:180:15"},{"body":{"nodeType":"YulBlock","src":"34129:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34146:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34149:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34139:6:15"},"nodeType":"YulFunctionCall","src":"34139:88:15"},"nodeType":"YulExpressionStatement","src":"34139:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34243:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"34246:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34236:6:15"},"nodeType":"YulFunctionCall","src":"34236:15:15"},"nodeType":"YulExpressionStatement","src":"34236:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34267:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34270:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34260:6:15"},"nodeType":"YulFunctionCall","src":"34260:15:15"},"nodeType":"YulExpressionStatement","src":"34260:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"34101:180:15"},{"body":{"nodeType":"YulBlock","src":"34376:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34393:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34396:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34386:6:15"},"nodeType":"YulFunctionCall","src":"34386:12:15"},"nodeType":"YulExpressionStatement","src":"34386:12:15"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"34287:117:15"},{"body":{"nodeType":"YulBlock","src":"34499:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34516:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34519:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34509:6:15"},"nodeType":"YulFunctionCall","src":"34509:12:15"},"nodeType":"YulExpressionStatement","src":"34509:12:15"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"34410:117:15"},{"body":{"nodeType":"YulBlock","src":"34622:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34639:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34642:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34632:6:15"},"nodeType":"YulFunctionCall","src":"34632:12:15"},"nodeType":"YulExpressionStatement","src":"34632:12:15"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"34533:117:15"},{"body":{"nodeType":"YulBlock","src":"34745:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34762:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34765:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34755:6:15"},"nodeType":"YulFunctionCall","src":"34755:12:15"},"nodeType":"YulExpressionStatement","src":"34755:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"34656:117:15"},{"body":{"nodeType":"YulBlock","src":"34868:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34885:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34888:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34878:6:15"},"nodeType":"YulFunctionCall","src":"34878:12:15"},"nodeType":"YulExpressionStatement","src":"34878:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"34779:117:15"},{"body":{"nodeType":"YulBlock","src":"34950:54:15","statements":[{"nodeType":"YulAssignment","src":"34960:38:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"34978:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"34985:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34974:3:15"},"nodeType":"YulFunctionCall","src":"34974:14:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34994:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34990:3:15"},"nodeType":"YulFunctionCall","src":"34990:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34970:3:15"},"nodeType":"YulFunctionCall","src":"34970:28:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"34960:6:15"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34933:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"34943:6:15","type":""}],"src":"34902:102:15"},{"body":{"nodeType":"YulBlock","src":"35116:126:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35138:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"35146:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35134:3:15"},"nodeType":"YulFunctionCall","src":"35134:14:15"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"35150:34:15","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35127:6:15"},"nodeType":"YulFunctionCall","src":"35127:58:15"},"nodeType":"YulExpressionStatement","src":"35127:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35206:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"35214:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35202:3:15"},"nodeType":"YulFunctionCall","src":"35202:15:15"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"35219:15:15","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35195:6:15"},"nodeType":"YulFunctionCall","src":"35195:40:15"},"nodeType":"YulExpressionStatement","src":"35195:40:15"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35108:6:15","type":""}],"src":"35010:232:15"},{"body":{"nodeType":"YulBlock","src":"35354:131:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35376:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"35384:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35372:3:15"},"nodeType":"YulFunctionCall","src":"35372:14:15"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"35388:34:15","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35365:6:15"},"nodeType":"YulFunctionCall","src":"35365:58:15"},"nodeType":"YulExpressionStatement","src":"35365:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35444:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"35452:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35440:3:15"},"nodeType":"YulFunctionCall","src":"35440:15:15"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"35457:20:15","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35433:6:15"},"nodeType":"YulFunctionCall","src":"35433:45:15"},"nodeType":"YulExpressionStatement","src":"35433:45:15"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35346:6:15","type":""}],"src":"35248:237:15"},{"body":{"nodeType":"YulBlock","src":"35597:119:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35619:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"35627:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35615:3:15"},"nodeType":"YulFunctionCall","src":"35615:14:15"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"35631:34:15","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35608:6:15"},"nodeType":"YulFunctionCall","src":"35608:58:15"},"nodeType":"YulExpressionStatement","src":"35608:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35687:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"35695:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35683:3:15"},"nodeType":"YulFunctionCall","src":"35683:15:15"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"35700:8:15","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35676:6:15"},"nodeType":"YulFunctionCall","src":"35676:33:15"},"nodeType":"YulExpressionStatement","src":"35676:33:15"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35589:6:15","type":""}],"src":"35491:225:15"},{"body":{"nodeType":"YulBlock","src":"35828:118:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35850:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"35858:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35846:3:15"},"nodeType":"YulFunctionCall","src":"35846:14:15"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"35862:34:15","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35839:6:15"},"nodeType":"YulFunctionCall","src":"35839:58:15"},"nodeType":"YulExpressionStatement","src":"35839:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35918:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"35926:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35914:3:15"},"nodeType":"YulFunctionCall","src":"35914:15:15"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"35931:7:15","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35907:6:15"},"nodeType":"YulFunctionCall","src":"35907:32:15"},"nodeType":"YulExpressionStatement","src":"35907:32:15"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35820:6:15","type":""}],"src":"35722:224:15"},{"body":{"nodeType":"YulBlock","src":"36058:72:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36080:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36088:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36076:3:15"},"nodeType":"YulFunctionCall","src":"36076:14:15"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"36092:30:15","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36069:6:15"},"nodeType":"YulFunctionCall","src":"36069:54:15"},"nodeType":"YulExpressionStatement","src":"36069:54:15"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36050:6:15","type":""}],"src":"35952:178:15"},{"body":{"nodeType":"YulBlock","src":"36242:117:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36264:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36272:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36260:3:15"},"nodeType":"YulFunctionCall","src":"36260:14:15"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"36276:34:15","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36253:6:15"},"nodeType":"YulFunctionCall","src":"36253:58:15"},"nodeType":"YulExpressionStatement","src":"36253:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36332:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36340:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36328:3:15"},"nodeType":"YulFunctionCall","src":"36328:15:15"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"36345:6:15","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36321:6:15"},"nodeType":"YulFunctionCall","src":"36321:31:15"},"nodeType":"YulExpressionStatement","src":"36321:31:15"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36234:6:15","type":""}],"src":"36136:223:15"},{"body":{"nodeType":"YulBlock","src":"36471:69:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36493:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36501:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36489:3:15"},"nodeType":"YulFunctionCall","src":"36489:14:15"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"36505:27:15","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36482:6:15"},"nodeType":"YulFunctionCall","src":"36482:51:15"},"nodeType":"YulExpressionStatement","src":"36482:51:15"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36463:6:15","type":""}],"src":"36365:175:15"},{"body":{"nodeType":"YulBlock","src":"36652:122:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36674:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36682:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36670:3:15"},"nodeType":"YulFunctionCall","src":"36670:14:15"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"36686:34:15","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36663:6:15"},"nodeType":"YulFunctionCall","src":"36663:58:15"},"nodeType":"YulExpressionStatement","src":"36663:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36742:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36750:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36738:3:15"},"nodeType":"YulFunctionCall","src":"36738:15:15"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"36755:11:15","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36731:6:15"},"nodeType":"YulFunctionCall","src":"36731:36:15"},"nodeType":"YulExpressionStatement","src":"36731:36:15"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36644:6:15","type":""}],"src":"36546:228:15"},{"body":{"nodeType":"YulBlock","src":"36886:127:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36908:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36916:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36904:3:15"},"nodeType":"YulFunctionCall","src":"36904:14:15"},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e","kind":"string","nodeType":"YulLiteral","src":"36920:34:15","type":"","value":"ERC721URIStorage: URI set of non"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36897:6:15"},"nodeType":"YulFunctionCall","src":"36897:58:15"},"nodeType":"YulExpressionStatement","src":"36897:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36976:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36984:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36972:3:15"},"nodeType":"YulFunctionCall","src":"36972:15:15"},{"hexValue":"6578697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"36989:16:15","type":"","value":"existent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36965:6:15"},"nodeType":"YulFunctionCall","src":"36965:41:15"},"nodeType":"YulExpressionStatement","src":"36965:41:15"}]},"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36878:6:15","type":""}],"src":"36780:233:15"},{"body":{"nodeType":"YulBlock","src":"37125:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37147:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"37155:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37143:3:15"},"nodeType":"YulFunctionCall","src":"37143:14:15"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"37159:34:15","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37136:6:15"},"nodeType":"YulFunctionCall","src":"37136:58:15"},"nodeType":"YulExpressionStatement","src":"37136:58:15"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37117:6:15","type":""}],"src":"37019:182:15"},{"body":{"nodeType":"YulBlock","src":"37313:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37335:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"37343:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37331:3:15"},"nodeType":"YulFunctionCall","src":"37331:14:15"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"37347:34:15","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37324:6:15"},"nodeType":"YulFunctionCall","src":"37324:58:15"},"nodeType":"YulExpressionStatement","src":"37324:58:15"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37305:6:15","type":""}],"src":"37207:182:15"},{"body":{"nodeType":"YulBlock","src":"37501:68:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37523:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"37531:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37519:3:15"},"nodeType":"YulFunctionCall","src":"37519:14:15"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"37535:26:15","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37512:6:15"},"nodeType":"YulFunctionCall","src":"37512:50:15"},"nodeType":"YulExpressionStatement","src":"37512:50:15"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37493:6:15","type":""}],"src":"37395:174:15"},{"body":{"nodeType":"YulBlock","src":"37681:114:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37703:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"37711:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37699:3:15"},"nodeType":"YulFunctionCall","src":"37699:14:15"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"37715:34:15","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37692:6:15"},"nodeType":"YulFunctionCall","src":"37692:58:15"},"nodeType":"YulExpressionStatement","src":"37692:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37771:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"37779:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37767:3:15"},"nodeType":"YulFunctionCall","src":"37767:15:15"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"37784:3:15","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37760:6:15"},"nodeType":"YulFunctionCall","src":"37760:28:15"},"nodeType":"YulExpressionStatement","src":"37760:28:15"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37673:6:15","type":""}],"src":"37575:220:15"},{"body":{"nodeType":"YulBlock","src":"37907:8:15","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37899:6:15","type":""}],"src":"37801:114:15"},{"body":{"nodeType":"YulBlock","src":"38027:142:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38049:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"38057:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38045:3:15"},"nodeType":"YulFunctionCall","src":"38045:14:15"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"38061:34:15","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38038:6:15"},"nodeType":"YulFunctionCall","src":"38038:58:15"},"nodeType":"YulExpressionStatement","src":"38038:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38117:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"38125:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38113:3:15"},"nodeType":"YulFunctionCall","src":"38113:15:15"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"38130:31:15","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38106:6:15"},"nodeType":"YulFunctionCall","src":"38106:56:15"},"nodeType":"YulExpressionStatement","src":"38106:56:15"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"38019:6:15","type":""}],"src":"37921:248:15"},{"body":{"nodeType":"YulBlock","src":"38228:62:15","statements":[{"body":{"nodeType":"YulBlock","src":"38262:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"38264:16:15"},"nodeType":"YulFunctionCall","src":"38264:18:15"},"nodeType":"YulExpressionStatement","src":"38264:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38251:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"38258:1:15","type":"","value":"3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"38248:2:15"},"nodeType":"YulFunctionCall","src":"38248:12:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38241:6:15"},"nodeType":"YulFunctionCall","src":"38241:20:15"},"nodeType":"YulIf","src":"38238:46:15"}]},"name":"validator_assert_t_enum$_Breed_$2948","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38221:5:15","type":""}],"src":"38175:115:15"},{"body":{"nodeType":"YulBlock","src":"38339:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"38396:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38405:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38408:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38398:6:15"},"nodeType":"YulFunctionCall","src":"38398:12:15"},"nodeType":"YulExpressionStatement","src":"38398:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38362:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38387:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"38369:17:15"},"nodeType":"YulFunctionCall","src":"38369:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"38359:2:15"},"nodeType":"YulFunctionCall","src":"38359:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38352:6:15"},"nodeType":"YulFunctionCall","src":"38352:43:15"},"nodeType":"YulIf","src":"38349:63:15"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38332:5:15","type":""}],"src":"38296:122:15"},{"body":{"nodeType":"YulBlock","src":"38464:76:15","statements":[{"body":{"nodeType":"YulBlock","src":"38518:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38527:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38530:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38520:6:15"},"nodeType":"YulFunctionCall","src":"38520:12:15"},"nodeType":"YulExpressionStatement","src":"38520:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38487:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38509:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"38494:14:15"},"nodeType":"YulFunctionCall","src":"38494:21:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"38484:2:15"},"nodeType":"YulFunctionCall","src":"38484:32:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38477:6:15"},"nodeType":"YulFunctionCall","src":"38477:40:15"},"nodeType":"YulIf","src":"38474:60:15"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38457:5:15","type":""}],"src":"38424:116:15"},{"body":{"nodeType":"YulBlock","src":"38588:78:15","statements":[{"body":{"nodeType":"YulBlock","src":"38644:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38653:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38656:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38646:6:15"},"nodeType":"YulFunctionCall","src":"38646:12:15"},"nodeType":"YulExpressionStatement","src":"38646:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38611:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38635:5:15"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"38618:16:15"},"nodeType":"YulFunctionCall","src":"38618:23:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"38608:2:15"},"nodeType":"YulFunctionCall","src":"38608:34:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38601:6:15"},"nodeType":"YulFunctionCall","src":"38601:42:15"},"nodeType":"YulIf","src":"38598:62:15"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38581:5:15","type":""}],"src":"38546:120:15"},{"body":{"nodeType":"YulBlock","src":"38715:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"38772:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38781:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38784:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38774:6:15"},"nodeType":"YulFunctionCall","src":"38774:12:15"},"nodeType":"YulExpressionStatement","src":"38774:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38738:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38763:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"38745:17:15"},"nodeType":"YulFunctionCall","src":"38745:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"38735:2:15"},"nodeType":"YulFunctionCall","src":"38735:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"38728:6:15"},"nodeType":"YulFunctionCall","src":"38728:43:15"},"nodeType":"YulIf","src":"38725:63:15"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38708:5:15","type":""}],"src":"38672:122:15"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // uint256[3] -> uint256[3]\n    function abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack(value, pos)  {\n        let length := array_length_t_array$_t_uint256_$3_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$3_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$3_memory_ptr(srcPtr)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_enum$_Breed_$2948_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_Breed_$2948_to_t_uint8(value))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_enum$_Breed_$2948__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_Breed_$2948_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_enum$_Breed_$2948_t_address__to_t_uint8_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_enum$_Breed_$2948_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_dataslot_t_array$_t_uint256_$3_memory_ptr(ptr) -> data {\n        data := ptr\n\n    }\n\n    function array_length_t_array$_t_uint256_$3_memory_ptr(value) -> length {\n\n        length := 0x03\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_uint256_$3_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function cleanup_t_enum$_Breed_$2948(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_Breed_$2948(value)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function convert_t_enum$_Breed_$2948_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_Breed_$2948(value)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721URIStorage: URI set of non\")\n\n        mstore(add(memPtr, 32), \"existent token\")\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function validator_assert_t_enum$_Breed_$2948(value) {\n        if iszero(lt(value, 3)) { panic_error_0x21() }\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":2527},{"length":32,"start":2611}],"2951":[{"length":32,"start":4255}],"2953":[{"length":32,"start":4348},{"length":32,"start":5090}],"2955":[{"length":32,"start":4315},{"length":32,"start":4775}],"2957":[{"length":32,"start":4383},{"length":32,"start":5140}],"2965":[{"length":32,"start":3628},{"length":32,"start":4165}],"2974":[{"length":32,"start":3236},{"length":32,"start":5907}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0xAA152491 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xDE3D9FB7 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xDE3D9FB7 EQ PUSH2 0x649 JUMPI DUP1 PUSH4 0xDE8BE8E7 EQ PUSH2 0x674 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x69F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6DC JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0xAA152491 EQ PUSH2 0x59A JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x5B8 JUMPI DUP1 PUSH4 0xC19DD76B EQ PUSH2 0x5E1 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x60C JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x509 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x534 JUMPI DUP1 PUSH4 0xA51CCCF3 EQ PUSH2 0x55D JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x45F JUMPI DUP1 PUSH4 0x7A5CAAB3 EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0x83762616 EQ PUSH2 0x4A1 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x3AF25975 GT PUSH2 0x164 JUMPI DUP1 PUSH4 0x5DACF5F4 GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x5DACF5F4 EQ PUSH2 0x38F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x3BA JUMPI DUP1 PUSH4 0x6E02007D EQ PUSH2 0x3F7 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x422 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x3AF25975 EQ PUSH2 0x312 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x34F JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x366 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xB21A83B EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2E9 JUMPI PUSH2 0x1C2 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x22F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x2C8A JUMP JUMPDEST PUSH2 0x705 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0x3224 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x219 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x32F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x256 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x251 SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0x879 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x263 SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x293 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28E SWAP2 SWAP1 PUSH2 0x2C4A JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2AA PUSH2 0x9D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B7 SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E2 SWAP2 SWAP1 PUSH2 0x2D3E JUMP JUMPDEST PUSH2 0x9DD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x2B34 JUMP JUMPDEST PUSH2 0xA9D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x339 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x334 SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x346 SWAP2 SWAP1 PUSH2 0x32F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH2 0xBAD JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x388 SWAP2 SWAP1 PUSH2 0x2B34 JUMP JUMPDEST PUSH2 0xC61 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3A4 PUSH2 0xC81 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x3209 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DC SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0xCCB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3EE SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40C PUSH2 0xD52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x419 SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x449 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x444 SWAP2 SWAP1 PUSH2 0x2AC7 JUMP JUMPDEST PUSH2 0xD5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x456 SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x474 PUSH2 0xE14 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x48B PUSH2 0xE28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x498 SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4C3 SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0xE50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4D5 SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F3 PUSH2 0xE8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x500 SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x515 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51E PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x52B SWAP2 SWAP1 PUSH2 0x32F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x55B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x556 SWAP2 SWAP1 PUSH2 0x2C0A JUMP JUMPDEST PUSH2 0xF49 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x569 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x584 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x57F SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0xF5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x591 SWAP2 SWAP1 PUSH2 0x32AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x5A2 PUSH2 0x1041 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5AF SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5DA SWAP2 SWAP1 PUSH2 0x2B87 JUMP JUMPDEST PUSH2 0x1241 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F6 PUSH2 0x12A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x603 SWAP2 SWAP1 PUSH2 0x323F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x618 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x633 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x62E SWAP2 SWAP1 PUSH2 0x2CE4 JUMP JUMPDEST PUSH2 0x12CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x640 SWAP2 SWAP1 PUSH2 0x32F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65E PUSH2 0x13DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x66B SWAP2 SWAP1 PUSH2 0x34D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x689 PUSH2 0x1410 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x696 SWAP2 SWAP1 PUSH2 0x34EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6C1 SWAP2 SWAP1 PUSH2 0x2AF4 JUMP JUMPDEST PUSH2 0x1438 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6D3 SWAP2 SWAP1 PUSH2 0x3224 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x703 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6FE SWAP2 SWAP1 PUSH2 0x2AC7 JUMP JUMPDEST PUSH2 0x14CC JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x7D0 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x7E0 JUMPI POP PUSH2 0x7DF DUP3 PUSH2 0x1550 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x7F6 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x822 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x86F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x844 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x86F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x852 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x884 DUP3 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8CA DUP3 PUSH2 0xCCB JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x93B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x932 SWAP1 PUSH2 0x3493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x95A PUSH2 0x1605 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x989 JUMPI POP PUSH2 0x988 DUP2 PUSH2 0x983 PUSH2 0x1605 JUMP JUMPDEST PUSH2 0x1438 JUMP JUMPDEST JUMPDEST PUSH2 0x9C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BF SWAP1 PUSH2 0x34B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9D2 DUP4 DUP4 PUSH2 0x160D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA8F JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA86 SWAP3 SWAP2 SWAP1 PUSH2 0x3194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA99 DUP3 DUP3 PUSH2 0x16C6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xAA8 PUSH2 0x1605 JUMP JUMPDEST DUP3 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0xAED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE4 SWAP1 PUSH2 0x3313 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAF8 DUP4 DUP4 DUP4 PUSH2 0x1956 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xA DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xB13 JUMPI PUSH2 0xB12 PUSH2 0x3940 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0xB28 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB54 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBA1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB76 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBA1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB84 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBB5 PUSH2 0x1C50 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0xBE0 SWAP1 PUSH2 0x3164 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC1D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xC5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2B55CCE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC7C DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1241 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xC89 PUSH2 0x2876 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCD7 DUP4 PUSH2 0x1CCE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xD49 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD40 SWAP1 PUSH2 0x3473 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xDCD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC4 SWAP1 PUSH2 0x33F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE1C PUSH2 0x1C50 JUMP JUMPDEST PUSH2 0xE26 PUSH1 0x0 PUSH2 0x1D0B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xEC6 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xEF2 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF3F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF14 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xF3F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF22 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF5B PUSH2 0xF54 PUSH2 0x1605 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1DD1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xF70 PUSH2 0xC81 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1009 JUMPI DUP3 DUP6 LT ISZERO DUP1 ISZERO PUSH2 0xFAF JUMPI POP DUP2 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xF9C JUMPI PUSH2 0xF9B PUSH2 0x3940 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0xFAC SWAP2 SWAP1 PUSH2 0x3606 JUMP JUMPDEST DUP6 LT JUMPDEST ISZERO PUSH2 0xFD1 JUMPI DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xFC7 JUMPI PUSH2 0xFC6 PUSH2 0x38E2 JUMP JUMPDEST JUMPDEST SWAP4 POP POP POP POP PUSH2 0x103C JUMP JUMPDEST DUP2 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xFE4 JUMPI PUSH2 0xFE3 PUSH2 0x3940 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0xFF4 SWAP2 SWAP1 PUSH2 0x3606 JUMP JUMPDEST SWAP3 POP DUP1 DUP1 PUSH2 0x1001 SWAP1 PUSH2 0x380A JUMP JUMPDEST SWAP2 POP POP PUSH2 0xF75 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x12806C9D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x109D JUMPI PUSH1 0x40 MLOAD PUSH32 0xB90F491000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1160 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x325A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x117A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x118E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11B2 SWAP2 SWAP1 PUSH2 0x2D11 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x8 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH32 0xF873236E6CC0ECC5BE1A9A35C95EE5B8D1AC4CC7BFEF0CC5060391D6CC98E26B CALLER PUSH1 0x40 MLOAD PUSH2 0x1236 SWAP2 SWAP1 PUSH2 0x3179 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP1 JUMP JUMPDEST PUSH2 0x1252 PUSH2 0x124C PUSH2 0x1605 JUMP JUMPDEST DUP4 PUSH2 0x18C1 JUMP JUMPDEST PUSH2 0x1291 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1288 SWAP1 PUSH2 0x3313 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x129D DUP5 DUP5 DUP5 DUP5 PUSH2 0x1F3E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x12D6 DUP3 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x12F6 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1322 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x136F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1344 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x136F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1352 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1380 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1396 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x13D9 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x13CB JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13B3 SWAP3 SWAP2 SWAP1 PUSH2 0x3140 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x13D9 JUMP JUMPDEST PUSH2 0x13D4 DUP5 PUSH2 0x1FB1 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x14D4 PUSH2 0x1C50 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1544 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x153B SWAP1 PUSH2 0x3353 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x154D DUP2 PUSH2 0x1D0B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15C3 DUP2 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x1602 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15F9 SWAP1 PUSH2 0x3473 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1680 DUP4 PUSH2 0xCCB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x9 SLOAD SWAP1 POP PUSH2 0x170F DUP3 DUP3 PUSH2 0x205A JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1746 JUMPI PUSH2 0x1745 PUSH2 0x3940 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1758 SWAP2 SWAP1 PUSH2 0x3853 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1765 DUP3 PUSH2 0xF5F JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x177A SWAP2 SWAP1 PUSH2 0x3606 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x17BE PUSH1 0x8 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH2 0x205A JUMP JUMPDEST PUSH2 0x1880 DUP4 PUSH1 0xA DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x17D7 JUMPI PUSH2 0x17D6 PUSH2 0x38E2 JUMP JUMPDEST JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x17E8 JUMPI PUSH2 0x17E7 PUSH2 0x3940 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x17FD SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1829 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1876 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x184B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1876 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1859 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x2078 JUMP JUMPDEST PUSH32 0x8A269F26B688E110E9CBD887D163DAB35CAE678FA353A0292DE532C0CAC1ECDC DUP2 DUP6 PUSH1 0x40 MLOAD PUSH2 0x18B1 SWAP3 SWAP2 SWAP1 PUSH2 0x32C8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x18CD DUP4 PUSH2 0xCCB JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x190F JUMPI POP PUSH2 0x190E DUP2 DUP6 PUSH2 0x1438 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x194D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1935 DUP5 PUSH2 0x879 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1976 DUP3 PUSH2 0xCCB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19C3 SWAP1 PUSH2 0x3373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1A3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A33 SWAP1 PUSH2 0x33B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1A49 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x20EC JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1A69 DUP3 PUSH2 0xCCB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1ABF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AB6 SWAP1 PUSH2 0x3373 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1C4B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2212 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1C58 PUSH2 0x1605 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C76 PUSH2 0xE8D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1CCC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CC3 SWAP1 PUSH2 0x3453 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1E40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E37 SWAP1 PUSH2 0x33D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1F31 SWAP2 SWAP1 PUSH2 0x3224 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1F49 DUP5 DUP5 DUP5 PUSH2 0x1956 JUMP JUMPDEST PUSH2 0x1F55 DUP5 DUP5 DUP5 DUP5 PUSH2 0x2218 JUMP JUMPDEST PUSH2 0x1F94 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F8B SWAP1 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1FBC DUP3 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FC6 PUSH2 0x1F9A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1FE6 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2011 JUMP JUMPDEST DUP1 PUSH2 0x1FF0 DUP5 PUSH2 0x23AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2001 SWAP3 SWAP2 SWAP1 PUSH2 0x3140 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x203B DUP4 PUSH2 0x1CCE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2074 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2487 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2081 DUP3 PUSH2 0x2019 JUMP JUMPDEST PUSH2 0x20C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20B7 SWAP1 PUSH2 0x3413 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x20E7 SWAP3 SWAP2 SWAP1 PUSH2 0x2898 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x220C JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2180 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2178 SWAP2 SWAP1 PUSH2 0x365C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x220B JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2203 SWAP2 SWAP1 PUSH2 0x3606 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2239 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x24E2 JUMP JUMPDEST ISZERO PUSH2 0x23A2 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x2262 PUSH2 0x1605 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2284 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31BD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x229E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x22CF JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22CC SWAP2 SWAP1 PUSH2 0x2CB7 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2352 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x22FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2304 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x234A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2341 SWAP1 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x23BE DUP5 PUSH2 0x2505 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x23DD JUMPI PUSH2 0x23DC PUSH2 0x396F JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x240F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x247C JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x2466 JUMPI PUSH2 0x2465 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x2477 JUMPI PUSH2 0x247C JUMP JUMPDEST PUSH2 0x241D JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2491 DUP4 DUP4 PUSH2 0x2658 JUMP JUMPDEST PUSH2 0x249E PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x2218 JUMP JUMPDEST PUSH2 0x24DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x24D4 SWAP1 PUSH2 0x3333 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x2563 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x2559 JUMPI PUSH2 0x2558 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x25A0 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2596 JUMPI PUSH2 0x2595 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x25CF JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x25C5 JUMPI PUSH2 0x25C4 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x25F8 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x25EE JUMPI PUSH2 0x25ED PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x261D JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2613 JUMPI PUSH2 0x2612 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2640 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x2636 JUMPI PUSH2 0x2635 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x264F JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x26C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x26BF SWAP1 PUSH2 0x3433 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x26D1 DUP2 PUSH2 0x2019 JUMP JUMPDEST ISZERO PUSH2 0x2711 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2708 SWAP1 PUSH2 0x3393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x271F PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x20EC JUMP JUMPDEST PUSH2 0x2728 DUP2 PUSH2 0x2019 JUMP JUMPDEST ISZERO PUSH2 0x2768 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x275F SWAP1 PUSH2 0x3393 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x2872 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2212 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x28A4 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x28C6 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x290D JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x28DF JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x290D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x290D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x290C JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x28F1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x291A SWAP2 SWAP1 PUSH2 0x291E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2937 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x291F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294E PUSH2 0x2949 DUP5 PUSH2 0x352E JUMP JUMPDEST PUSH2 0x3509 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0x2971 JUMPI PUSH2 0x2970 PUSH2 0x39A3 JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x29A1 JUMPI DUP2 PUSH2 0x2987 DUP9 DUP3 PUSH2 0x2A9D JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2974 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29BE PUSH2 0x29B9 DUP5 PUSH2 0x355A JUMP JUMPDEST PUSH2 0x3509 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x29DA JUMPI PUSH2 0x29D9 PUSH2 0x39A8 JUMP JUMPDEST JUMPDEST PUSH2 0x29E5 DUP5 DUP3 DUP6 PUSH2 0x3765 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x29FC DUP2 PUSH2 0x3D73 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A17 JUMPI PUSH2 0x2A16 PUSH2 0x399E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A27 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x293B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2A3F DUP2 PUSH2 0x3D8A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2A54 DUP2 PUSH2 0x3DA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2A69 DUP2 PUSH2 0x3DA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2A84 JUMPI PUSH2 0x2A83 PUSH2 0x399E JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2A94 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x29AB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2AAC DUP2 PUSH2 0x3DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2AC1 DUP2 PUSH2 0x3DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2ADD JUMPI PUSH2 0x2ADC PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AEB DUP5 DUP3 DUP6 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B0B JUMPI PUSH2 0x2B0A PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B19 DUP6 DUP3 DUP7 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2B2A DUP6 DUP3 DUP7 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B4D JUMPI PUSH2 0x2B4C PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B5B DUP7 DUP3 DUP8 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2B6C DUP7 DUP3 DUP8 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2B7D DUP7 DUP3 DUP8 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2BA1 JUMPI PUSH2 0x2BA0 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BAF DUP8 DUP3 DUP9 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2BC0 DUP8 DUP3 DUP9 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2BD1 DUP8 DUP3 DUP9 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2BF2 JUMPI PUSH2 0x2BF1 PUSH2 0x39AD JUMP JUMPDEST JUMPDEST PUSH2 0x2BFE DUP8 DUP3 DUP9 ADD PUSH2 0x2A6F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C21 JUMPI PUSH2 0x2C20 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C2F DUP6 DUP3 DUP7 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2C40 DUP6 DUP3 DUP7 ADD PUSH2 0x2A30 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C61 JUMPI PUSH2 0x2C60 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C6F DUP6 DUP3 DUP7 ADD PUSH2 0x29ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2C80 DUP6 DUP3 DUP7 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CA0 JUMPI PUSH2 0x2C9F PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CAE DUP5 DUP3 DUP6 ADD PUSH2 0x2A45 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CCD JUMPI PUSH2 0x2CCC PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CDB DUP5 DUP3 DUP6 ADD PUSH2 0x2A5A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CFA JUMPI PUSH2 0x2CF9 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D08 DUP5 DUP3 DUP6 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D27 JUMPI PUSH2 0x2D26 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D35 DUP5 DUP3 DUP6 ADD PUSH2 0x2AB2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D55 JUMPI PUSH2 0x2D54 PUSH2 0x39B2 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D63 DUP6 DUP3 DUP7 ADD PUSH2 0x2A9D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D84 JUMPI PUSH2 0x2D83 PUSH2 0x39AD JUMP JUMPDEST JUMPDEST PUSH2 0x2D90 DUP6 DUP3 DUP7 ADD PUSH2 0x2A02 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DA6 DUP4 DUP4 PUSH2 0x3104 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DBB DUP2 PUSH2 0x3690 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2DCA DUP2 PUSH2 0x3595 JUMP JUMPDEST PUSH2 0x2DD4 DUP2 DUP5 PUSH2 0x35C3 JUMP JUMPDEST SWAP3 POP PUSH2 0x2DDF DUP3 PUSH2 0x358B JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E10 JUMPI DUP2 MLOAD PUSH2 0x2DF7 DUP8 DUP3 PUSH2 0x2D9A JUMP JUMPDEST SWAP7 POP PUSH2 0x2E02 DUP4 PUSH2 0x35B6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2DE3 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2E21 DUP2 PUSH2 0x36A2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2E30 DUP2 PUSH2 0x36AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E41 DUP3 PUSH2 0x35A0 JUMP JUMPDEST PUSH2 0x2E4B DUP2 DUP6 PUSH2 0x35CE JUMP JUMPDEST SWAP4 POP PUSH2 0x2E5B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3774 JUMP JUMPDEST PUSH2 0x2E64 DUP2 PUSH2 0x39B7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2E78 DUP2 PUSH2 0x3753 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E89 DUP3 PUSH2 0x35AB JUMP JUMPDEST PUSH2 0x2E93 DUP2 DUP6 PUSH2 0x35EA JUMP JUMPDEST SWAP4 POP PUSH2 0x2EA3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3774 JUMP JUMPDEST PUSH2 0x2EAC DUP2 PUSH2 0x39B7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EC2 DUP3 PUSH2 0x35AB JUMP JUMPDEST PUSH2 0x2ECC DUP2 DUP6 PUSH2 0x35FB JUMP JUMPDEST SWAP4 POP PUSH2 0x2EDC DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3774 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF5 PUSH1 0x2D DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F00 DUP3 PUSH2 0x39C8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F18 PUSH1 0x32 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F23 DUP3 PUSH2 0x3A17 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F3B PUSH1 0x26 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F46 DUP3 PUSH2 0x3A66 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F5E PUSH1 0x25 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F69 DUP3 PUSH2 0x3AB5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F81 PUSH1 0x1C DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2F8C DUP3 PUSH2 0x3B04 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FA4 PUSH1 0x24 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2FAF DUP3 PUSH2 0x3B2D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC7 PUSH1 0x19 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2FD2 DUP3 PUSH2 0x3B7C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FEA PUSH1 0x29 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x2FF5 DUP3 PUSH2 0x3BA5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x300D PUSH1 0x2E DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3018 DUP3 PUSH2 0x3BF4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3030 PUSH1 0x20 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x303B DUP3 PUSH2 0x3C43 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3053 PUSH1 0x20 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x305E DUP3 PUSH2 0x3C6C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3076 PUSH1 0x18 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x3081 DUP3 PUSH2 0x3C95 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3099 PUSH1 0x21 DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x30A4 DUP3 PUSH2 0x3CBE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30BC PUSH1 0x0 DUP4 PUSH2 0x35DF JUMP JUMPDEST SWAP2 POP PUSH2 0x30C7 DUP3 PUSH2 0x3D0D JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30DF PUSH1 0x3D DUP4 PUSH2 0x35EA JUMP JUMPDEST SWAP2 POP PUSH2 0x30EA DUP3 PUSH2 0x3D10 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x30FE DUP2 PUSH2 0x36F7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x310D DUP2 PUSH2 0x3725 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x311C DUP2 PUSH2 0x3725 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x312B DUP2 PUSH2 0x372F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x313A DUP2 PUSH2 0x373F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x314C DUP3 DUP6 PUSH2 0x2EB7 JUMP JUMPDEST SWAP2 POP PUSH2 0x3158 DUP3 DUP5 PUSH2 0x2EB7 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x316F DUP3 PUSH2 0x30AF JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x318E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x31A9 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2DB2 JUMP JUMPDEST PUSH2 0x31B6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2DB2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x31D2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2DB2 JUMP JUMPDEST PUSH2 0x31DF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2DB2 JUMP JUMPDEST PUSH2 0x31EC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3113 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x31FE DUP2 DUP5 PUSH2 0x2E36 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x321E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2DC1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3239 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E18 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3254 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E27 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x326F PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2E27 JUMP JUMPDEST PUSH2 0x327C PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3131 JUMP JUMPDEST PUSH2 0x3289 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x30F5 JUMP JUMPDEST PUSH2 0x3296 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x3122 JUMP JUMPDEST PUSH2 0x32A3 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x3122 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x32C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E6F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x32DD PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2E6F JUMP JUMPDEST PUSH2 0x32EA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2DB2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x330B DUP2 DUP5 PUSH2 0x2E7E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x332C DUP2 PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x334C DUP2 PUSH2 0x2F0B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x336C DUP2 PUSH2 0x2F2E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x338C DUP2 PUSH2 0x2F51 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33AC DUP2 PUSH2 0x2F74 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33CC DUP2 PUSH2 0x2F97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x33EC DUP2 PUSH2 0x2FBA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x340C DUP2 PUSH2 0x2FDD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x342C DUP2 PUSH2 0x3000 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x344C DUP2 PUSH2 0x3023 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x346C DUP2 PUSH2 0x3046 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x348C DUP2 PUSH2 0x3069 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34AC DUP2 PUSH2 0x308C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34CC DUP2 PUSH2 0x30D2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x34E8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3113 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3503 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3122 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3513 PUSH2 0x3524 JUMP JUMPDEST SWAP1 POP PUSH2 0x351F DUP3 DUP3 PUSH2 0x37D9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3549 JUMPI PUSH2 0x3548 PUSH2 0x396F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3575 JUMPI PUSH2 0x3574 PUSH2 0x396F JUMP JUMPDEST JUMPDEST PUSH2 0x357E DUP3 PUSH2 0x39B7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3611 DUP3 PUSH2 0x3725 JUMP JUMPDEST SWAP2 POP PUSH2 0x361C DUP4 PUSH2 0x3725 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x3651 JUMPI PUSH2 0x3650 PUSH2 0x3884 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3667 DUP3 PUSH2 0x3725 JUMP JUMPDEST SWAP2 POP PUSH2 0x3672 DUP4 PUSH2 0x3725 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x3685 JUMPI PUSH2 0x3684 PUSH2 0x3884 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x369B DUP3 PUSH2 0x3705 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x36F2 DUP3 PUSH2 0x3D5F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x375E DUP3 PUSH2 0x36E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3792 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3777 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x37A1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x37BF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x37D3 JUMPI PUSH2 0x37D2 PUSH2 0x3911 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x37E2 DUP3 PUSH2 0x39B7 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3801 JUMPI PUSH2 0x3800 PUSH2 0x396F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3815 DUP3 PUSH2 0x3725 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x3848 JUMPI PUSH2 0x3847 PUSH2 0x3884 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x385E DUP3 PUSH2 0x3725 JUMP JUMPDEST SWAP2 POP PUSH2 0x3869 DUP4 PUSH2 0x3725 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3879 JUMPI PUSH2 0x3878 PUSH2 0x38B3 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x3D70 JUMPI PUSH2 0x3D6F PUSH2 0x38E2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x3D7C DUP2 PUSH2 0x3690 JUMP JUMPDEST DUP2 EQ PUSH2 0x3D87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3D93 DUP2 PUSH2 0x36A2 JUMP JUMPDEST DUP2 EQ PUSH2 0x3D9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3DAA DUP2 PUSH2 0x36B8 JUMP JUMPDEST DUP2 EQ PUSH2 0x3DB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3DC1 DUP2 PUSH2 0x3725 JUMP JUMPDEST DUP2 EQ PUSH2 0x3DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x26 PUSH17 0xDDD3A2C66F6C4EDE94B810C4624FF3DA98 PUSH5 0x69EF5D038C 0xE9 SHR 0x4F 0xDC PUSH27 0x849964736F6C634300080700330000000000000000000000000000 ","sourceMap":"513:4194:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1103:29:14;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4469:135:14;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2407:249;;;;;;;;;;;;;:::i;:::-;;5004:179:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4256:116:14;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4610:95:14;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1831:101:2;;;;;;;;;;;;;:::i;:::-;;4378:85:14;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3918:133;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1201:85:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102:3;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3266:542:14;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1916:485;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5249:314:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4165:85:14;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;482:608:6;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3814:99:14;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4057:102;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2081:198:2;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1570:300:3;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;1103:29:14:-;;;;:::o;6618:256:0:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;4612:326:3:-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;4469:135:14:-;4544:13;4576:14;4591:5;4576:21;;;;;;;;:::i;:::-;;;;;;;;;4569:28;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4469:135;;;:::o;2407:249::-;1094:13:2;:11;:13::i;:::-;2454:14:14::1;2471:21;2454:38;;2503:12;2529:10;2521:24;;2553:6;2521:43;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2502:62;;;2579:7;2574:76;;2609:30;;;;;;;;;;;;;;2574:76;2444:212;;2407:249::o:0;5004:179:3:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;4256:116:14:-;4303:17;;:::i;:::-;4332:33;;;;;;;;4340:2;4332:33;;;;4344:2;4332:33;;;;4348:16;4332:33;;;;;4256:116;:::o;2190:219:3:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;4610:95:14:-;4658:7;4684:14;;4677:21;;4610:95;:::o;1929:204:3:-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;1831:101:2:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;4378:85:14:-;4421:7;4447:9;4440:16;;4378:85;:::o;3918:133::-;3989:7;4014:19;:30;4034:9;4014:30;;;;;;;;;;;;;;;;;;;;;4007:37;;3918:133;;;:::o;1201:85:2:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;2633:102:3:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;3266:542:14:-;3351:5;3368:21;3392:1;3368:25;;3403:29;3435:16;:14;:16::i;:::-;3403:48;;3466:9;3461:290;3485:18;3481:1;:22;3461:290;;;3558:13;3545:9;:26;;:88;;;;;3619:11;3631:1;3619:14;;;;;;;:::i;:::-;;;;;;3603:13;:30;;;;:::i;:::-;3591:9;:42;3545:88;3524:172;;;3679:1;3673:8;;;;;;;;:::i;:::-;;3666:15;;;;;;;3524:172;3726:11;3738:1;3726:14;;;;;;;:::i;:::-;;;;;;3709:31;;;;;:::i;:::-;;;3505:3;;;;;:::i;:::-;;;;3461:290;;;;3768:33;;;;;;;;;;;;;;3266:542;;;;:::o;1916:485::-;1962:17;2007:9;1995;:21;1991:91;;;2039:32;;;;;;;;;;;;;;1991:91;2103:16;:35;;;2152:9;2175:16;916:1;2240:18;959:1;2103:188;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2091:200;;2334:10;2301:19;:30;2321:9;2301:30;;;;;;;;;;;;:43;;;;;;;;;;;;;;;;;;2372:9;2359:35;2383:10;2359:35;;;;;;:::i;:::-;;;;;;;;1916:485;:::o;5249:314:3:-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;4165:85:14:-;4208:7;4234:9;4227:16;;4165:85;:::o;482:608:6:-;555:13;580:23;595:7;580:14;:23::i;:::-;614;640:10;:19;651:7;640:19;;;;;;;;;;;614:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;669:18;690:10;:8;:10::i;:::-;669:31;;795:1;779:4;773:18;:23;769:70;;;819:9;812:16;;;;;;769:70;967:1;947:9;941:23;:27;937:106;;;1015:4;1021:9;998:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;984:48;;;;;;937:106;1060:23;1075:7;1060:14;:23::i;:::-;1053:30;;;;482:608;;;;:::o;3814:99:14:-;3864:7;3890:16;3883:23;;;;3814:99;:::o;4057:102::-;4109:6;4134:18;4127:25;;4057:102;:::o;4388:162:3:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;2081:198:2:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;;;2161:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;829:155:11:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:3:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:9:-;693:7;719:10;712:17;;640:96;:::o;12768:171:3:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;2662:598:14:-;2789:16;2808:19;:30;2828:9;2808:30;;;;;;;;;;;;;;;;;;;;;2789:49;;2848:18;2869:14;;2848:35;;2893:31;2903:8;2913:10;2893:9;:31::i;:::-;2935:17;2972:16;2955:11;2967:1;2955:14;;;;;;;;:::i;:::-;;;;;;;;:33;;;;:::i;:::-;2935:53;;2999:14;3016:32;3038:9;3016:21;:32::i;:::-;2999:49;;3076:1;3058:14;;:19;;;;;;;:::i;:::-;;;;;;;;3087:53;3097:19;:30;3117:9;3097:30;;;;;;;;;;;;;;;;;;;;;3129:10;3087:9;:53::i;:::-;3150:59;3163:10;3175:14;3198:8;3190:17;;;;;;;;:::i;:::-;;3175:33;;;;;;;;:::i;:::-;;;;;;;;;3150:59;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:59::i;:::-;3224:29;3234:8;3244;3224:29;;;;;;;:::i;:::-;;;;;;;;2779:481;;;;2662:598;;:::o;7540:261:3:-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;1359:130:2:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;6838:115:3:-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;2433:187:2:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;13075:307:3:-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;7256:126::-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;8131:108::-;8206:26;8216:2;8220:7;8206:26;;;;;;;;;;;;:9;:26::i;:::-;8131:108;;:::o;1237:214:6:-;1336:16;1344:7;1336;:16::i;:::-;1328:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;1435:9;1413:10;:19;1424:7;1413:19;;;;;;;;;;;:31;;;;;;;;;;;;:::i;:::-;;1237:214;;:::o;15698:396:3:-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;415:696:10:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;8460:309:3:-;8584:18;8590:2;8594:7;8584:5;:18::i;:::-;8633:53;8664:1;8668:2;8672:7;8681:4;8633:22;:53::i;:::-;8612:150;;;;;;;;;;;;:::i;:::-;;;;;;;;;8460:309;;;:::o;1175:320:8:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;9889:890:13:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;9091:920:3:-;9184:1;9170:16;;:2;:16;;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:722:15:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:143;;;404:79;;:::i;:::-;350:143;517:1;502:238;527:6;524:1;521:13;502:238;;;595:3;624:37;657:3;645:10;624:37;:::i;:::-;619:3;612:50;691:4;686:3;682:14;675:21;;725:4;720:3;716:14;709:21;;562:178;549:1;546;542:9;537:14;;502:238;;;506:14;126:620;;24:722;;;;;:::o;752:410::-;829:5;854:65;870:48;911:6;870:48;:::i;:::-;854:65;:::i;:::-;845:74;;942:6;935:5;928:21;980:4;973:5;969:16;1018:3;1009:6;1004:3;1000:16;997:25;994:112;;;1025:79;;:::i;:::-;994:112;1115:41;1149:6;1144:3;1139;1115:41;:::i;:::-;835:327;752:410;;;;;:::o;1168:139::-;1214:5;1252:6;1239:20;1230:29;;1268:33;1295:5;1268:33;:::i;:::-;1168:139;;;;:::o;1330:370::-;1401:5;1450:3;1443:4;1435:6;1431:17;1427:27;1417:122;;1458:79;;:::i;:::-;1417:122;1575:6;1562:20;1600:94;1690:3;1682:6;1675:4;1667:6;1663:17;1600:94;:::i;:::-;1591:103;;1407:293;1330:370;;;;:::o;1706:133::-;1749:5;1787:6;1774:20;1765:29;;1803:30;1827:5;1803:30;:::i;:::-;1706:133;;;;:::o;1845:137::-;1890:5;1928:6;1915:20;1906:29;;1944:32;1970:5;1944:32;:::i;:::-;1845:137;;;;:::o;1988:141::-;2044:5;2075:6;2069:13;2060:22;;2091:32;2117:5;2091:32;:::i;:::-;1988:141;;;;:::o;2148:338::-;2203:5;2252:3;2245:4;2237:6;2233:17;2229:27;2219:122;;2260:79;;:::i;:::-;2219:122;2377:6;2364:20;2402:78;2476:3;2468:6;2461:4;2453:6;2449:17;2402:78;:::i;:::-;2393:87;;2209:277;2148:338;;;;:::o;2492:139::-;2538:5;2576:6;2563:20;2554:29;;2592:33;2619:5;2592:33;:::i;:::-;2492:139;;;;:::o;2637:143::-;2694:5;2725:6;2719:13;2710:22;;2741:33;2768:5;2741:33;:::i;:::-;2637:143;;;;:::o;2786:329::-;2845:6;2894:2;2882:9;2873:7;2869:23;2865:32;2862:119;;;2900:79;;:::i;:::-;2862:119;3020:1;3045:53;3090:7;3081:6;3070:9;3066:22;3045:53;:::i;:::-;3035:63;;2991:117;2786:329;;;;:::o;3121:474::-;3189:6;3197;3246:2;3234:9;3225:7;3221:23;3217:32;3214:119;;;3252:79;;:::i;:::-;3214:119;3372:1;3397:53;3442:7;3433:6;3422:9;3418:22;3397:53;:::i;:::-;3387:63;;3343:117;3499:2;3525:53;3570:7;3561:6;3550:9;3546:22;3525:53;:::i;:::-;3515:63;;3470:118;3121:474;;;;;:::o;3601:619::-;3678:6;3686;3694;3743:2;3731:9;3722:7;3718:23;3714:32;3711:119;;;3749:79;;:::i;:::-;3711:119;3869:1;3894:53;3939:7;3930:6;3919:9;3915:22;3894:53;:::i;:::-;3884:63;;3840:117;3996:2;4022:53;4067:7;4058:6;4047:9;4043:22;4022:53;:::i;:::-;4012:63;;3967:118;4124:2;4150:53;4195:7;4186:6;4175:9;4171:22;4150:53;:::i;:::-;4140:63;;4095:118;3601:619;;;;;:::o;4226:943::-;4321:6;4329;4337;4345;4394:3;4382:9;4373:7;4369:23;4365:33;4362:120;;;4401:79;;:::i;:::-;4362:120;4521:1;4546:53;4591:7;4582:6;4571:9;4567:22;4546:53;:::i;:::-;4536:63;;4492:117;4648:2;4674:53;4719:7;4710:6;4699:9;4695:22;4674:53;:::i;:::-;4664:63;;4619:118;4776:2;4802:53;4847:7;4838:6;4827:9;4823:22;4802:53;:::i;:::-;4792:63;;4747:118;4932:2;4921:9;4917:18;4904:32;4963:18;4955:6;4952:30;4949:117;;;4985:79;;:::i;:::-;4949:117;5090:62;5144:7;5135:6;5124:9;5120:22;5090:62;:::i;:::-;5080:72;;4875:287;4226:943;;;;;;;:::o;5175:468::-;5240:6;5248;5297:2;5285:9;5276:7;5272:23;5268:32;5265:119;;;5303:79;;:::i;:::-;5265:119;5423:1;5448:53;5493:7;5484:6;5473:9;5469:22;5448:53;:::i;:::-;5438:63;;5394:117;5550:2;5576:50;5618:7;5609:6;5598:9;5594:22;5576:50;:::i;:::-;5566:60;;5521:115;5175:468;;;;;:::o;5649:474::-;5717:6;5725;5774:2;5762:9;5753:7;5749:23;5745:32;5742:119;;;5780:79;;:::i;:::-;5742:119;5900:1;5925:53;5970:7;5961:6;5950:9;5946:22;5925:53;:::i;:::-;5915:63;;5871:117;6027:2;6053:53;6098:7;6089:6;6078:9;6074:22;6053:53;:::i;:::-;6043:63;;5998:118;5649:474;;;;;:::o;6129:327::-;6187:6;6236:2;6224:9;6215:7;6211:23;6207:32;6204:119;;;6242:79;;:::i;:::-;6204:119;6362:1;6387:52;6431:7;6422:6;6411:9;6407:22;6387:52;:::i;:::-;6377:62;;6333:116;6129:327;;;;:::o;6462:349::-;6531:6;6580:2;6568:9;6559:7;6555:23;6551:32;6548:119;;;6586:79;;:::i;:::-;6548:119;6706:1;6731:63;6786:7;6777:6;6766:9;6762:22;6731:63;:::i;:::-;6721:73;;6677:127;6462:349;;;;:::o;6817:329::-;6876:6;6925:2;6913:9;6904:7;6900:23;6896:32;6893:119;;;6931:79;;:::i;:::-;6893:119;7051:1;7076:53;7121:7;7112:6;7101:9;7097:22;7076:53;:::i;:::-;7066:63;;7022:117;6817:329;;;;:::o;7152:351::-;7222:6;7271:2;7259:9;7250:7;7246:23;7242:32;7239:119;;;7277:79;;:::i;:::-;7239:119;7397:1;7422:64;7478:7;7469:6;7458:9;7454:22;7422:64;:::i;:::-;7412:74;;7368:128;7152:351;;;;:::o;7509:684::-;7602:6;7610;7659:2;7647:9;7638:7;7634:23;7630:32;7627:119;;;7665:79;;:::i;:::-;7627:119;7785:1;7810:53;7855:7;7846:6;7835:9;7831:22;7810:53;:::i;:::-;7800:63;;7756:117;7940:2;7929:9;7925:18;7912:32;7971:18;7963:6;7960:30;7957:117;;;7993:79;;:::i;:::-;7957:117;8098:78;8168:7;8159:6;8148:9;8144:22;8098:78;:::i;:::-;8088:88;;7883:303;7509:684;;;;;:::o;8199:179::-;8268:10;8289:46;8331:3;8323:6;8289:46;:::i;:::-;8367:4;8362:3;8358:14;8344:28;;8199:179;;;;:::o;8384:118::-;8471:24;8489:5;8471:24;:::i;:::-;8466:3;8459:37;8384:118;;:::o;8540:694::-;8676:52;8722:5;8676:52;:::i;:::-;8744:84;8821:6;8816:3;8744:84;:::i;:::-;8737:91;;8852:54;8900:5;8852:54;:::i;:::-;8929:7;8960:1;8945:282;8970:6;8967:1;8964:13;8945:282;;;9046:6;9040:13;9073:63;9132:3;9117:13;9073:63;:::i;:::-;9066:70;;9159:58;9210:6;9159:58;:::i;:::-;9149:68;;9005:222;8992:1;8989;8985:9;8980:14;;8945:282;;;8949:14;8652:582;;;8540:694;;:::o;9240:109::-;9321:21;9336:5;9321:21;:::i;:::-;9316:3;9309:34;9240:109;;:::o;9355:118::-;9442:24;9460:5;9442:24;:::i;:::-;9437:3;9430:37;9355:118;;:::o;9479:360::-;9565:3;9593:38;9625:5;9593:38;:::i;:::-;9647:70;9710:6;9705:3;9647:70;:::i;:::-;9640:77;;9726:52;9771:6;9766:3;9759:4;9752:5;9748:16;9726:52;:::i;:::-;9803:29;9825:6;9803:29;:::i;:::-;9798:3;9794:39;9787:46;;9569:270;9479:360;;;;:::o;9845:147::-;9940:45;9979:5;9940:45;:::i;:::-;9935:3;9928:58;9845:147;;:::o;9998:364::-;10086:3;10114:39;10147:5;10114:39;:::i;:::-;10169:71;10233:6;10228:3;10169:71;:::i;:::-;10162:78;;10249:52;10294:6;10289:3;10282:4;10275:5;10271:16;10249:52;:::i;:::-;10326:29;10348:6;10326:29;:::i;:::-;10321:3;10317:39;10310:46;;10090:272;9998:364;;;;:::o;10368:377::-;10474:3;10502:39;10535:5;10502:39;:::i;:::-;10557:89;10639:6;10634:3;10557:89;:::i;:::-;10550:96;;10655:52;10700:6;10695:3;10688:4;10681:5;10677:16;10655:52;:::i;:::-;10732:6;10727:3;10723:16;10716:23;;10478:267;10368:377;;;;:::o;10751:366::-;10893:3;10914:67;10978:2;10973:3;10914:67;:::i;:::-;10907:74;;10990:93;11079:3;10990:93;:::i;:::-;11108:2;11103:3;11099:12;11092:19;;10751:366;;;:::o;11123:::-;11265:3;11286:67;11350:2;11345:3;11286:67;:::i;:::-;11279:74;;11362:93;11451:3;11362:93;:::i;:::-;11480:2;11475:3;11471:12;11464:19;;11123:366;;;:::o;11495:::-;11637:3;11658:67;11722:2;11717:3;11658:67;:::i;:::-;11651:74;;11734:93;11823:3;11734:93;:::i;:::-;11852:2;11847:3;11843:12;11836:19;;11495:366;;;:::o;11867:::-;12009:3;12030:67;12094:2;12089:3;12030:67;:::i;:::-;12023:74;;12106:93;12195:3;12106:93;:::i;:::-;12224:2;12219:3;12215:12;12208:19;;11867:366;;;:::o;12239:::-;12381:3;12402:67;12466:2;12461:3;12402:67;:::i;:::-;12395:74;;12478:93;12567:3;12478:93;:::i;:::-;12596:2;12591:3;12587:12;12580:19;;12239:366;;;:::o;12611:::-;12753:3;12774:67;12838:2;12833:3;12774:67;:::i;:::-;12767:74;;12850:93;12939:3;12850:93;:::i;:::-;12968:2;12963:3;12959:12;12952:19;;12611:366;;;:::o;12983:::-;13125:3;13146:67;13210:2;13205:3;13146:67;:::i;:::-;13139:74;;13222:93;13311:3;13222:93;:::i;:::-;13340:2;13335:3;13331:12;13324:19;;12983:366;;;:::o;13355:::-;13497:3;13518:67;13582:2;13577:3;13518:67;:::i;:::-;13511:74;;13594:93;13683:3;13594:93;:::i;:::-;13712:2;13707:3;13703:12;13696:19;;13355:366;;;:::o;13727:::-;13869:3;13890:67;13954:2;13949:3;13890:67;:::i;:::-;13883:74;;13966:93;14055:3;13966:93;:::i;:::-;14084:2;14079:3;14075:12;14068:19;;13727:366;;;:::o;14099:::-;14241:3;14262:67;14326:2;14321:3;14262:67;:::i;:::-;14255:74;;14338:93;14427:3;14338:93;:::i;:::-;14456:2;14451:3;14447:12;14440:19;;14099:366;;;:::o;14471:::-;14613:3;14634:67;14698:2;14693:3;14634:67;:::i;:::-;14627:74;;14710:93;14799:3;14710:93;:::i;:::-;14828:2;14823:3;14819:12;14812:19;;14471:366;;;:::o;14843:::-;14985:3;15006:67;15070:2;15065:3;15006:67;:::i;:::-;14999:74;;15082:93;15171:3;15082:93;:::i;:::-;15200:2;15195:3;15191:12;15184:19;;14843:366;;;:::o;15215:::-;15357:3;15378:67;15442:2;15437:3;15378:67;:::i;:::-;15371:74;;15454:93;15543:3;15454:93;:::i;:::-;15572:2;15567:3;15563:12;15556:19;;15215:366;;;:::o;15587:398::-;15746:3;15767:83;15848:1;15843:3;15767:83;:::i;:::-;15760:90;;15859:93;15948:3;15859:93;:::i;:::-;15977:1;15972:3;15968:11;15961:18;;15587:398;;;:::o;15991:366::-;16133:3;16154:67;16218:2;16213:3;16154:67;:::i;:::-;16147:74;;16230:93;16319:3;16230:93;:::i;:::-;16348:2;16343:3;16339:12;16332:19;;15991:366;;;:::o;16363:115::-;16448:23;16465:5;16448:23;:::i;:::-;16443:3;16436:36;16363:115;;:::o;16484:108::-;16561:24;16579:5;16561:24;:::i;:::-;16556:3;16549:37;16484:108;;:::o;16598:118::-;16685:24;16703:5;16685:24;:::i;:::-;16680:3;16673:37;16598:118;;:::o;16722:115::-;16807:23;16824:5;16807:23;:::i;:::-;16802:3;16795:36;16722:115;;:::o;16843:::-;16928:23;16945:5;16928:23;:::i;:::-;16923:3;16916:36;16843:115;;:::o;16964:435::-;17144:3;17166:95;17257:3;17248:6;17166:95;:::i;:::-;17159:102;;17278:95;17369:3;17360:6;17278:95;:::i;:::-;17271:102;;17390:3;17383:10;;16964:435;;;;;:::o;17405:379::-;17589:3;17611:147;17754:3;17611:147;:::i;:::-;17604:154;;17775:3;17768:10;;17405:379;;;:::o;17790:222::-;17883:4;17921:2;17910:9;17906:18;17898:26;;17934:71;18002:1;17991:9;17987:17;17978:6;17934:71;:::i;:::-;17790:222;;;;:::o;18018:332::-;18139:4;18177:2;18166:9;18162:18;18154:26;;18190:71;18258:1;18247:9;18243:17;18234:6;18190:71;:::i;:::-;18271:72;18339:2;18328:9;18324:18;18315:6;18271:72;:::i;:::-;18018:332;;;;;:::o;18356:640::-;18551:4;18589:3;18578:9;18574:19;18566:27;;18603:71;18671:1;18660:9;18656:17;18647:6;18603:71;:::i;:::-;18684:72;18752:2;18741:9;18737:18;18728:6;18684:72;:::i;:::-;18766;18834:2;18823:9;18819:18;18810:6;18766:72;:::i;:::-;18885:9;18879:4;18875:20;18870:2;18859:9;18855:18;18848:48;18913:76;18984:4;18975:6;18913:76;:::i;:::-;18905:84;;18356:640;;;;;;;:::o;19002:314::-;19141:4;19179:2;19168:9;19164:18;19156:26;;19192:117;19306:1;19295:9;19291:17;19282:6;19192:117;:::i;:::-;19002:314;;;;:::o;19322:210::-;19409:4;19447:2;19436:9;19432:18;19424:26;;19460:65;19522:1;19511:9;19507:17;19498:6;19460:65;:::i;:::-;19322:210;;;;:::o;19538:222::-;19631:4;19669:2;19658:9;19654:18;19646:26;;19682:71;19750:1;19739:9;19735:17;19726:6;19682:71;:::i;:::-;19538:222;;;;:::o;19766:648::-;19963:4;20001:3;19990:9;19986:19;19978:27;;20015:71;20083:1;20072:9;20068:17;20059:6;20015:71;:::i;:::-;20096:70;20162:2;20151:9;20147:18;20138:6;20096:70;:::i;:::-;20176;20242:2;20231:9;20227:18;20218:6;20176:70;:::i;:::-;20256;20322:2;20311:9;20307:18;20298:6;20256:70;:::i;:::-;20336:71;20402:3;20391:9;20387:19;20378:6;20336:71;:::i;:::-;19766:648;;;;;;;;:::o;20420:238::-;20521:4;20559:2;20548:9;20544:18;20536:26;;20572:79;20648:1;20637:9;20633:17;20624:6;20572:79;:::i;:::-;20420:238;;;;:::o;20664:348::-;20793:4;20831:2;20820:9;20816:18;20808:26;;20844:79;20920:1;20909:9;20905:17;20896:6;20844:79;:::i;:::-;20933:72;21001:2;20990:9;20986:18;20977:6;20933:72;:::i;:::-;20664:348;;;;;:::o;21018:313::-;21131:4;21169:2;21158:9;21154:18;21146:26;;21218:9;21212:4;21208:20;21204:1;21193:9;21189:17;21182:47;21246:78;21319:4;21310:6;21246:78;:::i;:::-;21238:86;;21018:313;;;;:::o;21337:419::-;21503:4;21541:2;21530:9;21526:18;21518:26;;21590:9;21584:4;21580:20;21576:1;21565:9;21561:17;21554:47;21618:131;21744:4;21618:131;:::i;:::-;21610:139;;21337:419;;;:::o;21762:::-;21928:4;21966:2;21955:9;21951:18;21943:26;;22015:9;22009:4;22005:20;22001:1;21990:9;21986:17;21979:47;22043:131;22169:4;22043:131;:::i;:::-;22035:139;;21762:419;;;:::o;22187:::-;22353:4;22391:2;22380:9;22376:18;22368:26;;22440:9;22434:4;22430:20;22426:1;22415:9;22411:17;22404:47;22468:131;22594:4;22468:131;:::i;:::-;22460:139;;22187:419;;;:::o;22612:::-;22778:4;22816:2;22805:9;22801:18;22793:26;;22865:9;22859:4;22855:20;22851:1;22840:9;22836:17;22829:47;22893:131;23019:4;22893:131;:::i;:::-;22885:139;;22612:419;;;:::o;23037:::-;23203:4;23241:2;23230:9;23226:18;23218:26;;23290:9;23284:4;23280:20;23276:1;23265:9;23261:17;23254:47;23318:131;23444:4;23318:131;:::i;:::-;23310:139;;23037:419;;;:::o;23462:::-;23628:4;23666:2;23655:9;23651:18;23643:26;;23715:9;23709:4;23705:20;23701:1;23690:9;23686:17;23679:47;23743:131;23869:4;23743:131;:::i;:::-;23735:139;;23462:419;;;:::o;23887:::-;24053:4;24091:2;24080:9;24076:18;24068:26;;24140:9;24134:4;24130:20;24126:1;24115:9;24111:17;24104:47;24168:131;24294:4;24168:131;:::i;:::-;24160:139;;23887:419;;;:::o;24312:::-;24478:4;24516:2;24505:9;24501:18;24493:26;;24565:9;24559:4;24555:20;24551:1;24540:9;24536:17;24529:47;24593:131;24719:4;24593:131;:::i;:::-;24585:139;;24312:419;;;:::o;24737:::-;24903:4;24941:2;24930:9;24926:18;24918:26;;24990:9;24984:4;24980:20;24976:1;24965:9;24961:17;24954:47;25018:131;25144:4;25018:131;:::i;:::-;25010:139;;24737:419;;;:::o;25162:::-;25328:4;25366:2;25355:9;25351:18;25343:26;;25415:9;25409:4;25405:20;25401:1;25390:9;25386:17;25379:47;25443:131;25569:4;25443:131;:::i;:::-;25435:139;;25162:419;;;:::o;25587:::-;25753:4;25791:2;25780:9;25776:18;25768:26;;25840:9;25834:4;25830:20;25826:1;25815:9;25811:17;25804:47;25868:131;25994:4;25868:131;:::i;:::-;25860:139;;25587:419;;;:::o;26012:::-;26178:4;26216:2;26205:9;26201:18;26193:26;;26265:9;26259:4;26255:20;26251:1;26240:9;26236:17;26229:47;26293:131;26419:4;26293:131;:::i;:::-;26285:139;;26012:419;;;:::o;26437:::-;26603:4;26641:2;26630:9;26626:18;26618:26;;26690:9;26684:4;26680:20;26676:1;26665:9;26661:17;26654:47;26718:131;26844:4;26718:131;:::i;:::-;26710:139;;26437:419;;;:::o;26862:::-;27028:4;27066:2;27055:9;27051:18;27043:26;;27115:9;27109:4;27105:20;27101:1;27090:9;27086:17;27079:47;27143:131;27269:4;27143:131;:::i;:::-;27135:139;;26862:419;;;:::o;27287:222::-;27380:4;27418:2;27407:9;27403:18;27395:26;;27431:71;27499:1;27488:9;27484:17;27475:6;27431:71;:::i;:::-;27287:222;;;;:::o;27515:218::-;27606:4;27644:2;27633:9;27629:18;27621:26;;27657:69;27723:1;27712:9;27708:17;27699:6;27657:69;:::i;:::-;27515:218;;;;:::o;27739:129::-;27773:6;27800:20;;:::i;:::-;27790:30;;27829:33;27857:4;27849:6;27829:33;:::i;:::-;27739:129;;;:::o;27874:75::-;27907:6;27940:2;27934:9;27924:19;;27874:75;:::o;27955:311::-;28032:4;28122:18;28114:6;28111:30;28108:56;;;28144:18;;:::i;:::-;28108:56;28194:4;28186:6;28182:17;28174:25;;28254:4;28248;28244:15;28236:23;;27955:311;;;:::o;28272:307::-;28333:4;28423:18;28415:6;28412:30;28409:56;;;28445:18;;:::i;:::-;28409:56;28483:29;28505:6;28483:29;:::i;:::-;28475:37;;28567:4;28561;28557:15;28549:23;;28272:307;;;:::o;28585:98::-;28650:4;28673:3;28665:11;;28585:98;;;:::o;28689:104::-;28754:6;28782:4;28772:14;;28689:104;;;:::o;28799:98::-;28850:6;28884:5;28878:12;28868:22;;28799:98;;;:::o;28903:99::-;28955:6;28989:5;28983:12;28973:22;;28903:99;;;:::o;29008:111::-;29076:4;29108;29103:3;29099:14;29091:22;;29008:111;;;:::o;29125:143::-;29222:11;29259:3;29244:18;;29125:143;;;;:::o;29274:168::-;29357:11;29391:6;29386:3;29379:19;29431:4;29426:3;29422:14;29407:29;;29274:168;;;;:::o;29448:147::-;29549:11;29586:3;29571:18;;29448:147;;;;:::o;29601:169::-;29685:11;29719:6;29714:3;29707:19;29759:4;29754:3;29750:14;29735:29;;29601:169;;;;:::o;29776:148::-;29878:11;29915:3;29900:18;;29776:148;;;;:::o;29930:305::-;29970:3;29989:20;30007:1;29989:20;:::i;:::-;29984:25;;30023:20;30041:1;30023:20;:::i;:::-;30018:25;;30177:1;30109:66;30105:74;30102:1;30099:81;30096:107;;;30183:18;;:::i;:::-;30096:107;30227:1;30224;30220:9;30213:16;;29930:305;;;;:::o;30241:191::-;30281:4;30301:20;30319:1;30301:20;:::i;:::-;30296:25;;30335:20;30353:1;30335:20;:::i;:::-;30330:25;;30374:1;30371;30368:8;30365:34;;;30379:18;;:::i;:::-;30365:34;30424:1;30421;30417:9;30409:17;;30241:191;;;;:::o;30438:96::-;30475:7;30504:24;30522:5;30504:24;:::i;:::-;30493:35;;30438:96;;;:::o;30540:90::-;30574:7;30617:5;30610:13;30603:21;30592:32;;30540:90;;;:::o;30636:77::-;30673:7;30702:5;30691:16;;30636:77;;;:::o;30719:149::-;30755:7;30795:66;30788:5;30784:78;30773:89;;30719:149;;;:::o;30874:131::-;30921:7;30950:5;30939:16;;30956:43;30993:5;30956:43;:::i;:::-;30874:131;;;:::o;31011:89::-;31047:7;31087:6;31080:5;31076:18;31065:29;;31011:89;;;:::o;31106:126::-;31143:7;31183:42;31176:5;31172:54;31161:65;;31106:126;;;:::o;31238:77::-;31275:7;31304:5;31293:16;;31238:77;;;:::o;31321:93::-;31357:7;31397:10;31390:5;31386:22;31375:33;;31321:93;;;:::o;31420:101::-;31456:7;31496:18;31489:5;31485:30;31474:41;;31420:101;;;:::o;31527:131::-;31585:9;31618:34;31646:5;31618:34;:::i;:::-;31605:47;;31527:131;;;:::o;31664:154::-;31748:6;31743:3;31738;31725:30;31810:1;31801:6;31796:3;31792:16;31785:27;31664:154;;;:::o;31824:307::-;31892:1;31902:113;31916:6;31913:1;31910:13;31902:113;;;32001:1;31996:3;31992:11;31986:18;31982:1;31977:3;31973:11;31966:39;31938:2;31935:1;31931:10;31926:15;;31902:113;;;32033:6;32030:1;32027:13;32024:101;;;32113:1;32104:6;32099:3;32095:16;32088:27;32024:101;31873:258;31824:307;;;:::o;32137:320::-;32181:6;32218:1;32212:4;32208:12;32198:22;;32265:1;32259:4;32255:12;32286:18;32276:81;;32342:4;32334:6;32330:17;32320:27;;32276:81;32404:2;32396:6;32393:14;32373:18;32370:38;32367:84;;;32423:18;;:::i;:::-;32367:84;32188:269;32137:320;;;:::o;32463:281::-;32546:27;32568:4;32546:27;:::i;:::-;32538:6;32534:40;32676:6;32664:10;32661:22;32640:18;32628:10;32625:34;32622:62;32619:88;;;32687:18;;:::i;:::-;32619:88;32727:10;32723:2;32716:22;32506:238;32463:281;;:::o;32750:233::-;32789:3;32812:24;32830:5;32812:24;:::i;:::-;32803:33;;32858:66;32851:5;32848:77;32845:103;;;32928:18;;:::i;:::-;32845:103;32975:1;32968:5;32964:13;32957:20;;32750:233;;;:::o;32989:176::-;33021:1;33038:20;33056:1;33038:20;:::i;:::-;33033:25;;33072:20;33090:1;33072:20;:::i;:::-;33067:25;;33111:1;33101:35;;33116:18;;:::i;:::-;33101:35;33157:1;33154;33150:9;33145:14;;32989:176;;;;:::o;33171:180::-;33219:77;33216:1;33209:88;33316:4;33313:1;33306:15;33340:4;33337:1;33330:15;33357:180;33405:77;33402:1;33395:88;33502:4;33499:1;33492:15;33526:4;33523:1;33516:15;33543:180;33591:77;33588:1;33581:88;33688:4;33685:1;33678:15;33712:4;33709:1;33702:15;33729:180;33777:77;33774:1;33767:88;33874:4;33871:1;33864:15;33898:4;33895:1;33888:15;33915:180;33963:77;33960:1;33953:88;34060:4;34057:1;34050:15;34084:4;34081:1;34074:15;34101:180;34149:77;34146:1;34139:88;34246:4;34243:1;34236:15;34270:4;34267:1;34260:15;34287:117;34396:1;34393;34386:12;34410:117;34519:1;34516;34509:12;34533:117;34642:1;34639;34632:12;34656:117;34765:1;34762;34755:12;34779:117;34888:1;34885;34878:12;34902:102;34943:6;34994:2;34990:7;34985:2;34978:5;34974:14;34970:28;34960:38;;34902:102;;;:::o;35010:232::-;35150:34;35146:1;35138:6;35134:14;35127:58;35219:15;35214:2;35206:6;35202:15;35195:40;35010:232;:::o;35248:237::-;35388:34;35384:1;35376:6;35372:14;35365:58;35457:20;35452:2;35444:6;35440:15;35433:45;35248:237;:::o;35491:225::-;35631:34;35627:1;35619:6;35615:14;35608:58;35700:8;35695:2;35687:6;35683:15;35676:33;35491:225;:::o;35722:224::-;35862:34;35858:1;35850:6;35846:14;35839:58;35931:7;35926:2;35918:6;35914:15;35907:32;35722:224;:::o;35952:178::-;36092:30;36088:1;36080:6;36076:14;36069:54;35952:178;:::o;36136:223::-;36276:34;36272:1;36264:6;36260:14;36253:58;36345:6;36340:2;36332:6;36328:15;36321:31;36136:223;:::o;36365:175::-;36505:27;36501:1;36493:6;36489:14;36482:51;36365:175;:::o;36546:228::-;36686:34;36682:1;36674:6;36670:14;36663:58;36755:11;36750:2;36742:6;36738:15;36731:36;36546:228;:::o;36780:233::-;36920:34;36916:1;36908:6;36904:14;36897:58;36989:16;36984:2;36976:6;36972:15;36965:41;36780:233;:::o;37019:182::-;37159:34;37155:1;37147:6;37143:14;37136:58;37019:182;:::o;37207:::-;37347:34;37343:1;37335:6;37331:14;37324:58;37207:182;:::o;37395:174::-;37535:26;37531:1;37523:6;37519:14;37512:50;37395:174;:::o;37575:220::-;37715:34;37711:1;37703:6;37699:14;37692:58;37784:3;37779:2;37771:6;37767:15;37760:28;37575:220;:::o;37801:114::-;;:::o;37921:248::-;38061:34;38057:1;38049:6;38045:14;38038:58;38130:31;38125:2;38117:6;38113:15;38106:56;37921:248;:::o;38175:115::-;38258:1;38251:5;38248:12;38238:46;;38264:18;;:::i;:::-;38238:46;38175:115;:::o;38296:122::-;38369:24;38387:5;38369:24;:::i;:::-;38362:5;38359:35;38349:63;;38408:1;38405;38398:12;38349:63;38296:122;:::o;38424:116::-;38494:21;38509:5;38494:21;:::i;:::-;38487:5;38484:32;38474:60;;38530:1;38527;38520:12;38474:60;38424:116;:::o;38546:120::-;38618:23;38635:5;38618:23;:::i;:::-;38611:5;38608:34;38598:62;;38656:1;38653;38646:12;38598:62;38546:120;:::o;38672:122::-;38745:24;38763:5;38745:24;:::i;:::-;38738:5;38735:35;38725:63;;38784:1;38781;38774:12;38725:63;38672:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3175400","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2990","getApproved(uint256)":"5323","getBreedFromModdedRng(uint256)":"infinite","getCallbackGasLimit()":"infinite","getChanceArray()":"infinite","getDogTokenUris(uint256)":"infinite","getGasLane()":"infinite","getMintFee()":"infinite","getSenderFromRequestId(uint256)":"2955","getSubscriptionId()":"infinite","getTokenCounter()":"2526","isApprovedForAll(address,address)":"infinite","name()":"infinite","owner()":"2567","ownerOf(uint256)":"3069","rawFulfillRandomWords(uint256,uint256[])":"infinite","renounceOwnership()":"30444","requestNft()":"infinite","s_tokenCounter()":"2497","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"820","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"30857","withdraw()":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","getBreedFromModdedRng(uint256)":"a51cccf3","getCallbackGasLimit()":"de8be8e7","getChanceArray()":"5dacf5f4","getDogTokenUris(uint256)":"3af25975","getGasLane()":"c19dd76b","getMintFee()":"7a5caab3","getSenderFromRequestId(uint256)":"83762616","getSubscriptionId()":"de3d9fb7","getTokenCounter()":"6e02007d","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","renounceOwnership()":"715018a6","requestNft()":"aa152491","s_tokenCounter()":"0b21a83b","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"string[3]\",\"name\":\"dogTokenUris\",\"type\":\"string[3]\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomIpfsNft__NeedMoreETHSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomIpfsNft__RangeOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomIpfsNft__TranferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum RandomIpfsNft.Breed\",\"name\":\"dogBreed\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"NftRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moddedRng\",\"type\":\"uint256\"}],\"name\":\"getBreedFromModdedRng\",\"outputs\":[{\"internalType\":\"enum RandomIpfsNft.Breed\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChanceArray\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDogTokenUris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getSenderFromRequestId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomIpfsNft.sol\":\"RandomIpfsNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RandomIpfsNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror RandomIpfsNft__RangeOutOfBounds();\\nerror RandomIpfsNft__NeedMoreETHSent();\\nerror RandomIpfsNft__TranferFailed();\\n\\ncontract RandomIpfsNft is VRFConsumerBaseV2, ERC721URIStorage, Ownable {\\n    enum Breed {\\n        PUG,\\n        SHIBA_INU,\\n        ST_BERNARD\\n    }\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 1;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint256 internal immutable i_mintFee;\\n\\n    // VRF helpers\\n    mapping(uint256 => address) s_requestIdToSender;\\n\\n    // NFT variables\\n    uint256 public s_tokenCounter;\\n    uint256 internal immutable MAX_CHANCE_VALUE = 60;\\n    string[] internal s_dogTokenUris;\\n\\n    // Events\\n\\n    event NftRequested(uint256 indexed requestId, address requester);\\n    event NftMinted(Breed dogBreed, address minter);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        string[3] memory dogTokenUris,\\n        uint256 mintFee\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\\\"Random IPFS NFT\\\", \\\"RIN\\\") {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_subscriptionId = subscriptionId;\\n        s_dogTokenUris = dogTokenUris;\\n        i_mintFee = mintFee;\\n    }\\n\\n    function requestNft() public payable returns (uint256 requestId) {\\n        if (msg.value < i_mintFee) {\\n            revert RandomIpfsNft__NeedMoreETHSent();\\n        }\\n        requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToSender[requestId] = msg.sender;\\n        emit NftRequested(requestId, msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert RandomIpfsNft__TranferFailed();\\n        }\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        address dogOwner = s_requestIdToSender[requestId];\\n        uint256 newTokenId = s_tokenCounter;\\n        _safeMint(dogOwner, newTokenId);\\n\\n        uint256 moddedRng = randomWords[0] % MAX_CHANCE_VALUE;\\n\\n        Breed dogBreed = getBreedFromModdedRng(moddedRng);\\n        s_tokenCounter += 1;\\n        _safeMint(s_requestIdToSender[requestId], newTokenId);\\n        _setTokenURI(newTokenId, s_dogTokenUris[uint256(dogBreed)]);\\n        emit NftMinted(dogBreed, dogOwner);\\n    }\\n\\n    function getBreedFromModdedRng(\\n        uint256 moddedRng\\n    ) public pure returns (Breed) {\\n        uint256 cumulativeSum = 0;\\n        uint256[3] memory chanceArray = getChanceArray();\\n        for (uint256 i = 0; i < chanceArray.length; i++) {\\n            if (\\n                moddedRng >= cumulativeSum &&\\n                moddedRng < cumulativeSum + chanceArray[i]\\n            ) {\\n                return Breed(i);\\n            }\\n            cumulativeSum += chanceArray[i];\\n        }\\n\\n        revert RandomIpfsNft__RangeOutOfBounds();\\n    }\\n\\n    function getSubscriptionId() public view returns (uint256) {\\n        return i_subscriptionId;\\n    }\\n    function getSenderFromRequestId(uint256 requestId) public view returns(address){\\n        return s_requestIdToSender[requestId];\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getChanceArray() public pure returns (uint256[3] memory) {\\n        return [10, 30, MAX_CHANCE_VALUE];\\n    }\\n\\n    function getMintFee() public view returns (uint256) {\\n        return i_mintFee;\\n    }\\n\\n    function getDogTokenUris(\\n        uint256 index\\n    ) public view returns (string memory) {\\n        return s_dogTokenUris[index];\\n    }\\n\\n    function getTokenCounter() public view returns (uint256) {\\n        return s_tokenCounter;\\n    }\\n}\\n\",\"keccak256\":\"0x3c3f89ea529937968835e10c9caafec32d526d3d085a92f8634cc9f116d21345\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":292,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":294,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":298,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":302,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":306,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":312,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1358,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":161,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_owner","offset":0,"slot":"7","type":"t_address"},{"astId":2969,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"s_requestIdToSender","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_address)"},{"astId":2971,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"s_tokenCounter","offset":0,"slot":"9","type":"t_uint256"},{"astId":2977,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"s_dogTokenUris","offset":0,"slot":"10","type":"t_array(t_string_storage)dyn_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}